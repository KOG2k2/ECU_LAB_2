
Testing2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f08  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008e8  08006098  08006098  00016098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006980  08006980  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006980  08006980  00016980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006988  08006988  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006988  08006988  00016988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800698c  0800698c  0001698c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006990  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000003b4  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000042c  2000042c  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001099b  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002499  00000000  00000000  00030a43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb8  00000000  00000000  00032ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e88  00000000  00000000  00033e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021573  00000000  00000000  00034d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010970  00000000  00000000  00056293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfc62  00000000  00000000  00066c03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00136865  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004610  00000000  00000000  001368b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006080 	.word	0x08006080

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08006080 	.word	0x08006080

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <spi1_communication>:

uint8_t chRetry = 0;
uint8_t chTemp = 0;

void spi1_communication(uint8_t send_char)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY_TX) {
 800057e:	e005      	b.n	800058c <spi1_communication+0x18>
		if (++ chRetry > 200) {
 8000580:	4b1b      	ldr	r3, [pc, #108]	; (80005f0 <spi1_communication+0x7c>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	3301      	adds	r3, #1
 8000586:	b2da      	uxtb	r2, r3
 8000588:	4b19      	ldr	r3, [pc, #100]	; (80005f0 <spi1_communication+0x7c>)
 800058a:	701a      	strb	r2, [r3, #0]
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY_TX) {
 800058c:	4819      	ldr	r0, [pc, #100]	; (80005f4 <spi1_communication+0x80>)
 800058e:	f004 fb17 	bl	8004bc0 <HAL_SPI_GetState>
 8000592:	4603      	mov	r3, r0
 8000594:	2b03      	cmp	r3, #3
 8000596:	d0f3      	beq.n	8000580 <spi1_communication+0xc>

		}
	}

	//SPI_I2S_SendData(SPI1, send_char);
	HAL_SPI_Transmit(&hspi1, &send_char, 1, 100);
 8000598:	1df9      	adds	r1, r7, #7
 800059a:	2364      	movs	r3, #100	; 0x64
 800059c:	2201      	movs	r2, #1
 800059e:	4815      	ldr	r0, [pc, #84]	; (80005f4 <spi1_communication+0x80>)
 80005a0:	f003 ff1f 	bl	80043e2 <HAL_SPI_Transmit>

	chRetry=0;
 80005a4:	4b12      	ldr	r3, [pc, #72]	; (80005f0 <spi1_communication+0x7c>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	701a      	strb	r2, [r3, #0]
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY_RX){
 80005aa:	e005      	b.n	80005b8 <spi1_communication+0x44>
		if (++ chRetry > 200) {
 80005ac:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <spi1_communication+0x7c>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	3301      	adds	r3, #1
 80005b2:	b2da      	uxtb	r2, r3
 80005b4:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <spi1_communication+0x7c>)
 80005b6:	701a      	strb	r2, [r3, #0]
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY_RX){
 80005b8:	480e      	ldr	r0, [pc, #56]	; (80005f4 <spi1_communication+0x80>)
 80005ba:	f004 fb01 	bl	8004bc0 <HAL_SPI_GetState>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b04      	cmp	r3, #4
 80005c2:	d0f3      	beq.n	80005ac <spi1_communication+0x38>

		}
	}

	chTemp = HAL_SPI_Receive(&hspi1, &send_char, 1, 100);
 80005c4:	1df9      	adds	r1, r7, #7
 80005c6:	2364      	movs	r3, #100	; 0x64
 80005c8:	2201      	movs	r2, #1
 80005ca:	480a      	ldr	r0, [pc, #40]	; (80005f4 <spi1_communication+0x80>)
 80005cc:	f004 f845 	bl	800465a <HAL_SPI_Receive>
 80005d0:	4603      	mov	r3, r0
 80005d2:	461a      	mov	r2, r3
 80005d4:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <spi1_communication+0x84>)
 80005d6:	701a      	strb	r2, [r3, #0]

	/* Wait until the BSY flag is set */
	while(HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY);
 80005d8:	bf00      	nop
 80005da:	4806      	ldr	r0, [pc, #24]	; (80005f4 <spi1_communication+0x80>)
 80005dc:	f004 faf0 	bl	8004bc0 <HAL_SPI_GetState>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b02      	cmp	r3, #2
 80005e4:	d0f9      	beq.n	80005da <spi1_communication+0x66>
}
 80005e6:	bf00      	nop
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000094 	.word	0x20000094
 80005f4:	20000130 	.word	0x20000130
 80005f8:	20000095 	.word	0x20000095

080005fc <lcd_write_byte>:

void lcd_write_byte(uint8_t chByte, uint8_t chCmd)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	460a      	mov	r2, r1
 8000606:	71fb      	strb	r3, [r7, #7]
 8000608:	4613      	mov	r3, r2
 800060a:	71bb      	strb	r3, [r7, #6]
    if(chCmd) {
 800060c:	79bb      	ldrb	r3, [r7, #6]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d006      	beq.n	8000620 <lcd_write_byte+0x24>
        LCD_DC_H();
 8000612:	2201      	movs	r2, #1
 8000614:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000618:	480d      	ldr	r0, [pc, #52]	; (8000650 <lcd_write_byte+0x54>)
 800061a:	f003 fa1b 	bl	8003a54 <HAL_GPIO_WritePin>
 800061e:	e005      	b.n	800062c <lcd_write_byte+0x30>
    } else {
        LCD_DC_L();
 8000620:	2200      	movs	r2, #0
 8000622:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000626:	480a      	ldr	r0, [pc, #40]	; (8000650 <lcd_write_byte+0x54>)
 8000628:	f003 fa14 	bl	8003a54 <HAL_GPIO_WritePin>
    }

    LCD_CS_L();
 800062c:	2200      	movs	r2, #0
 800062e:	2180      	movs	r1, #128	; 0x80
 8000630:	4807      	ldr	r0, [pc, #28]	; (8000650 <lcd_write_byte+0x54>)
 8000632:	f003 fa0f 	bl	8003a54 <HAL_GPIO_WritePin>
    spi1_communication(chByte);
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff ff9b 	bl	8000574 <spi1_communication>
    LCD_CS_H();
 800063e:	2201      	movs	r2, #1
 8000640:	2180      	movs	r1, #128	; 0x80
 8000642:	4803      	ldr	r0, [pc, #12]	; (8000650 <lcd_write_byte+0x54>)
 8000644:	f003 fa06 	bl	8003a54 <HAL_GPIO_WritePin>
}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40020400 	.word	0x40020400

08000654 <lcd_write_command>:

void lcd_write_command(uint8_t chRegister, uint8_t chValue)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	460a      	mov	r2, r1
 800065e:	71fb      	strb	r3, [r7, #7]
 8000660:	4613      	mov	r3, r2
 8000662:	71bb      	strb	r3, [r7, #6]
	lcd_write_byte(chRegister, LCD_CMD);
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ffc7 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 800066e:	79bb      	ldrb	r3, [r7, #6]
 8000670:	2101      	movs	r1, #1
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff ffc2 	bl	80005fc <lcd_write_byte>
}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <lcd_clear_screen>:
	lcd_write_byte(hwYpos&0xff,LCD_DATA);
#endif
}

void lcd_clear_screen(uint16_t hwColor)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	80fb      	strh	r3, [r7, #6]
	uint32_t i, wCount = LCD_WIDTH;
 800068a:	23f0      	movs	r3, #240	; 0xf0
 800068c:	60bb      	str	r3, [r7, #8]
	wCount *= LCD_HEIGHT;
 800068e:	68ba      	ldr	r2, [r7, #8]
 8000690:	4613      	mov	r3, r2
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	4413      	add	r3, r2
 8000696:	019b      	lsls	r3, r3, #6
 8000698:	60bb      	str	r3, [r7, #8]

#ifdef HX8347D_DEVICE
	lcd_set_cursor(0, 0);
	lcd_write_byte(0x22, LCD_CMD);
#elif defined ST7789_DEVICE
	lcd_write_byte(0x2A,LCD_CMD);
 800069a:	2100      	movs	r1, #0
 800069c:	202a      	movs	r0, #42	; 0x2a
 800069e:	f7ff ffad 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 80006a2:	2101      	movs	r1, #1
 80006a4:	2000      	movs	r0, #0
 80006a6:	f7ff ffa9 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 80006aa:	2101      	movs	r1, #1
 80006ac:	2000      	movs	r0, #0
 80006ae:	f7ff ffa5 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 80006b2:	2101      	movs	r1, #1
 80006b4:	2000      	movs	r0, #0
 80006b6:	f7ff ffa1 	bl	80005fc <lcd_write_byte>
	lcd_write_byte((LCD_WIDTH-1)&0xff,LCD_DATA);
 80006ba:	2101      	movs	r1, #1
 80006bc:	20ef      	movs	r0, #239	; 0xef
 80006be:	f7ff ff9d 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x2B,LCD_CMD);
 80006c2:	2100      	movs	r1, #0
 80006c4:	202b      	movs	r0, #43	; 0x2b
 80006c6:	f7ff ff99 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 80006ca:	2101      	movs	r1, #1
 80006cc:	2000      	movs	r0, #0
 80006ce:	f7ff ff95 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 80006d2:	2101      	movs	r1, #1
 80006d4:	2000      	movs	r0, #0
 80006d6:	f7ff ff91 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(((LCD_HEIGHT-1)>>8)&0xff,LCD_DATA);
 80006da:	2101      	movs	r1, #1
 80006dc:	2001      	movs	r0, #1
 80006de:	f7ff ff8d 	bl	80005fc <lcd_write_byte>
	lcd_write_byte((LCD_HEIGHT-1)&0xff,LCD_DATA);
 80006e2:	2101      	movs	r1, #1
 80006e4:	203f      	movs	r0, #63	; 0x3f
 80006e6:	f7ff ff89 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x2C,LCD_CMD);
 80006ea:	2100      	movs	r1, #0
 80006ec:	202c      	movs	r0, #44	; 0x2c
 80006ee:	f7ff ff85 	bl	80005fc <lcd_write_byte>
#endif
	LCD_CS_L();
 80006f2:	2200      	movs	r2, #0
 80006f4:	2180      	movs	r1, #128	; 0x80
 80006f6:	4814      	ldr	r0, [pc, #80]	; (8000748 <lcd_clear_screen+0xc8>)
 80006f8:	f003 f9ac 	bl	8003a54 <HAL_GPIO_WritePin>
	LCD_DC_H();
 80006fc:	2201      	movs	r2, #1
 80006fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000702:	4811      	ldr	r0, [pc, #68]	; (8000748 <lcd_clear_screen+0xc8>)
 8000704:	f003 f9a6 	bl	8003a54 <HAL_GPIO_WritePin>
	for(i=0;i<wCount;i++){
 8000708:	2300      	movs	r3, #0
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	e00e      	b.n	800072c <lcd_clear_screen+0xac>
		spi1_communication(hwColor>>8);

//		spi1_communication(hwColor>>8);
//		spi1_communication((uint8_t)(hwColor&0xff));
#elif defined ST7789_DEVICE
		spi1_communication(hwColor>>8);
 800070e:	88fb      	ldrh	r3, [r7, #6]
 8000710:	0a1b      	lsrs	r3, r3, #8
 8000712:	b29b      	uxth	r3, r3
 8000714:	b2db      	uxtb	r3, r3
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff ff2c 	bl	8000574 <spi1_communication>
		spi1_communication((uint8_t)(hwColor&0xff));
 800071c:	88fb      	ldrh	r3, [r7, #6]
 800071e:	b2db      	uxtb	r3, r3
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff ff27 	bl	8000574 <spi1_communication>
	for(i=0;i<wCount;i++){
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	3301      	adds	r3, #1
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fa      	ldr	r2, [r7, #12]
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	429a      	cmp	r2, r3
 8000732:	d3ec      	bcc.n	800070e <lcd_clear_screen+0x8e>
#endif
	}
	LCD_CS_H();
 8000734:	2201      	movs	r2, #1
 8000736:	2180      	movs	r1, #128	; 0x80
 8000738:	4803      	ldr	r0, [pc, #12]	; (8000748 <lcd_clear_screen+0xc8>)
 800073a:	f003 f98b 	bl	8003a54 <HAL_GPIO_WritePin>
}
 800073e:	bf00      	nop
 8000740:	3710      	adds	r7, #16
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40020400 	.word	0x40020400

0800074c <lcd_init>:

void lcd_init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	//lcd_ctrl_port_init();
	LCD_RST_H();
 8000750:	2201      	movs	r2, #1
 8000752:	2104      	movs	r1, #4
 8000754:	4881      	ldr	r0, [pc, #516]	; (800095c <lcd_init+0x210>)
 8000756:	f003 f97d 	bl	8003a54 <HAL_GPIO_WritePin>
	//spi_init();

	LCD_CS_H();
 800075a:	2201      	movs	r2, #1
 800075c:	2180      	movs	r1, #128	; 0x80
 800075e:	487f      	ldr	r0, [pc, #508]	; (800095c <lcd_init+0x210>)
 8000760:	f003 f978 	bl	8003a54 <HAL_GPIO_WritePin>
	LCD_BKL_H();
 8000764:	2201      	movs	r2, #1
 8000766:	2140      	movs	r1, #64	; 0x40
 8000768:	487c      	ldr	r0, [pc, #496]	; (800095c <lcd_init+0x210>)
 800076a:	f003 f973 	bl	8003a54 <HAL_GPIO_WritePin>
#ifdef 	ST7789_DEVICE
	LCD_RST_H();
 800076e:	2201      	movs	r2, #1
 8000770:	2104      	movs	r1, #4
 8000772:	487a      	ldr	r0, [pc, #488]	; (800095c <lcd_init+0x210>)
 8000774:	f003 f96e 	bl	8003a54 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000778:	2005      	movs	r0, #5
 800077a:	f001 fc75 	bl	8002068 <HAL_Delay>
	LCD_RST_L();
 800077e:	2200      	movs	r2, #0
 8000780:	2104      	movs	r1, #4
 8000782:	4876      	ldr	r0, [pc, #472]	; (800095c <lcd_init+0x210>)
 8000784:	f003 f966 	bl	8003a54 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000788:	2005      	movs	r0, #5
 800078a:	f001 fc6d 	bl	8002068 <HAL_Delay>
	LCD_RST_H();
 800078e:	2201      	movs	r2, #1
 8000790:	2104      	movs	r1, #4
 8000792:	4872      	ldr	r0, [pc, #456]	; (800095c <lcd_init+0x210>)
 8000794:	f003 f95e 	bl	8003a54 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000798:	2005      	movs	r0, #5
 800079a:	f001 fc65 	bl	8002068 <HAL_Delay>
	LCD_CS_H();
 800079e:	2201      	movs	r2, #1
 80007a0:	2180      	movs	r1, #128	; 0x80
 80007a2:	486e      	ldr	r0, [pc, #440]	; (800095c <lcd_init+0x210>)
 80007a4:	f003 f956 	bl	8003a54 <HAL_GPIO_WritePin>
	lcd_write_command(0x07,0x00);
	lcd_write_command(0x08,0x01);
	lcd_write_command(0x09,0x3F);

#elif defined ST7789_DEVICE
	lcd_write_byte(0x11,LCD_CMD);
 80007a8:	2100      	movs	r1, #0
 80007aa:	2011      	movs	r0, #17
 80007ac:	f7ff ff26 	bl	80005fc <lcd_write_byte>
	HAL_Delay(10);
 80007b0:	200a      	movs	r0, #10
 80007b2:	f001 fc59 	bl	8002068 <HAL_Delay>
	lcd_write_command(0x36,0x00);
 80007b6:	2100      	movs	r1, #0
 80007b8:	2036      	movs	r0, #54	; 0x36
 80007ba:	f7ff ff4b 	bl	8000654 <lcd_write_command>
	lcd_write_command(0x3a,0x05);
 80007be:	2105      	movs	r1, #5
 80007c0:	203a      	movs	r0, #58	; 0x3a
 80007c2:	f7ff ff47 	bl	8000654 <lcd_write_command>
	lcd_write_byte(0xb2,LCD_CMD);
 80007c6:	2100      	movs	r1, #0
 80007c8:	20b2      	movs	r0, #178	; 0xb2
 80007ca:	f7ff ff17 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x0c,LCD_DATA);
 80007ce:	2101      	movs	r1, #1
 80007d0:	200c      	movs	r0, #12
 80007d2:	f7ff ff13 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x0c,LCD_DATA);
 80007d6:	2101      	movs	r1, #1
 80007d8:	200c      	movs	r0, #12
 80007da:	f7ff ff0f 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 80007de:	2101      	movs	r1, #1
 80007e0:	2000      	movs	r0, #0
 80007e2:	f7ff ff0b 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x33,LCD_DATA);
 80007e6:	2101      	movs	r1, #1
 80007e8:	2033      	movs	r0, #51	; 0x33
 80007ea:	f7ff ff07 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x33,LCD_DATA);
 80007ee:	2101      	movs	r1, #1
 80007f0:	2033      	movs	r0, #51	; 0x33
 80007f2:	f7ff ff03 	bl	80005fc <lcd_write_byte>
	lcd_write_command(0xb7,0x35);
 80007f6:	2135      	movs	r1, #53	; 0x35
 80007f8:	20b7      	movs	r0, #183	; 0xb7
 80007fa:	f7ff ff2b 	bl	8000654 <lcd_write_command>
	lcd_write_command(0xbb,0x28);
 80007fe:	2128      	movs	r1, #40	; 0x28
 8000800:	20bb      	movs	r0, #187	; 0xbb
 8000802:	f7ff ff27 	bl	8000654 <lcd_write_command>
	lcd_write_command(0xc0,0x3c);
 8000806:	213c      	movs	r1, #60	; 0x3c
 8000808:	20c0      	movs	r0, #192	; 0xc0
 800080a:	f7ff ff23 	bl	8000654 <lcd_write_command>
	lcd_write_command(0xc2,0x01);
 800080e:	2101      	movs	r1, #1
 8000810:	20c2      	movs	r0, #194	; 0xc2
 8000812:	f7ff ff1f 	bl	8000654 <lcd_write_command>
	lcd_write_command(0xc3,0x0b);
 8000816:	210b      	movs	r1, #11
 8000818:	20c3      	movs	r0, #195	; 0xc3
 800081a:	f7ff ff1b 	bl	8000654 <lcd_write_command>
	lcd_write_command(0xc4,0x20);
 800081e:	2120      	movs	r1, #32
 8000820:	20c4      	movs	r0, #196	; 0xc4
 8000822:	f7ff ff17 	bl	8000654 <lcd_write_command>
	lcd_write_command(0xc6,0x0f);
 8000826:	210f      	movs	r1, #15
 8000828:	20c6      	movs	r0, #198	; 0xc6
 800082a:	f7ff ff13 	bl	8000654 <lcd_write_command>
	lcd_write_byte(0xD0,LCD_CMD);
 800082e:	2100      	movs	r1, #0
 8000830:	20d0      	movs	r0, #208	; 0xd0
 8000832:	f7ff fee3 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0xa4,LCD_DATA);
 8000836:	2101      	movs	r1, #1
 8000838:	20a4      	movs	r0, #164	; 0xa4
 800083a:	f7ff fedf 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0xa1,LCD_DATA);
 800083e:	2101      	movs	r1, #1
 8000840:	20a1      	movs	r0, #161	; 0xa1
 8000842:	f7ff fedb 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0xe0,LCD_CMD);
 8000846:	2100      	movs	r1, #0
 8000848:	20e0      	movs	r0, #224	; 0xe0
 800084a:	f7ff fed7 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0xd0,LCD_DATA);
 800084e:	2101      	movs	r1, #1
 8000850:	20d0      	movs	r0, #208	; 0xd0
 8000852:	f7ff fed3 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x01,LCD_DATA);
 8000856:	2101      	movs	r1, #1
 8000858:	2001      	movs	r0, #1
 800085a:	f7ff fecf 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x08,LCD_DATA);
 800085e:	2101      	movs	r1, #1
 8000860:	2008      	movs	r0, #8
 8000862:	f7ff fecb 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x0f,LCD_DATA);
 8000866:	2101      	movs	r1, #1
 8000868:	200f      	movs	r0, #15
 800086a:	f7ff fec7 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x11,LCD_DATA);
 800086e:	2101      	movs	r1, #1
 8000870:	2011      	movs	r0, #17
 8000872:	f7ff fec3 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x2a,LCD_DATA);
 8000876:	2101      	movs	r1, #1
 8000878:	202a      	movs	r0, #42	; 0x2a
 800087a:	f7ff febf 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x36,LCD_DATA);
 800087e:	2101      	movs	r1, #1
 8000880:	2036      	movs	r0, #54	; 0x36
 8000882:	f7ff febb 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x55,LCD_DATA);
 8000886:	2101      	movs	r1, #1
 8000888:	2055      	movs	r0, #85	; 0x55
 800088a:	f7ff feb7 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x44,LCD_DATA);
 800088e:	2101      	movs	r1, #1
 8000890:	2044      	movs	r0, #68	; 0x44
 8000892:	f7ff feb3 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x3a,LCD_DATA);
 8000896:	2101      	movs	r1, #1
 8000898:	203a      	movs	r0, #58	; 0x3a
 800089a:	f7ff feaf 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x0b,LCD_DATA);
 800089e:	2101      	movs	r1, #1
 80008a0:	200b      	movs	r0, #11
 80008a2:	f7ff feab 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x06,LCD_DATA);
 80008a6:	2101      	movs	r1, #1
 80008a8:	2006      	movs	r0, #6
 80008aa:	f7ff fea7 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x11,LCD_DATA);
 80008ae:	2101      	movs	r1, #1
 80008b0:	2011      	movs	r0, #17
 80008b2:	f7ff fea3 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x20,LCD_DATA);
 80008b6:	2101      	movs	r1, #1
 80008b8:	2020      	movs	r0, #32
 80008ba:	f7ff fe9f 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0xe1,LCD_CMD);
 80008be:	2100      	movs	r1, #0
 80008c0:	20e1      	movs	r0, #225	; 0xe1
 80008c2:	f7ff fe9b 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0xd0,LCD_DATA);
 80008c6:	2101      	movs	r1, #1
 80008c8:	20d0      	movs	r0, #208	; 0xd0
 80008ca:	f7ff fe97 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x02,LCD_DATA);
 80008ce:	2101      	movs	r1, #1
 80008d0:	2002      	movs	r0, #2
 80008d2:	f7ff fe93 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x07,LCD_DATA);
 80008d6:	2101      	movs	r1, #1
 80008d8:	2007      	movs	r0, #7
 80008da:	f7ff fe8f 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x0a,LCD_DATA);
 80008de:	2101      	movs	r1, #1
 80008e0:	200a      	movs	r0, #10
 80008e2:	f7ff fe8b 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x0b,LCD_DATA);
 80008e6:	2101      	movs	r1, #1
 80008e8:	200b      	movs	r0, #11
 80008ea:	f7ff fe87 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x18,LCD_DATA);
 80008ee:	2101      	movs	r1, #1
 80008f0:	2018      	movs	r0, #24
 80008f2:	f7ff fe83 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x34,LCD_DATA);
 80008f6:	2101      	movs	r1, #1
 80008f8:	2034      	movs	r0, #52	; 0x34
 80008fa:	f7ff fe7f 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x43,LCD_DATA);
 80008fe:	2101      	movs	r1, #1
 8000900:	2043      	movs	r0, #67	; 0x43
 8000902:	f7ff fe7b 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x4a,LCD_DATA);
 8000906:	2101      	movs	r1, #1
 8000908:	204a      	movs	r0, #74	; 0x4a
 800090a:	f7ff fe77 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x2b,LCD_DATA);
 800090e:	2101      	movs	r1, #1
 8000910:	202b      	movs	r0, #43	; 0x2b
 8000912:	f7ff fe73 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x1b,LCD_DATA);
 8000916:	2101      	movs	r1, #1
 8000918:	201b      	movs	r0, #27
 800091a:	f7ff fe6f 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x1c,LCD_DATA);
 800091e:	2101      	movs	r1, #1
 8000920:	201c      	movs	r0, #28
 8000922:	f7ff fe6b 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x22,LCD_DATA);
 8000926:	2101      	movs	r1, #1
 8000928:	2022      	movs	r0, #34	; 0x22
 800092a:	f7ff fe67 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x1f,LCD_DATA);
 800092e:	2101      	movs	r1, #1
 8000930:	201f      	movs	r0, #31
 8000932:	f7ff fe63 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x29,LCD_CMD);
 8000936:	2100      	movs	r1, #0
 8000938:	2029      	movs	r0, #41	; 0x29
 800093a:	f7ff fe5f 	bl	80005fc <lcd_write_byte>
	lcd_write_command(0x51,0xff);
 800093e:	21ff      	movs	r1, #255	; 0xff
 8000940:	2051      	movs	r0, #81	; 0x51
 8000942:	f7ff fe87 	bl	8000654 <lcd_write_command>
	lcd_write_command(0x55,0xB0);
 8000946:	21b0      	movs	r1, #176	; 0xb0
 8000948:	2055      	movs	r0, #85	; 0x55
 800094a:	f7ff fe83 	bl	8000654 <lcd_write_command>
#endif

	lcd_clear_screen(WHITE);
 800094e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000952:	f7ff fe95 	bl	8000680 <lcd_clear_screen>
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40020400 	.word	0x40020400

08000960 <CAN1_filter_init>:
static void MX_CAN2_Init(void);
static void MX_TIM2_Init(void);
static void MX_SPI1_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */
void CAN1_filter_init(){
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
	canfil1.FilterBank = 10;
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <CAN1_filter_init+0x50>)
 8000966:	220a      	movs	r2, #10
 8000968:	615a      	str	r2, [r3, #20]
	canfil1.FilterMode = CAN_FILTERMODE_IDMASK;
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <CAN1_filter_init+0x50>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
	canfil1.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <CAN1_filter_init+0x50>)
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]
	canfil1.FilterIdHigh = 0x7A2 << 5;
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <CAN1_filter_init+0x50>)
 8000978:	f24f 4240 	movw	r2, #62528	; 0xf440
 800097c:	601a      	str	r2, [r3, #0]
	canfil1.FilterIdLow = 0;
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <CAN1_filter_init+0x50>)
 8000980:	2200      	movs	r2, #0
 8000982:	605a      	str	r2, [r3, #4]
	canfil1.FilterMaskIdHigh = 0x7A2 << 5;
 8000984:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <CAN1_filter_init+0x50>)
 8000986:	f24f 4240 	movw	r2, #62528	; 0xf440
 800098a:	609a      	str	r2, [r3, #8]
	canfil1.FilterMaskIdLow = 0;
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <CAN1_filter_init+0x50>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
	canfil1.FilterScale = CAN_FILTERSCALE_32BIT;
 8000992:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <CAN1_filter_init+0x50>)
 8000994:	2201      	movs	r2, #1
 8000996:	61da      	str	r2, [r3, #28]
	canfil1.FilterActivation = ENABLE;
 8000998:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <CAN1_filter_init+0x50>)
 800099a:	2201      	movs	r2, #1
 800099c:	621a      	str	r2, [r3, #32]
	canfil1.SlaveStartFilterBank = 14;
 800099e:	4b04      	ldr	r3, [pc, #16]	; (80009b0 <CAN1_filter_init+0x50>)
 80009a0:	220e      	movs	r2, #14
 80009a2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	20000238 	.word	0x20000238

080009b4 <CAN2_filter_init>:

void CAN2_filter_init(){
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
	canfil2.FilterBank = 20;
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <CAN2_filter_init+0x50>)
 80009ba:	2214      	movs	r2, #20
 80009bc:	615a      	str	r2, [r3, #20]
	canfil2.FilterMode = CAN_FILTERMODE_IDMASK;
 80009be:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <CAN2_filter_init+0x50>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
	canfil2.FilterFIFOAssignment = CAN_RX_FIFO1;
 80009c4:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <CAN2_filter_init+0x50>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	611a      	str	r2, [r3, #16]
	canfil2.FilterIdHigh = 0x712 << 5;
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <CAN2_filter_init+0x50>)
 80009cc:	f24e 2240 	movw	r2, #57920	; 0xe240
 80009d0:	601a      	str	r2, [r3, #0]
	canfil2.FilterIdLow = 0;
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <CAN2_filter_init+0x50>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	605a      	str	r2, [r3, #4]
	canfil2.FilterMaskIdHigh = 0x712 << 5;
 80009d8:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <CAN2_filter_init+0x50>)
 80009da:	f24e 2240 	movw	r2, #57920	; 0xe240
 80009de:	609a      	str	r2, [r3, #8]
	canfil2.FilterMaskIdLow = 0;
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <CAN2_filter_init+0x50>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
	canfil2.FilterScale = CAN_FILTERSCALE_32BIT;
 80009e6:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <CAN2_filter_init+0x50>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	61da      	str	r2, [r3, #28]
	canfil2.FilterActivation = ENABLE;
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <CAN2_filter_init+0x50>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	621a      	str	r2, [r3, #32]
	canfil2.SlaveStartFilterBank = 14;
 80009f2:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <CAN2_filter_init+0x50>)
 80009f4:	220e      	movs	r2, #14
 80009f6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	20000260 	.word	0x20000260

08000a08 <Tx1_message_define>:

void Tx1_message_define(){
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
	tx1Header.DLC = 8;
 8000a0c:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <Tx1_message_define+0x34>)
 8000a0e:	2208      	movs	r2, #8
 8000a10:	611a      	str	r2, [r3, #16]
	tx1Header.IDE = CAN_ID_STD;
 8000a12:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <Tx1_message_define+0x34>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
	tx1Header.RTR = CAN_RTR_DATA;
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <Tx1_message_define+0x34>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
	tx1Header.StdId = 0x712;
 8000a1e:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <Tx1_message_define+0x34>)
 8000a20:	f240 7212 	movw	r2, #1810	; 0x712
 8000a24:	601a      	str	r2, [r3, #0]
	tx1Header.ExtId = 0x02;
 8000a26:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <Tx1_message_define+0x34>)
 8000a28:	2202      	movs	r2, #2
 8000a2a:	605a      	str	r2, [r3, #4]
	tx1Header.TransmitGlobalTime = DISABLE;
 8000a2c:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <Tx1_message_define+0x34>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	751a      	strb	r2, [r3, #20]
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	200001ec 	.word	0x200001ec

08000a40 <Tx2_message_define>:

void Tx2_message_define(){
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
	tx2Header.DLC = 8;
 8000a44:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <Tx2_message_define+0x34>)
 8000a46:	2208      	movs	r2, #8
 8000a48:	611a      	str	r2, [r3, #16]
	tx2Header.IDE = CAN_ID_STD;
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <Tx2_message_define+0x34>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
	tx2Header.RTR = CAN_RTR_DATA;
 8000a50:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <Tx2_message_define+0x34>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
	tx2Header.StdId = 0x7A2;
 8000a56:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <Tx2_message_define+0x34>)
 8000a58:	f240 72a2 	movw	r2, #1954	; 0x7a2
 8000a5c:	601a      	str	r2, [r3, #0]
	tx2Header.ExtId = 0x02;
 8000a5e:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <Tx2_message_define+0x34>)
 8000a60:	2202      	movs	r2, #2
 8000a62:	605a      	str	r2, [r3, #4]
	tx2Header.TransmitGlobalTime = DISABLE;
 8000a64:	4b03      	ldr	r3, [pc, #12]	; (8000a74 <Tx2_message_define+0x34>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	751a      	strb	r2, [r3, #20]
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	20000220 	.word	0x20000220

08000a78 <Tx1_data>:

//Practice 1 data
#ifdef DATA1_ID

	void Tx1_data(){
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
		Tx1Data[0] = SERVICE_ID;
 8000a7c:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <Tx1_data+0x28>)
 8000a7e:	2222      	movs	r2, #34	; 0x22
 8000a80:	701a      	strb	r2, [r3, #0]
		Tx1Data[1] = (DATA1_ID >> 16) & 0xFF;
 8000a82:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <Tx1_data+0x28>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	705a      	strb	r2, [r3, #1]
		Tx1Data[2] = (DATA1_ID >> 8) & 0xFF;
 8000a88:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <Tx1_data+0x28>)
 8000a8a:	22f0      	movs	r2, #240	; 0xf0
 8000a8c:	709a      	strb	r2, [r3, #2]
		Tx1Data[3] = DATA1_ID & 0xFF;
 8000a8e:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <Tx1_data+0x28>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	70da      	strb	r2, [r3, #3]
	}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	2000028c 	.word	0x2000028c

08000aa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aa8:	f001 fa6c 	bl	8001f84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aac:	f000 f872 	bl	8000b94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ab0:	f000 fa18 	bl	8000ee4 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000ab4:	f000 f928 	bl	8000d08 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000ab8:	f000 f95c 	bl	8000d74 <MX_CAN2_Init>
  MX_TIM2_Init();
 8000abc:	f000 f9c6 	bl	8000e4c <MX_TIM2_Init>
  MX_SPI1_Init();
 8000ac0:	f000 f98e 	bl	8000de0 <MX_SPI1_Init>
  MX_ADC1_Init();
 8000ac4:	f000 f8ce 	bl	8000c64 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  CAN1_filter_init();
 8000ac8:	f7ff ff4a 	bl	8000960 <CAN1_filter_init>
  CAN2_filter_init();
 8000acc:	f7ff ff72 	bl	80009b4 <CAN2_filter_init>

  Tx1_message_define();
 8000ad0:	f7ff ff9a 	bl	8000a08 <Tx1_message_define>
  Tx2_message_define();
 8000ad4:	f7ff ffb4 	bl	8000a40 <Tx2_message_define>

  //Tx2_data();
  Tx1_data();
 8000ad8:	f7ff ffce 	bl	8000a78 <Tx1_data>

  HAL_TIM_Base_Start_IT(&htim2);
 8000adc:	4821      	ldr	r0, [pc, #132]	; (8000b64 <main+0xc0>)
 8000ade:	f004 f9fd 	bl	8004edc <HAL_TIM_Base_Start_IT>

  HAL_CAN_Start(&hcan1);
 8000ae2:	4821      	ldr	r0, [pc, #132]	; (8000b68 <main+0xc4>)
 8000ae4:	f002 f88c 	bl	8002c00 <HAL_CAN_Start>
  HAL_CAN_Start(&hcan2);
 8000ae8:	4820      	ldr	r0, [pc, #128]	; (8000b6c <main+0xc8>)
 8000aea:	f002 f889 	bl	8002c00 <HAL_CAN_Start>
  HAL_CAN_ConfigFilter(&hcan1,&canfil1);
 8000aee:	4920      	ldr	r1, [pc, #128]	; (8000b70 <main+0xcc>)
 8000af0:	481d      	ldr	r0, [pc, #116]	; (8000b68 <main+0xc4>)
 8000af2:	f001 ffa5 	bl	8002a40 <HAL_CAN_ConfigFilter>
  HAL_CAN_ConfigFilter(&hcan2,&canfil2);
 8000af6:	491f      	ldr	r1, [pc, #124]	; (8000b74 <main+0xd0>)
 8000af8:	481c      	ldr	r0, [pc, #112]	; (8000b6c <main+0xc8>)
 8000afa:	f001 ffa1 	bl	8002a40 <HAL_CAN_ConfigFilter>

  HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING);
 8000afe:	2102      	movs	r1, #2
 8000b00:	4819      	ldr	r0, [pc, #100]	; (8000b68 <main+0xc4>)
 8000b02:	f002 faae 	bl	8003062 <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan2,CAN_IT_RX_FIFO1_MSG_PENDING);
 8000b06:	2110      	movs	r1, #16
 8000b08:	4818      	ldr	r0, [pc, #96]	; (8000b6c <main+0xc8>)
 8000b0a:	f002 faaa 	bl	8003062 <HAL_CAN_ActivateNotification>

  lcd_init();
 8000b0e:	f7ff fe1d 	bl	800074c <lcd_init>
  ST7789_Init();
 8000b12:	f000 fd53 	bl	80015bc <ST7789_Init>

//  ST7789_WriteString(0, 0, "..............................................", Font_7x10, RED, WHITE);
  	HAL_ADC_Start(&hadc1);
 8000b16:	4818      	ldr	r0, [pc, #96]	; (8000b78 <main+0xd4>)
 8000b18:	f001 fb0e 	bl	8002138 <HAL_ADC_Start>
  	HAL_ADC_PollForConversion(&hadc1, 100);
 8000b1c:	2164      	movs	r1, #100	; 0x64
 8000b1e:	4816      	ldr	r0, [pc, #88]	; (8000b78 <main+0xd4>)
 8000b20:	f001 fbdc 	bl	80022dc <HAL_ADC_PollForConversion>
  	ADC_value = HAL_ADC_GetValue(&hadc1);
 8000b24:	4814      	ldr	r0, [pc, #80]	; (8000b78 <main+0xd4>)
 8000b26:	f001 fc64 	bl	80023f2 <HAL_ADC_GetValue>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	4a13      	ldr	r2, [pc, #76]	; (8000b7c <main+0xd8>)
 8000b2e:	6013      	str	r3, [r2, #0]
  	setTimer1(10);
 8000b30:	200a      	movs	r0, #10
 8000b32:	f001 f92d 	bl	8001d90 <setTimer1>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(timer1_flag){
 8000b36:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <main+0xdc>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d0fb      	beq.n	8000b36 <main+0x92>
		  if(HAL_CAN_AddTxMessage(&hcan2,&tx2Header,Tx2Data,&canMailbox) == HAL_OK){
 8000b3e:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <main+0xe0>)
 8000b40:	4a11      	ldr	r2, [pc, #68]	; (8000b88 <main+0xe4>)
 8000b42:	4912      	ldr	r1, [pc, #72]	; (8000b8c <main+0xe8>)
 8000b44:	4809      	ldr	r0, [pc, #36]	; (8000b6c <main+0xc8>)
 8000b46:	f002 f89f 	bl	8002c88 <HAL_CAN_AddTxMessage>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d104      	bne.n	8000b5a <main+0xb6>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8000b50:	2201      	movs	r2, #1
 8000b52:	2102      	movs	r1, #2
 8000b54:	480e      	ldr	r0, [pc, #56]	; (8000b90 <main+0xec>)
 8000b56:	f002 ff7d 	bl	8003a54 <HAL_GPIO_WritePin>
		  }
		  setTimer1(100);
 8000b5a:	2064      	movs	r0, #100	; 0x64
 8000b5c:	f001 f918 	bl	8001d90 <setTimer1>
	  if(timer1_flag){
 8000b60:	e7e9      	b.n	8000b36 <main+0x92>
 8000b62:	bf00      	nop
 8000b64:	20000188 	.word	0x20000188
 8000b68:	200000e0 	.word	0x200000e0
 8000b6c:	20000108 	.word	0x20000108
 8000b70:	20000238 	.word	0x20000238
 8000b74:	20000260 	.word	0x20000260
 8000b78:	20000098 	.word	0x20000098
 8000b7c:	200002ac 	.word	0x200002ac
 8000b80:	200003d4 	.word	0x200003d4
 8000b84:	20000288 	.word	0x20000288
 8000b88:	20000294 	.word	0x20000294
 8000b8c:	20000220 	.word	0x20000220
 8000b90:	40020400 	.word	0x40020400

08000b94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b094      	sub	sp, #80	; 0x50
 8000b98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b9a:	f107 0320 	add.w	r3, r7, #32
 8000b9e:	2230      	movs	r2, #48	; 0x30
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f004 fdf6 	bl	8005794 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba8:	f107 030c 	add.w	r3, r7, #12
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	4b27      	ldr	r3, [pc, #156]	; (8000c5c <SystemClock_Config+0xc8>)
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc0:	4a26      	ldr	r2, [pc, #152]	; (8000c5c <SystemClock_Config+0xc8>)
 8000bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc8:	4b24      	ldr	r3, [pc, #144]	; (8000c5c <SystemClock_Config+0xc8>)
 8000bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	4b21      	ldr	r3, [pc, #132]	; (8000c60 <SystemClock_Config+0xcc>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a20      	ldr	r2, [pc, #128]	; (8000c60 <SystemClock_Config+0xcc>)
 8000bde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be2:	6013      	str	r3, [r2, #0]
 8000be4:	4b1e      	ldr	r3, [pc, #120]	; (8000c60 <SystemClock_Config+0xcc>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bf8:	2310      	movs	r3, #16
 8000bfa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c00:	2300      	movs	r3, #0
 8000c02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c04:	2308      	movs	r3, #8
 8000c06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000c08:	2350      	movs	r3, #80	; 0x50
 8000c0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c10:	2304      	movs	r3, #4
 8000c12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c14:	f107 0320 	add.w	r3, r7, #32
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f002 ff35 	bl	8003a88 <HAL_RCC_OscConfig>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c24:	f000 fbbc 	bl	80013a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c28:	230f      	movs	r3, #15
 8000c2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000c30:	2380      	movs	r3, #128	; 0x80
 8000c32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c3c:	f107 030c 	add.w	r3, r7, #12
 8000c40:	2101      	movs	r1, #1
 8000c42:	4618      	mov	r0, r3
 8000c44:	f003 f998 	bl	8003f78 <HAL_RCC_ClockConfig>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000c4e:	f000 fba7 	bl	80013a0 <Error_Handler>
  }
}
 8000c52:	bf00      	nop
 8000c54:	3750      	adds	r7, #80	; 0x50
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40007000 	.word	0x40007000

08000c64 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c6a:	463b      	mov	r3, r7
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c76:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000c78:	4a21      	ldr	r2, [pc, #132]	; (8000d00 <MX_ADC1_Init+0x9c>)
 8000c7a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c7c:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c82:	4b1e      	ldr	r3, [pc, #120]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000c88:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c8e:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c94:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c9c:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ca2:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000ca4:	4a17      	ldr	r2, [pc, #92]	; (8000d04 <MX_ADC1_Init+0xa0>)
 8000ca6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ca8:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000cae:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cc2:	480e      	ldr	r0, [pc, #56]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000cc4:	f001 f9f4 	bl	80020b0 <HAL_ADC_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000cce:	f000 fb67 	bl	80013a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cde:	463b      	mov	r3, r7
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4806      	ldr	r0, [pc, #24]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000ce4:	f001 fb92 	bl	800240c <HAL_ADC_ConfigChannel>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000cee:	f000 fb57 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cf2:	bf00      	nop
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000098 	.word	0x20000098
 8000d00:	40012000 	.word	0x40012000
 8000d04:	0f000001 	.word	0x0f000001

08000d08 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000d0c:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <MX_CAN1_Init+0x64>)
 8000d0e:	4a18      	ldr	r2, [pc, #96]	; (8000d70 <MX_CAN1_Init+0x68>)
 8000d10:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 20;
 8000d12:	4b16      	ldr	r3, [pc, #88]	; (8000d6c <MX_CAN1_Init+0x64>)
 8000d14:	2214      	movs	r2, #20
 8000d16:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000d18:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <MX_CAN1_Init+0x64>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d1e:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <MX_CAN1_Init+0x64>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000d24:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <MX_CAN1_Init+0x64>)
 8000d26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d2a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <MX_CAN1_Init+0x64>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <MX_CAN1_Init+0x64>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <MX_CAN1_Init+0x64>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <MX_CAN1_Init+0x64>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000d44:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <MX_CAN1_Init+0x64>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000d4a:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <MX_CAN1_Init+0x64>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <MX_CAN1_Init+0x64>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000d56:	4805      	ldr	r0, [pc, #20]	; (8000d6c <MX_CAN1_Init+0x64>)
 8000d58:	f001 fd76 	bl	8002848 <HAL_CAN_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000d62:	f000 fb1d 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200000e0 	.word	0x200000e0
 8000d70:	40006400 	.word	0x40006400

08000d74 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000d78:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <MX_CAN2_Init+0x64>)
 8000d7a:	4a18      	ldr	r2, [pc, #96]	; (8000ddc <MX_CAN2_Init+0x68>)
 8000d7c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 20;
 8000d7e:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <MX_CAN2_Init+0x64>)
 8000d80:	2214      	movs	r2, #20
 8000d82:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000d84:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <MX_CAN2_Init+0x64>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d8a:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <MX_CAN2_Init+0x64>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <MX_CAN2_Init+0x64>)
 8000d92:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d96:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000d98:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <MX_CAN2_Init+0x64>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <MX_CAN2_Init+0x64>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <MX_CAN2_Init+0x64>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <MX_CAN2_Init+0x64>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000db0:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <MX_CAN2_Init+0x64>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <MX_CAN2_Init+0x64>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <MX_CAN2_Init+0x64>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000dc2:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <MX_CAN2_Init+0x64>)
 8000dc4:	f001 fd40 	bl	8002848 <HAL_CAN_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8000dce:	f000 fae7 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000108 	.word	0x20000108
 8000ddc:	40006800 	.word	0x40006800

08000de0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000de4:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <MX_SPI1_Init+0x64>)
 8000de6:	4a18      	ldr	r2, [pc, #96]	; (8000e48 <MX_SPI1_Init+0x68>)
 8000de8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dea:	4b16      	ldr	r3, [pc, #88]	; (8000e44 <MX_SPI1_Init+0x64>)
 8000dec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000df0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000df2:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <MX_SPI1_Init+0x64>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <MX_SPI1_Init+0x64>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <MX_SPI1_Init+0x64>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e04:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <MX_SPI1_Init+0x64>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <MX_SPI1_Init+0x64>)
 8000e0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e10:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000e12:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <MX_SPI1_Init+0x64>)
 8000e14:	2218      	movs	r2, #24
 8000e16:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e18:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <MX_SPI1_Init+0x64>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e1e:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <MX_SPI1_Init+0x64>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e24:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <MX_SPI1_Init+0x64>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <MX_SPI1_Init+0x64>)
 8000e2c:	220a      	movs	r2, #10
 8000e2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e30:	4804      	ldr	r0, [pc, #16]	; (8000e44 <MX_SPI1_Init+0x64>)
 8000e32:	f003 fa4d 	bl	80042d0 <HAL_SPI_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e3c:	f000 fab0 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000130 	.word	0x20000130
 8000e48:	40013000 	.word	0x40013000

08000e4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e52:	f107 0308 	add.w	r3, r7, #8
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e60:	463b      	mov	r3, r7
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e68:	4b1d      	ldr	r3, [pc, #116]	; (8000ee0 <MX_TIM2_Init+0x94>)
 8000e6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 57142;
 8000e70:	4b1b      	ldr	r3, [pc, #108]	; (8000ee0 <MX_TIM2_Init+0x94>)
 8000e72:	f64d 7236 	movw	r2, #57142	; 0xdf36
 8000e76:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e78:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <MX_TIM2_Init+0x94>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7;
 8000e7e:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <MX_TIM2_Init+0x94>)
 8000e80:	2207      	movs	r2, #7
 8000e82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e84:	4b16      	ldr	r3, [pc, #88]	; (8000ee0 <MX_TIM2_Init+0x94>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8a:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <MX_TIM2_Init+0x94>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e90:	4813      	ldr	r0, [pc, #76]	; (8000ee0 <MX_TIM2_Init+0x94>)
 8000e92:	f003 ffd3 	bl	8004e3c <HAL_TIM_Base_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e9c:	f000 fa80 	bl	80013a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ea0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ea6:	f107 0308 	add.w	r3, r7, #8
 8000eaa:	4619      	mov	r1, r3
 8000eac:	480c      	ldr	r0, [pc, #48]	; (8000ee0 <MX_TIM2_Init+0x94>)
 8000eae:	f004 f98d 	bl	80051cc <HAL_TIM_ConfigClockSource>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000eb8:	f000 fa72 	bl	80013a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <MX_TIM2_Init+0x94>)
 8000eca:	f004 fba9 	bl	8005620 <HAL_TIMEx_MasterConfigSynchronization>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ed4:	f000 fa64 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ed8:	bf00      	nop
 8000eda:	3718      	adds	r7, #24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000188 	.word	0x20000188

08000ee4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eea:	f107 030c 	add.w	r3, r7, #12
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
 8000ef8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	4b20      	ldr	r3, [pc, #128]	; (8000f80 <MX_GPIO_Init+0x9c>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a1f      	ldr	r2, [pc, #124]	; (8000f80 <MX_GPIO_Init+0x9c>)
 8000f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b1d      	ldr	r3, [pc, #116]	; (8000f80 <MX_GPIO_Init+0x9c>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	4b19      	ldr	r3, [pc, #100]	; (8000f80 <MX_GPIO_Init+0x9c>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a18      	ldr	r2, [pc, #96]	; (8000f80 <MX_GPIO_Init+0x9c>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <MX_GPIO_Init+0x9c>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	603b      	str	r3, [r7, #0]
 8000f36:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <MX_GPIO_Init+0x9c>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a11      	ldr	r2, [pc, #68]	; (8000f80 <MX_GPIO_Init+0x9c>)
 8000f3c:	f043 0302 	orr.w	r3, r3, #2
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <MX_GPIO_Init+0x9c>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	603b      	str	r3, [r7, #0]
 8000f4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|LCD_RESET_Pin|LCD_CS_Pin
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f240 1187 	movw	r1, #391	; 0x187
 8000f54:	480b      	ldr	r0, [pc, #44]	; (8000f84 <MX_GPIO_Init+0xa0>)
 8000f56:	f002 fd7d 	bl	8003a54 <HAL_GPIO_WritePin>
                          |LCD_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB0 PB1 LCD_RESET_Pin LCD_CS_Pin
                           LCD_DC_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LCD_RESET_Pin|LCD_CS_Pin
 8000f5a:	f240 1387 	movw	r3, #391	; 0x187
 8000f5e:	60fb      	str	r3, [r7, #12]
                          |LCD_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f60:	2301      	movs	r3, #1
 8000f62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6c:	f107 030c 	add.w	r3, r7, #12
 8000f70:	4619      	mov	r1, r3
 8000f72:	4804      	ldr	r0, [pc, #16]	; (8000f84 <MX_GPIO_Init+0xa0>)
 8000f74:	f002 fbd2 	bl	800371c <HAL_GPIO_Init>

}
 8000f78:	bf00      	nop
 8000f7a:	3720      	adds	r7, #32
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40020400 	.word	0x40020400

08000f88 <HAL_TIM_PeriodElapsedCallback>:
uint8_t Buffer10[20];
uint8_t Buffer11[20];
uint8_t Buffer12[20];
uint8_t Buffer13[20];

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	timerRun();
 8000f90:	f000 ff12 	bl	8001db8 <timerRun>
	//getKeyInput();
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af04      	add	r7, sp, #16
 8000fa2:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rx1Header, Rx1Data) == HAL_OK){
 8000fa4:	4b73      	ldr	r3, [pc, #460]	; (8001174 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 8000fa6:	4a74      	ldr	r2, [pc, #464]	; (8001178 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4874      	ldr	r0, [pc, #464]	; (800117c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>)
 8000fac:	f001 ff47 	bl	8002e3e <HAL_CAN_GetRxMessage>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f040 80d9 	bne.w	800116a <HAL_CAN_RxFifo0MsgPendingCallback+0x1ce>
		if(rx1Header.DLC == 8){
 8000fb8:	4b6f      	ldr	r3, [pc, #444]	; (8001178 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 8000fba:	691b      	ldr	r3, [r3, #16]
 8000fbc:	2b08      	cmp	r3, #8
 8000fbe:	f040 80d4 	bne.w	800116a <HAL_CAN_RxFifo0MsgPendingCallback+0x1ce>
			sprintf(&Buffer[0], "IDCAN2:0x%03x", rx1Header.StdId);
 8000fc2:	4b6d      	ldr	r3, [pc, #436]	; (8001178 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	496d      	ldr	r1, [pc, #436]	; (8001180 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000fca:	486e      	ldr	r0, [pc, #440]	; (8001184 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8000fcc:	f004 fbea 	bl	80057a4 <siprintf>
			sprintf(&Buffer1[0], "Data0:0x%02x", Rx1Data[0]);
 8000fd0:	4b68      	ldr	r3, [pc, #416]	; (8001174 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	496c      	ldr	r1, [pc, #432]	; (8001188 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8000fd8:	486c      	ldr	r0, [pc, #432]	; (800118c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000fda:	f004 fbe3 	bl	80057a4 <siprintf>
			sprintf(&Buffer2[0], "Data1:0x%02x", Rx1Data[1]);
 8000fde:	4b65      	ldr	r3, [pc, #404]	; (8001174 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 8000fe0:	785b      	ldrb	r3, [r3, #1]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	496a      	ldr	r1, [pc, #424]	; (8001190 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 8000fe6:	486b      	ldr	r0, [pc, #428]	; (8001194 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000fe8:	f004 fbdc 	bl	80057a4 <siprintf>
			sprintf(&Buffer8[0], "Data2:0x%02x", Rx1Data[2]);
 8000fec:	4b61      	ldr	r3, [pc, #388]	; (8001174 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 8000fee:	789b      	ldrb	r3, [r3, #2]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4969      	ldr	r1, [pc, #420]	; (8001198 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8000ff4:	4869      	ldr	r0, [pc, #420]	; (800119c <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8000ff6:	f004 fbd5 	bl	80057a4 <siprintf>
			sprintf(&Buffer9[0], "Data3:0x%02x", Rx1Data[3]);
 8000ffa:	4b5e      	ldr	r3, [pc, #376]	; (8001174 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 8000ffc:	78db      	ldrb	r3, [r3, #3]
 8000ffe:	461a      	mov	r2, r3
 8001000:	4967      	ldr	r1, [pc, #412]	; (80011a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8001002:	4868      	ldr	r0, [pc, #416]	; (80011a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8001004:	f004 fbce 	bl	80057a4 <siprintf>
			sprintf(&Buffer10[0], "Data4:0x%02x", Rx1Data[4]);
 8001008:	4b5a      	ldr	r3, [pc, #360]	; (8001174 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 800100a:	791b      	ldrb	r3, [r3, #4]
 800100c:	461a      	mov	r2, r3
 800100e:	4966      	ldr	r1, [pc, #408]	; (80011a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8001010:	4866      	ldr	r0, [pc, #408]	; (80011ac <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8001012:	f004 fbc7 	bl	80057a4 <siprintf>
			sprintf(&Buffer11[0], "Data5:0x%02x", Rx1Data[5]);
 8001016:	4b57      	ldr	r3, [pc, #348]	; (8001174 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 8001018:	795b      	ldrb	r3, [r3, #5]
 800101a:	461a      	mov	r2, r3
 800101c:	4964      	ldr	r1, [pc, #400]	; (80011b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 800101e:	4865      	ldr	r0, [pc, #404]	; (80011b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 8001020:	f004 fbc0 	bl	80057a4 <siprintf>
			sprintf(&Buffer12[0], "Data6:0x%02x", Rx1Data[6]);
 8001024:	4b53      	ldr	r3, [pc, #332]	; (8001174 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 8001026:	799b      	ldrb	r3, [r3, #6]
 8001028:	461a      	mov	r2, r3
 800102a:	4963      	ldr	r1, [pc, #396]	; (80011b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 800102c:	4863      	ldr	r0, [pc, #396]	; (80011bc <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 800102e:	f004 fbb9 	bl	80057a4 <siprintf>
			sprintf(&Buffer13[0], "Data7:0x%02x", Rx1Data[7]);
 8001032:	4b50      	ldr	r3, [pc, #320]	; (8001174 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 8001034:	79db      	ldrb	r3, [r3, #7]
 8001036:	461a      	mov	r2, r3
 8001038:	4961      	ldr	r1, [pc, #388]	; (80011c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 800103a:	4862      	ldr	r0, [pc, #392]	; (80011c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 800103c:	f004 fbb2 	bl	80057a4 <siprintf>

			ST7789_WriteString(0, 0,&Buffer[0], Font_7x10, RED, WHITE);
 8001040:	4b61      	ldr	r3, [pc, #388]	; (80011c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8001042:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001046:	9202      	str	r2, [sp, #8]
 8001048:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800104c:	9201      	str	r2, [sp, #4]
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	9200      	str	r2, [sp, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a4b      	ldr	r2, [pc, #300]	; (8001184 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8001056:	2100      	movs	r1, #0
 8001058:	2000      	movs	r0, #0
 800105a:	f000 fc0b 	bl	8001874 <ST7789_WriteString>
			ST7789_WriteString(0, 11, &Buffer1[0], Font_7x10, RED, WHITE);
 800105e:	4b5a      	ldr	r3, [pc, #360]	; (80011c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8001060:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001064:	9202      	str	r2, [sp, #8]
 8001066:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800106a:	9201      	str	r2, [sp, #4]
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	9200      	str	r2, [sp, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a46      	ldr	r2, [pc, #280]	; (800118c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8001074:	210b      	movs	r1, #11
 8001076:	2000      	movs	r0, #0
 8001078:	f000 fbfc 	bl	8001874 <ST7789_WriteString>
			ST7789_WriteString(0, 22, &Buffer2[0], Font_7x10, RED, WHITE);
 800107c:	4b52      	ldr	r3, [pc, #328]	; (80011c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 800107e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001082:	9202      	str	r2, [sp, #8]
 8001084:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001088:	9201      	str	r2, [sp, #4]
 800108a:	685a      	ldr	r2, [r3, #4]
 800108c:	9200      	str	r2, [sp, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a40      	ldr	r2, [pc, #256]	; (8001194 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8001092:	2116      	movs	r1, #22
 8001094:	2000      	movs	r0, #0
 8001096:	f000 fbed 	bl	8001874 <ST7789_WriteString>
			ST7789_WriteString(0, 33, &Buffer8[0], Font_7x10, RED, WHITE);
 800109a:	4b4b      	ldr	r3, [pc, #300]	; (80011c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 800109c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010a0:	9202      	str	r2, [sp, #8]
 80010a2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80010a6:	9201      	str	r2, [sp, #4]
 80010a8:	685a      	ldr	r2, [r3, #4]
 80010aa:	9200      	str	r2, [sp, #0]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a3b      	ldr	r2, [pc, #236]	; (800119c <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80010b0:	2121      	movs	r1, #33	; 0x21
 80010b2:	2000      	movs	r0, #0
 80010b4:	f000 fbde 	bl	8001874 <ST7789_WriteString>
			ST7789_WriteString(0, 44, &Buffer9[0], Font_7x10, RED, WHITE);
 80010b8:	4b43      	ldr	r3, [pc, #268]	; (80011c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 80010ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010be:	9202      	str	r2, [sp, #8]
 80010c0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80010c4:	9201      	str	r2, [sp, #4]
 80010c6:	685a      	ldr	r2, [r3, #4]
 80010c8:	9200      	str	r2, [sp, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a35      	ldr	r2, [pc, #212]	; (80011a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 80010ce:	212c      	movs	r1, #44	; 0x2c
 80010d0:	2000      	movs	r0, #0
 80010d2:	f000 fbcf 	bl	8001874 <ST7789_WriteString>
			ST7789_WriteString(0, 55, &Buffer10[0], Font_7x10, RED, WHITE);
 80010d6:	4b3c      	ldr	r3, [pc, #240]	; (80011c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 80010d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010dc:	9202      	str	r2, [sp, #8]
 80010de:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80010e2:	9201      	str	r2, [sp, #4]
 80010e4:	685a      	ldr	r2, [r3, #4]
 80010e6:	9200      	str	r2, [sp, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a30      	ldr	r2, [pc, #192]	; (80011ac <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 80010ec:	2137      	movs	r1, #55	; 0x37
 80010ee:	2000      	movs	r0, #0
 80010f0:	f000 fbc0 	bl	8001874 <ST7789_WriteString>
			ST7789_WriteString(0, 66, &Buffer11[0], Font_7x10, RED, WHITE);
 80010f4:	4b34      	ldr	r3, [pc, #208]	; (80011c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 80010f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010fa:	9202      	str	r2, [sp, #8]
 80010fc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001100:	9201      	str	r2, [sp, #4]
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	9200      	str	r2, [sp, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a2a      	ldr	r2, [pc, #168]	; (80011b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 800110a:	2142      	movs	r1, #66	; 0x42
 800110c:	2000      	movs	r0, #0
 800110e:	f000 fbb1 	bl	8001874 <ST7789_WriteString>
			ST7789_WriteString(0, 77, &Buffer12[0], Font_7x10, RED, WHITE);
 8001112:	4b2d      	ldr	r3, [pc, #180]	; (80011c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8001114:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001118:	9202      	str	r2, [sp, #8]
 800111a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800111e:	9201      	str	r2, [sp, #4]
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	9200      	str	r2, [sp, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a25      	ldr	r2, [pc, #148]	; (80011bc <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8001128:	214d      	movs	r1, #77	; 0x4d
 800112a:	2000      	movs	r0, #0
 800112c:	f000 fba2 	bl	8001874 <ST7789_WriteString>
			ST7789_WriteString(0, 88, &Buffer13[0], Font_7x10, RED, WHITE);
 8001130:	4b25      	ldr	r3, [pc, #148]	; (80011c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8001132:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001136:	9202      	str	r2, [sp, #8]
 8001138:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800113c:	9201      	str	r2, [sp, #4]
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	9200      	str	r2, [sp, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a1f      	ldr	r2, [pc, #124]	; (80011c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 8001146:	2158      	movs	r1, #88	; 0x58
 8001148:	2000      	movs	r0, #0
 800114a:	f000 fb93 	bl	8001874 <ST7789_WriteString>
			if(HAL_CAN_AddTxMessage(&hcan1,&tx1Header,Tx1Data,&canMailbox) == HAL_OK){
 800114e:	4b1f      	ldr	r3, [pc, #124]	; (80011cc <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001150:	4a1f      	ldr	r2, [pc, #124]	; (80011d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8001152:	4920      	ldr	r1, [pc, #128]	; (80011d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8001154:	4809      	ldr	r0, [pc, #36]	; (800117c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>)
 8001156:	f001 fd97 	bl	8002c88 <HAL_CAN_AddTxMessage>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d104      	bne.n	800116a <HAL_CAN_RxFifo0MsgPendingCallback+0x1ce>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8001160:	2201      	movs	r2, #1
 8001162:	2101      	movs	r1, #1
 8001164:	481c      	ldr	r0, [pc, #112]	; (80011d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 8001166:	f002 fc75 	bl	8003a54 <HAL_GPIO_WritePin>
			}
		}
	}

}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	2000029c 	.word	0x2000029c
 8001178:	200001d0 	.word	0x200001d0
 800117c:	200000e0 	.word	0x200000e0
 8001180:	08006098 	.word	0x08006098
 8001184:	200002b0 	.word	0x200002b0
 8001188:	080060a8 	.word	0x080060a8
 800118c:	200002c4 	.word	0x200002c4
 8001190:	080060b8 	.word	0x080060b8
 8001194:	200002d8 	.word	0x200002d8
 8001198:	080060c8 	.word	0x080060c8
 800119c:	20000350 	.word	0x20000350
 80011a0:	080060d8 	.word	0x080060d8
 80011a4:	20000364 	.word	0x20000364
 80011a8:	080060e8 	.word	0x080060e8
 80011ac:	20000378 	.word	0x20000378
 80011b0:	080060f8 	.word	0x080060f8
 80011b4:	2000038c 	.word	0x2000038c
 80011b8:	08006108 	.word	0x08006108
 80011bc:	200003a0 	.word	0x200003a0
 80011c0:	08006118 	.word	0x08006118
 80011c4:	200003b4 	.word	0x200003b4
 80011c8:	20000000 	.word	0x20000000
 80011cc:	20000288 	.word	0x20000288
 80011d0:	2000028c 	.word	0x2000028c
 80011d4:	200001ec 	.word	0x200001ec
 80011d8:	40020400 	.word	0x40020400

080011dc <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af04      	add	r7, sp, #16
 80011e2:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO1, &rx2Header, Rx2Data) == HAL_OK){
 80011e4:	4b5b      	ldr	r3, [pc, #364]	; (8001354 <HAL_CAN_RxFifo1MsgPendingCallback+0x178>)
 80011e6:	4a5c      	ldr	r2, [pc, #368]	; (8001358 <HAL_CAN_RxFifo1MsgPendingCallback+0x17c>)
 80011e8:	2101      	movs	r1, #1
 80011ea:	485c      	ldr	r0, [pc, #368]	; (800135c <HAL_CAN_RxFifo1MsgPendingCallback+0x180>)
 80011ec:	f001 fe27 	bl	8002e3e <HAL_CAN_GetRxMessage>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f040 80aa 	bne.w	800134c <HAL_CAN_RxFifo1MsgPendingCallback+0x170>
		if(rx2Header.DLC == 8){
 80011f8:	4b57      	ldr	r3, [pc, #348]	; (8001358 <HAL_CAN_RxFifo1MsgPendingCallback+0x17c>)
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	2b08      	cmp	r3, #8
 80011fe:	f040 80a5 	bne.w	800134c <HAL_CAN_RxFifo1MsgPendingCallback+0x170>
			sprintf(&Buffer3[0], "IDCAN1:0x%03x", rx2Header.StdId);
 8001202:	4b55      	ldr	r3, [pc, #340]	; (8001358 <HAL_CAN_RxFifo1MsgPendingCallback+0x17c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	461a      	mov	r2, r3
 8001208:	4955      	ldr	r1, [pc, #340]	; (8001360 <HAL_CAN_RxFifo1MsgPendingCallback+0x184>)
 800120a:	4856      	ldr	r0, [pc, #344]	; (8001364 <HAL_CAN_RxFifo1MsgPendingCallback+0x188>)
 800120c:	f004 faca 	bl	80057a4 <siprintf>
			sprintf(&Buffer4[0], "Data0:0x%02x", Rx2Data[0]);
 8001210:	4b50      	ldr	r3, [pc, #320]	; (8001354 <HAL_CAN_RxFifo1MsgPendingCallback+0x178>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	4954      	ldr	r1, [pc, #336]	; (8001368 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>)
 8001218:	4854      	ldr	r0, [pc, #336]	; (800136c <HAL_CAN_RxFifo1MsgPendingCallback+0x190>)
 800121a:	f004 fac3 	bl	80057a4 <siprintf>
			sprintf(&Buffer5[0], "Data1:0x%02x", Rx2Data[1]);
 800121e:	4b4d      	ldr	r3, [pc, #308]	; (8001354 <HAL_CAN_RxFifo1MsgPendingCallback+0x178>)
 8001220:	785b      	ldrb	r3, [r3, #1]
 8001222:	461a      	mov	r2, r3
 8001224:	4952      	ldr	r1, [pc, #328]	; (8001370 <HAL_CAN_RxFifo1MsgPendingCallback+0x194>)
 8001226:	4853      	ldr	r0, [pc, #332]	; (8001374 <HAL_CAN_RxFifo1MsgPendingCallback+0x198>)
 8001228:	f004 fabc 	bl	80057a4 <siprintf>
			sprintf(&Buffer6[0], "Data2:0x%02x", Rx2Data[2]);
 800122c:	4b49      	ldr	r3, [pc, #292]	; (8001354 <HAL_CAN_RxFifo1MsgPendingCallback+0x178>)
 800122e:	789b      	ldrb	r3, [r3, #2]
 8001230:	461a      	mov	r2, r3
 8001232:	4951      	ldr	r1, [pc, #324]	; (8001378 <HAL_CAN_RxFifo1MsgPendingCallback+0x19c>)
 8001234:	4851      	ldr	r0, [pc, #324]	; (800137c <HAL_CAN_RxFifo1MsgPendingCallback+0x1a0>)
 8001236:	f004 fab5 	bl	80057a4 <siprintf>
			sprintf(&Buffer7[0], "Data3:0x%02x", Rx2Data[3]);
 800123a:	4b46      	ldr	r3, [pc, #280]	; (8001354 <HAL_CAN_RxFifo1MsgPendingCallback+0x178>)
 800123c:	78db      	ldrb	r3, [r3, #3]
 800123e:	461a      	mov	r2, r3
 8001240:	494f      	ldr	r1, [pc, #316]	; (8001380 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a4>)
 8001242:	4850      	ldr	r0, [pc, #320]	; (8001384 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a8>)
 8001244:	f004 faae 	bl	80057a4 <siprintf>

			ST7789_WriteString(0, 99, &Buffer3[0], Font_7x10, RED, WHITE);
 8001248:	4b4f      	ldr	r3, [pc, #316]	; (8001388 <HAL_CAN_RxFifo1MsgPendingCallback+0x1ac>)
 800124a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800124e:	9202      	str	r2, [sp, #8]
 8001250:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001254:	9201      	str	r2, [sp, #4]
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	9200      	str	r2, [sp, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a41      	ldr	r2, [pc, #260]	; (8001364 <HAL_CAN_RxFifo1MsgPendingCallback+0x188>)
 800125e:	2163      	movs	r1, #99	; 0x63
 8001260:	2000      	movs	r0, #0
 8001262:	f000 fb07 	bl	8001874 <ST7789_WriteString>
			ST7789_WriteString(0, 110, &Buffer4[0], Font_7x10, RED, WHITE);
 8001266:	4b48      	ldr	r3, [pc, #288]	; (8001388 <HAL_CAN_RxFifo1MsgPendingCallback+0x1ac>)
 8001268:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800126c:	9202      	str	r2, [sp, #8]
 800126e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001272:	9201      	str	r2, [sp, #4]
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	9200      	str	r2, [sp, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a3c      	ldr	r2, [pc, #240]	; (800136c <HAL_CAN_RxFifo1MsgPendingCallback+0x190>)
 800127c:	216e      	movs	r1, #110	; 0x6e
 800127e:	2000      	movs	r0, #0
 8001280:	f000 faf8 	bl	8001874 <ST7789_WriteString>
			ST7789_WriteString(0, 121, &Buffer5[0], Font_7x10, RED, WHITE);
 8001284:	4b40      	ldr	r3, [pc, #256]	; (8001388 <HAL_CAN_RxFifo1MsgPendingCallback+0x1ac>)
 8001286:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800128a:	9202      	str	r2, [sp, #8]
 800128c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001290:	9201      	str	r2, [sp, #4]
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	9200      	str	r2, [sp, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a36      	ldr	r2, [pc, #216]	; (8001374 <HAL_CAN_RxFifo1MsgPendingCallback+0x198>)
 800129a:	2179      	movs	r1, #121	; 0x79
 800129c:	2000      	movs	r0, #0
 800129e:	f000 fae9 	bl	8001874 <ST7789_WriteString>
			ST7789_WriteString(0, 132, &Buffer6[0], Font_7x10, RED, WHITE);
 80012a2:	4b39      	ldr	r3, [pc, #228]	; (8001388 <HAL_CAN_RxFifo1MsgPendingCallback+0x1ac>)
 80012a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012a8:	9202      	str	r2, [sp, #8]
 80012aa:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80012ae:	9201      	str	r2, [sp, #4]
 80012b0:	685a      	ldr	r2, [r3, #4]
 80012b2:	9200      	str	r2, [sp, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a31      	ldr	r2, [pc, #196]	; (800137c <HAL_CAN_RxFifo1MsgPendingCallback+0x1a0>)
 80012b8:	2184      	movs	r1, #132	; 0x84
 80012ba:	2000      	movs	r0, #0
 80012bc:	f000 fada 	bl	8001874 <ST7789_WriteString>
			ST7789_WriteString(0, 143, &Buffer7[0], Font_7x10, RED, WHITE);
 80012c0:	4b31      	ldr	r3, [pc, #196]	; (8001388 <HAL_CAN_RxFifo1MsgPendingCallback+0x1ac>)
 80012c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012c6:	9202      	str	r2, [sp, #8]
 80012c8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80012cc:	9201      	str	r2, [sp, #4]
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	9200      	str	r2, [sp, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a2b      	ldr	r2, [pc, #172]	; (8001384 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a8>)
 80012d6:	218f      	movs	r1, #143	; 0x8f
 80012d8:	2000      	movs	r0, #0
 80012da:	f000 facb 	bl	8001874 <ST7789_WriteString>
#ifdef DATA1_ID
			Tx2Data[0] = Rx2Data[0] + 0x40;
 80012de:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <HAL_CAN_RxFifo1MsgPendingCallback+0x178>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	3340      	adds	r3, #64	; 0x40
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	4b29      	ldr	r3, [pc, #164]	; (800138c <HAL_CAN_RxFifo1MsgPendingCallback+0x1b0>)
 80012e8:	701a      	strb	r2, [r3, #0]
			Tx2Data[1] = Rx2Data[1];
 80012ea:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <HAL_CAN_RxFifo1MsgPendingCallback+0x178>)
 80012ec:	785a      	ldrb	r2, [r3, #1]
 80012ee:	4b27      	ldr	r3, [pc, #156]	; (800138c <HAL_CAN_RxFifo1MsgPendingCallback+0x1b0>)
 80012f0:	705a      	strb	r2, [r3, #1]
			Tx2Data[2] = Rx2Data[2];
 80012f2:	4b18      	ldr	r3, [pc, #96]	; (8001354 <HAL_CAN_RxFifo1MsgPendingCallback+0x178>)
 80012f4:	789a      	ldrb	r2, [r3, #2]
 80012f6:	4b25      	ldr	r3, [pc, #148]	; (800138c <HAL_CAN_RxFifo1MsgPendingCallback+0x1b0>)
 80012f8:	709a      	strb	r2, [r3, #2]
			Tx2Data[3] = Rx2Data[3];
 80012fa:	4b16      	ldr	r3, [pc, #88]	; (8001354 <HAL_CAN_RxFifo1MsgPendingCallback+0x178>)
 80012fc:	78da      	ldrb	r2, [r3, #3]
 80012fe:	4b23      	ldr	r3, [pc, #140]	; (800138c <HAL_CAN_RxFifo1MsgPendingCallback+0x1b0>)
 8001300:	70da      	strb	r2, [r3, #3]
			Tx2Data[4] = (ADC_value >> 24) & 0xFF;
 8001302:	4b23      	ldr	r3, [pc, #140]	; (8001390 <HAL_CAN_RxFifo1MsgPendingCallback+0x1b4>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	0e1b      	lsrs	r3, r3, #24
 8001308:	b2da      	uxtb	r2, r3
 800130a:	4b20      	ldr	r3, [pc, #128]	; (800138c <HAL_CAN_RxFifo1MsgPendingCallback+0x1b0>)
 800130c:	711a      	strb	r2, [r3, #4]
			Tx2Data[5] = (ADC_value >> 16) & 0xFF;
 800130e:	4b20      	ldr	r3, [pc, #128]	; (8001390 <HAL_CAN_RxFifo1MsgPendingCallback+0x1b4>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	0c1b      	lsrs	r3, r3, #16
 8001314:	b2da      	uxtb	r2, r3
 8001316:	4b1d      	ldr	r3, [pc, #116]	; (800138c <HAL_CAN_RxFifo1MsgPendingCallback+0x1b0>)
 8001318:	715a      	strb	r2, [r3, #5]
			Tx2Data[6] = (ADC_value >> 8) & 0xFF;
 800131a:	4b1d      	ldr	r3, [pc, #116]	; (8001390 <HAL_CAN_RxFifo1MsgPendingCallback+0x1b4>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	0a1b      	lsrs	r3, r3, #8
 8001320:	b2da      	uxtb	r2, r3
 8001322:	4b1a      	ldr	r3, [pc, #104]	; (800138c <HAL_CAN_RxFifo1MsgPendingCallback+0x1b0>)
 8001324:	719a      	strb	r2, [r3, #6]
			Tx2Data[7] = ADC_value & 0xFF;
 8001326:	4b1a      	ldr	r3, [pc, #104]	; (8001390 <HAL_CAN_RxFifo1MsgPendingCallback+0x1b4>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	b2da      	uxtb	r2, r3
 800132c:	4b17      	ldr	r3, [pc, #92]	; (800138c <HAL_CAN_RxFifo1MsgPendingCallback+0x1b0>)
 800132e:	71da      	strb	r2, [r3, #7]
#endif
			if(HAL_CAN_AddTxMessage(&hcan2,&tx2Header,Tx2Data,&canMailbox) == HAL_OK){
 8001330:	4b18      	ldr	r3, [pc, #96]	; (8001394 <HAL_CAN_RxFifo1MsgPendingCallback+0x1b8>)
 8001332:	4a16      	ldr	r2, [pc, #88]	; (800138c <HAL_CAN_RxFifo1MsgPendingCallback+0x1b0>)
 8001334:	4918      	ldr	r1, [pc, #96]	; (8001398 <HAL_CAN_RxFifo1MsgPendingCallback+0x1bc>)
 8001336:	4809      	ldr	r0, [pc, #36]	; (800135c <HAL_CAN_RxFifo1MsgPendingCallback+0x180>)
 8001338:	f001 fca6 	bl	8002c88 <HAL_CAN_AddTxMessage>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d104      	bne.n	800134c <HAL_CAN_RxFifo1MsgPendingCallback+0x170>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8001342:	2201      	movs	r2, #1
 8001344:	2101      	movs	r1, #1
 8001346:	4815      	ldr	r0, [pc, #84]	; (800139c <HAL_CAN_RxFifo1MsgPendingCallback+0x1c0>)
 8001348:	f002 fb84 	bl	8003a54 <HAL_GPIO_WritePin>
			}
		}
	}

}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	200002a4 	.word	0x200002a4
 8001358:	20000204 	.word	0x20000204
 800135c:	20000108 	.word	0x20000108
 8001360:	08006128 	.word	0x08006128
 8001364:	200002ec 	.word	0x200002ec
 8001368:	080060a8 	.word	0x080060a8
 800136c:	20000300 	.word	0x20000300
 8001370:	080060b8 	.word	0x080060b8
 8001374:	20000314 	.word	0x20000314
 8001378:	080060c8 	.word	0x080060c8
 800137c:	20000328 	.word	0x20000328
 8001380:	080060d8 	.word	0x080060d8
 8001384:	2000033c 	.word	0x2000033c
 8001388:	20000000 	.word	0x20000000
 800138c:	20000294 	.word	0x20000294
 8001390:	200002ac 	.word	0x200002ac
 8001394:	20000288 	.word	0x20000288
 8001398:	20000220 	.word	0x20000220
 800139c:	40020400 	.word	0x40020400

080013a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a4:	b672      	cpsid	i
}
 80013a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <Error_Handler+0x8>
	...

080013ac <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 80013b6:	2200      	movs	r2, #0
 80013b8:	2180      	movs	r1, #128	; 0x80
 80013ba:	480c      	ldr	r0, [pc, #48]	; (80013ec <ST7789_WriteCommand+0x40>)
 80013bc:	f002 fb4a 	bl	8003a54 <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 80013c0:	2200      	movs	r2, #0
 80013c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013c6:	4809      	ldr	r0, [pc, #36]	; (80013ec <ST7789_WriteCommand+0x40>)
 80013c8:	f002 fb44 	bl	8003a54 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80013cc:	1df9      	adds	r1, r7, #7
 80013ce:	f04f 33ff 	mov.w	r3, #4294967295
 80013d2:	2201      	movs	r2, #1
 80013d4:	4806      	ldr	r0, [pc, #24]	; (80013f0 <ST7789_WriteCommand+0x44>)
 80013d6:	f003 f804 	bl	80043e2 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 80013da:	2201      	movs	r2, #1
 80013dc:	2180      	movs	r1, #128	; 0x80
 80013de:	4803      	ldr	r0, [pc, #12]	; (80013ec <ST7789_WriteCommand+0x40>)
 80013e0:	f002 fb38 	bl	8003a54 <HAL_GPIO_WritePin>
}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40020400 	.word	0x40020400
 80013f0:	20000130 	.word	0x20000130

080013f4 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 80013fe:	2200      	movs	r2, #0
 8001400:	2180      	movs	r1, #128	; 0x80
 8001402:	4816      	ldr	r0, [pc, #88]	; (800145c <ST7789_WriteData+0x68>)
 8001404:	f002 fb26 	bl	8003a54 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8001408:	2201      	movs	r2, #1
 800140a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800140e:	4813      	ldr	r0, [pc, #76]	; (800145c <ST7789_WriteData+0x68>)
 8001410:	f002 fb20 	bl	8003a54 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 8001414:	e015      	b.n	8001442 <ST7789_WriteData+0x4e>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800141c:	4293      	cmp	r3, r2
 800141e:	bf28      	it	cs
 8001420:	4613      	movcs	r3, r2
 8001422:	81fb      	strh	r3, [r7, #14]
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8001424:	89fa      	ldrh	r2, [r7, #14]
 8001426:	f04f 33ff 	mov.w	r3, #4294967295
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	480c      	ldr	r0, [pc, #48]	; (8001460 <ST7789_WriteData+0x6c>)
 800142e:	f002 ffd8 	bl	80043e2 <HAL_SPI_Transmit>
		#endif
		buff += chunk_size;
 8001432:	89fb      	ldrh	r3, [r7, #14]
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	4413      	add	r3, r2
 8001438:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 800143a:	89fb      	ldrh	r3, [r7, #14]
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1e6      	bne.n	8001416 <ST7789_WriteData+0x22>
	}

	ST7789_UnSelect();
 8001448:	2201      	movs	r2, #1
 800144a:	2180      	movs	r1, #128	; 0x80
 800144c:	4803      	ldr	r0, [pc, #12]	; (800145c <ST7789_WriteData+0x68>)
 800144e:	f002 fb01 	bl	8003a54 <HAL_GPIO_WritePin>
}
 8001452:	bf00      	nop
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40020400 	.word	0x40020400
 8001460:	20000130 	.word	0x20000130

08001464 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 800146e:	2200      	movs	r2, #0
 8001470:	2180      	movs	r1, #128	; 0x80
 8001472:	480c      	ldr	r0, [pc, #48]	; (80014a4 <ST7789_WriteSmallData+0x40>)
 8001474:	f002 faee 	bl	8003a54 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8001478:	2201      	movs	r2, #1
 800147a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800147e:	4809      	ldr	r0, [pc, #36]	; (80014a4 <ST7789_WriteSmallData+0x40>)
 8001480:	f002 fae8 	bl	8003a54 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8001484:	1df9      	adds	r1, r7, #7
 8001486:	f04f 33ff 	mov.w	r3, #4294967295
 800148a:	2201      	movs	r2, #1
 800148c:	4806      	ldr	r0, [pc, #24]	; (80014a8 <ST7789_WriteSmallData+0x44>)
 800148e:	f002 ffa8 	bl	80043e2 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8001492:	2201      	movs	r2, #1
 8001494:	2180      	movs	r1, #128	; 0x80
 8001496:	4803      	ldr	r0, [pc, #12]	; (80014a4 <ST7789_WriteSmallData+0x40>)
 8001498:	f002 fadc 	bl	8003a54 <HAL_GPIO_WritePin>
}
 800149c:	bf00      	nop
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40020400 	.word	0x40020400
 80014a8:	20000130 	.word	0x20000130

080014ac <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 80014b6:	2036      	movs	r0, #54	; 0x36
 80014b8:	f7ff ff78 	bl	80013ac <ST7789_WriteCommand>
	switch (m) {
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	2b03      	cmp	r3, #3
 80014c0:	d81a      	bhi.n	80014f8 <ST7789_SetRotation+0x4c>
 80014c2:	a201      	add	r2, pc, #4	; (adr r2, 80014c8 <ST7789_SetRotation+0x1c>)
 80014c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c8:	080014d9 	.word	0x080014d9
 80014cc:	080014e1 	.word	0x080014e1
 80014d0:	080014e9 	.word	0x080014e9
 80014d4:	080014f1 	.word	0x080014f1
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 80014d8:	20c0      	movs	r0, #192	; 0xc0
 80014da:	f7ff ffc3 	bl	8001464 <ST7789_WriteSmallData>
		break;
 80014de:	e00c      	b.n	80014fa <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 80014e0:	20a0      	movs	r0, #160	; 0xa0
 80014e2:	f7ff ffbf 	bl	8001464 <ST7789_WriteSmallData>
		break;
 80014e6:	e008      	b.n	80014fa <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 80014e8:	2000      	movs	r0, #0
 80014ea:	f7ff ffbb 	bl	8001464 <ST7789_WriteSmallData>
		break;
 80014ee:	e004      	b.n	80014fa <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 80014f0:	2060      	movs	r0, #96	; 0x60
 80014f2:	f7ff ffb7 	bl	8001464 <ST7789_WriteSmallData>
		break;
 80014f6:	e000      	b.n	80014fa <ST7789_SetRotation+0x4e>
	default:
		break;
 80014f8:	bf00      	nop
	}
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop

08001504 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8001504:	b590      	push	{r4, r7, lr}
 8001506:	b087      	sub	sp, #28
 8001508:	af00      	add	r7, sp, #0
 800150a:	4604      	mov	r4, r0
 800150c:	4608      	mov	r0, r1
 800150e:	4611      	mov	r1, r2
 8001510:	461a      	mov	r2, r3
 8001512:	4623      	mov	r3, r4
 8001514:	80fb      	strh	r3, [r7, #6]
 8001516:	4603      	mov	r3, r0
 8001518:	80bb      	strh	r3, [r7, #4]
 800151a:	460b      	mov	r3, r1
 800151c:	807b      	strh	r3, [r7, #2]
 800151e:	4613      	mov	r3, r2
 8001520:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8001522:	2200      	movs	r2, #0
 8001524:	2180      	movs	r1, #128	; 0x80
 8001526:	4824      	ldr	r0, [pc, #144]	; (80015b8 <ST7789_SetAddressWindow+0xb4>)
 8001528:	f002 fa94 	bl	8003a54 <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 800152c:	88fb      	ldrh	r3, [r7, #6]
 800152e:	82fb      	strh	r3, [r7, #22]
 8001530:	887b      	ldrh	r3, [r7, #2]
 8001532:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8001534:	88bb      	ldrh	r3, [r7, #4]
 8001536:	827b      	strh	r3, [r7, #18]
 8001538:	883b      	ldrh	r3, [r7, #0]
 800153a:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 800153c:	202a      	movs	r0, #42	; 0x2a
 800153e:	f7ff ff35 	bl	80013ac <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8001542:	8afb      	ldrh	r3, [r7, #22]
 8001544:	0a1b      	lsrs	r3, r3, #8
 8001546:	b29b      	uxth	r3, r3
 8001548:	b2db      	uxtb	r3, r3
 800154a:	733b      	strb	r3, [r7, #12]
 800154c:	8afb      	ldrh	r3, [r7, #22]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	737b      	strb	r3, [r7, #13]
 8001552:	8abb      	ldrh	r3, [r7, #20]
 8001554:	0a1b      	lsrs	r3, r3, #8
 8001556:	b29b      	uxth	r3, r3
 8001558:	b2db      	uxtb	r3, r3
 800155a:	73bb      	strb	r3, [r7, #14]
 800155c:	8abb      	ldrh	r3, [r7, #20]
 800155e:	b2db      	uxtb	r3, r3
 8001560:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8001562:	f107 030c 	add.w	r3, r7, #12
 8001566:	2104      	movs	r1, #4
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff ff43 	bl	80013f4 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 800156e:	202b      	movs	r0, #43	; 0x2b
 8001570:	f7ff ff1c 	bl	80013ac <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8001574:	8a7b      	ldrh	r3, [r7, #18]
 8001576:	0a1b      	lsrs	r3, r3, #8
 8001578:	b29b      	uxth	r3, r3
 800157a:	b2db      	uxtb	r3, r3
 800157c:	723b      	strb	r3, [r7, #8]
 800157e:	8a7b      	ldrh	r3, [r7, #18]
 8001580:	b2db      	uxtb	r3, r3
 8001582:	727b      	strb	r3, [r7, #9]
 8001584:	8a3b      	ldrh	r3, [r7, #16]
 8001586:	0a1b      	lsrs	r3, r3, #8
 8001588:	b29b      	uxth	r3, r3
 800158a:	b2db      	uxtb	r3, r3
 800158c:	72bb      	strb	r3, [r7, #10]
 800158e:	8a3b      	ldrh	r3, [r7, #16]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8001594:	f107 0308 	add.w	r3, r7, #8
 8001598:	2104      	movs	r1, #4
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff ff2a 	bl	80013f4 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 80015a0:	202c      	movs	r0, #44	; 0x2c
 80015a2:	f7ff ff03 	bl	80013ac <ST7789_WriteCommand>
	ST7789_UnSelect();
 80015a6:	2201      	movs	r2, #1
 80015a8:	2180      	movs	r1, #128	; 0x80
 80015aa:	4803      	ldr	r0, [pc, #12]	; (80015b8 <ST7789_SetAddressWindow+0xb4>)
 80015ac:	f002 fa52 	bl	8003a54 <HAL_GPIO_WritePin>
}
 80015b0:	bf00      	nop
 80015b2:	371c      	adds	r7, #28
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd90      	pop	{r4, r7, pc}
 80015b8:	40020400 	.word	0x40020400

080015bc <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 80015bc:	b590      	push	{r4, r7, lr}
 80015be:	b08b      	sub	sp, #44	; 0x2c
 80015c0:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
	#endif
	HAL_Delay(25);
 80015c2:	2019      	movs	r0, #25
 80015c4:	f000 fd50 	bl	8002068 <HAL_Delay>
    ST7789_RST_Clr();
 80015c8:	2200      	movs	r2, #0
 80015ca:	2104      	movs	r1, #4
 80015cc:	4846      	ldr	r0, [pc, #280]	; (80016e8 <ST7789_Init+0x12c>)
 80015ce:	f002 fa41 	bl	8003a54 <HAL_GPIO_WritePin>
    HAL_Delay(25);
 80015d2:	2019      	movs	r0, #25
 80015d4:	f000 fd48 	bl	8002068 <HAL_Delay>
    ST7789_RST_Set();
 80015d8:	2201      	movs	r2, #1
 80015da:	2104      	movs	r1, #4
 80015dc:	4842      	ldr	r0, [pc, #264]	; (80016e8 <ST7789_Init+0x12c>)
 80015de:	f002 fa39 	bl	8003a54 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 80015e2:	2032      	movs	r0, #50	; 0x32
 80015e4:	f000 fd40 	bl	8002068 <HAL_Delay>
		
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 80015e8:	203a      	movs	r0, #58	; 0x3a
 80015ea:	f7ff fedf 	bl	80013ac <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 80015ee:	2055      	movs	r0, #85	; 0x55
 80015f0:	f7ff ff38 	bl	8001464 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 80015f4:	20b2      	movs	r0, #178	; 0xb2
 80015f6:	f7ff fed9 	bl	80013ac <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 80015fa:	4a3c      	ldr	r2, [pc, #240]	; (80016ec <ST7789_Init+0x130>)
 80015fc:	f107 0320 	add.w	r3, r7, #32
 8001600:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001604:	6018      	str	r0, [r3, #0]
 8001606:	3304      	adds	r3, #4
 8001608:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 800160a:	f107 0320 	add.w	r3, r7, #32
 800160e:	2105      	movs	r1, #5
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff feef 	bl	80013f4 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8001616:	2001      	movs	r0, #1
 8001618:	f7ff ff48 	bl	80014ac <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 800161c:	20b7      	movs	r0, #183	; 0xb7
 800161e:	f7ff fec5 	bl	80013ac <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8001622:	2035      	movs	r0, #53	; 0x35
 8001624:	f7ff ff1e 	bl	8001464 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8001628:	20bb      	movs	r0, #187	; 0xbb
 800162a:	f7ff febf 	bl	80013ac <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 800162e:	2019      	movs	r0, #25
 8001630:	f7ff ff18 	bl	8001464 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8001634:	20c0      	movs	r0, #192	; 0xc0
 8001636:	f7ff feb9 	bl	80013ac <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 800163a:	202c      	movs	r0, #44	; 0x2c
 800163c:	f7ff ff12 	bl	8001464 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 8001640:	20c2      	movs	r0, #194	; 0xc2
 8001642:	f7ff feb3 	bl	80013ac <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 8001646:	2001      	movs	r0, #1
 8001648:	f7ff ff0c 	bl	8001464 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 800164c:	20c3      	movs	r0, #195	; 0xc3
 800164e:	f7ff fead 	bl	80013ac <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8001652:	2012      	movs	r0, #18
 8001654:	f7ff ff06 	bl	8001464 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8001658:	20c4      	movs	r0, #196	; 0xc4
 800165a:	f7ff fea7 	bl	80013ac <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 800165e:	2020      	movs	r0, #32
 8001660:	f7ff ff00 	bl	8001464 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 8001664:	20c6      	movs	r0, #198	; 0xc6
 8001666:	f7ff fea1 	bl	80013ac <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 800166a:	200f      	movs	r0, #15
 800166c:	f7ff fefa 	bl	8001464 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8001670:	20d0      	movs	r0, #208	; 0xd0
 8001672:	f7ff fe9b 	bl	80013ac <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 8001676:	20a4      	movs	r0, #164	; 0xa4
 8001678:	f7ff fef4 	bl	8001464 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 800167c:	20a1      	movs	r0, #161	; 0xa1
 800167e:	f7ff fef1 	bl	8001464 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8001682:	20e0      	movs	r0, #224	; 0xe0
 8001684:	f7ff fe92 	bl	80013ac <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8001688:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <ST7789_Init+0x134>)
 800168a:	f107 0410 	add.w	r4, r7, #16
 800168e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001690:	c407      	stmia	r4!, {r0, r1, r2}
 8001692:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8001694:	f107 0310 	add.w	r3, r7, #16
 8001698:	210e      	movs	r1, #14
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff feaa 	bl	80013f4 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 80016a0:	20e1      	movs	r0, #225	; 0xe1
 80016a2:	f7ff fe83 	bl	80013ac <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 80016a6:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <ST7789_Init+0x138>)
 80016a8:	463c      	mov	r4, r7
 80016aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016ac:	c407      	stmia	r4!, {r0, r1, r2}
 80016ae:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 80016b0:	463b      	mov	r3, r7
 80016b2:	210e      	movs	r1, #14
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff fe9d 	bl	80013f4 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 80016ba:	2021      	movs	r0, #33	; 0x21
 80016bc:	f7ff fe76 	bl	80013ac <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 80016c0:	2011      	movs	r0, #17
 80016c2:	f7ff fe73 	bl	80013ac <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 80016c6:	2013      	movs	r0, #19
 80016c8:	f7ff fe70 	bl	80013ac <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 80016cc:	2029      	movs	r0, #41	; 0x29
 80016ce:	f7ff fe6d 	bl	80013ac <ST7789_WriteCommand>

	HAL_Delay(50);
 80016d2:	2032      	movs	r0, #50	; 0x32
 80016d4:	f000 fcc8 	bl	8002068 <HAL_Delay>
	ST7789_Fill_Color(WHITE);				//	Fill with WHITE.
 80016d8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80016dc:	f000 f80c 	bl	80016f8 <ST7789_Fill_Color>
}
 80016e0:	bf00      	nop
 80016e2:	372c      	adds	r7, #44	; 0x2c
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd90      	pop	{r4, r7, pc}
 80016e8:	40020400 	.word	0x40020400
 80016ec:	08006138 	.word	0x08006138
 80016f0:	08006140 	.word	0x08006140
 80016f4:	08006150 	.word	0x08006150

080016f8 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8001702:	f240 133f 	movw	r3, #319	; 0x13f
 8001706:	22ef      	movs	r2, #239	; 0xef
 8001708:	2100      	movs	r1, #0
 800170a:	2000      	movs	r0, #0
 800170c:	f7ff fefa 	bl	8001504 <ST7789_SetAddressWindow>
	ST7789_Select();
 8001710:	2200      	movs	r2, #0
 8001712:	2180      	movs	r1, #128	; 0x80
 8001714:	4816      	ldr	r0, [pc, #88]	; (8001770 <ST7789_Fill_Color+0x78>)
 8001716:	f002 f99d 	bl	8003a54 <HAL_GPIO_WritePin>
			memset(disp_buf, color, sizeof(disp_buf));
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
		}
	#else
		uint16_t j;
		for (i = 0; i < ST7789_WIDTH; i++)
 800171a:	2300      	movs	r3, #0
 800171c:	81fb      	strh	r3, [r7, #14]
 800171e:	e01a      	b.n	8001756 <ST7789_Fill_Color+0x5e>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 8001720:	2300      	movs	r3, #0
 8001722:	81bb      	strh	r3, [r7, #12]
 8001724:	e010      	b.n	8001748 <ST7789_Fill_Color+0x50>
					uint8_t data[] = {color >> 8, color & 0xFF};
 8001726:	88fb      	ldrh	r3, [r7, #6]
 8001728:	0a1b      	lsrs	r3, r3, #8
 800172a:	b29b      	uxth	r3, r3
 800172c:	b2db      	uxtb	r3, r3
 800172e:	723b      	strb	r3, [r7, #8]
 8001730:	88fb      	ldrh	r3, [r7, #6]
 8001732:	b2db      	uxtb	r3, r3
 8001734:	727b      	strb	r3, [r7, #9]
					ST7789_WriteData(data, sizeof(data));
 8001736:	f107 0308 	add.w	r3, r7, #8
 800173a:	2102      	movs	r1, #2
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fe59 	bl	80013f4 <ST7789_WriteData>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 8001742:	89bb      	ldrh	r3, [r7, #12]
 8001744:	3301      	adds	r3, #1
 8001746:	81bb      	strh	r3, [r7, #12]
 8001748:	89bb      	ldrh	r3, [r7, #12]
 800174a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800174e:	d3ea      	bcc.n	8001726 <ST7789_Fill_Color+0x2e>
		for (i = 0; i < ST7789_WIDTH; i++)
 8001750:	89fb      	ldrh	r3, [r7, #14]
 8001752:	3301      	adds	r3, #1
 8001754:	81fb      	strh	r3, [r7, #14]
 8001756:	89fb      	ldrh	r3, [r7, #14]
 8001758:	2bef      	cmp	r3, #239	; 0xef
 800175a:	d9e1      	bls.n	8001720 <ST7789_Fill_Color+0x28>
				}
	#endif
	ST7789_UnSelect();
 800175c:	2201      	movs	r2, #1
 800175e:	2180      	movs	r1, #128	; 0x80
 8001760:	4803      	ldr	r0, [pc, #12]	; (8001770 <ST7789_Fill_Color+0x78>)
 8001762:	f002 f977 	bl	8003a54 <HAL_GPIO_WritePin>
}
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40020400 	.word	0x40020400

08001774 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001774:	b082      	sub	sp, #8
 8001776:	b590      	push	{r4, r7, lr}
 8001778:	b089      	sub	sp, #36	; 0x24
 800177a:	af00      	add	r7, sp, #0
 800177c:	637b      	str	r3, [r7, #52]	; 0x34
 800177e:	4603      	mov	r3, r0
 8001780:	80fb      	strh	r3, [r7, #6]
 8001782:	460b      	mov	r3, r1
 8001784:	80bb      	strh	r3, [r7, #4]
 8001786:	4613      	mov	r3, r2
 8001788:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 800178a:	2200      	movs	r2, #0
 800178c:	2180      	movs	r1, #128	; 0x80
 800178e:	4838      	ldr	r0, [pc, #224]	; (8001870 <ST7789_WriteChar+0xfc>)
 8001790:	f002 f960 	bl	8003a54 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8001794:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001798:	b29a      	uxth	r2, r3
 800179a:	88fb      	ldrh	r3, [r7, #6]
 800179c:	4413      	add	r3, r2
 800179e:	b29b      	uxth	r3, r3
 80017a0:	3b01      	subs	r3, #1
 80017a2:	b29c      	uxth	r4, r3
 80017a4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	88bb      	ldrh	r3, [r7, #4]
 80017ac:	4413      	add	r3, r2
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	3b01      	subs	r3, #1
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	88b9      	ldrh	r1, [r7, #4]
 80017b6:	88f8      	ldrh	r0, [r7, #6]
 80017b8:	4622      	mov	r2, r4
 80017ba:	f7ff fea3 	bl	8001504 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
 80017c2:	e043      	b.n	800184c <ST7789_WriteChar+0xd8>
		b = font.data[(ch - 32) * font.height + i];
 80017c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017c6:	78fb      	ldrb	r3, [r7, #3]
 80017c8:	3b20      	subs	r3, #32
 80017ca:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80017ce:	fb01 f303 	mul.w	r3, r1, r3
 80017d2:	4619      	mov	r1, r3
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	440b      	add	r3, r1
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	4413      	add	r3, r2
 80017dc:	881b      	ldrh	r3, [r3, #0]
 80017de:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 80017e0:	2300      	movs	r3, #0
 80017e2:	61bb      	str	r3, [r7, #24]
 80017e4:	e029      	b.n	800183a <ST7789_WriteChar+0xc6>
			if ((b << j) & 0x8000) {
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00e      	beq.n	8001814 <ST7789_WriteChar+0xa0>
				uint8_t data[] = {color >> 8, color & 0xFF};
 80017f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80017f8:	0a1b      	lsrs	r3, r3, #8
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	743b      	strb	r3, [r7, #16]
 8001800:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001802:	b2db      	uxtb	r3, r3
 8001804:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 8001806:	f107 0310 	add.w	r3, r7, #16
 800180a:	2102      	movs	r1, #2
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fdf1 	bl	80013f4 <ST7789_WriteData>
 8001812:	e00f      	b.n	8001834 <ST7789_WriteChar+0xc0>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 8001814:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001818:	0a1b      	lsrs	r3, r3, #8
 800181a:	b29b      	uxth	r3, r3
 800181c:	b2db      	uxtb	r3, r3
 800181e:	733b      	strb	r3, [r7, #12]
 8001820:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001824:	b2db      	uxtb	r3, r3
 8001826:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 8001828:	f107 030c 	add.w	r3, r7, #12
 800182c:	2102      	movs	r1, #2
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fde0 	bl	80013f4 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	3301      	adds	r3, #1
 8001838:	61bb      	str	r3, [r7, #24]
 800183a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800183e:	461a      	mov	r2, r3
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	4293      	cmp	r3, r2
 8001844:	d3cf      	bcc.n	80017e6 <ST7789_WriteChar+0x72>
	for (i = 0; i < font.height; i++) {
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3301      	adds	r3, #1
 800184a:	61fb      	str	r3, [r7, #28]
 800184c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001850:	461a      	mov	r2, r3
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	4293      	cmp	r3, r2
 8001856:	d3b5      	bcc.n	80017c4 <ST7789_WriteChar+0x50>
			}
		}
	}
	ST7789_UnSelect();
 8001858:	2201      	movs	r2, #1
 800185a:	2180      	movs	r1, #128	; 0x80
 800185c:	4804      	ldr	r0, [pc, #16]	; (8001870 <ST7789_WriteChar+0xfc>)
 800185e:	f002 f8f9 	bl	8003a54 <HAL_GPIO_WritePin>
}
 8001862:	bf00      	nop
 8001864:	3724      	adds	r7, #36	; 0x24
 8001866:	46bd      	mov	sp, r7
 8001868:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800186c:	b002      	add	sp, #8
 800186e:	4770      	bx	lr
 8001870:	40020400 	.word	0x40020400

08001874 <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001874:	b082      	sub	sp, #8
 8001876:	b580      	push	{r7, lr}
 8001878:	b086      	sub	sp, #24
 800187a:	af04      	add	r7, sp, #16
 800187c:	603a      	str	r2, [r7, #0]
 800187e:	617b      	str	r3, [r7, #20]
 8001880:	4603      	mov	r3, r0
 8001882:	80fb      	strh	r3, [r7, #6]
 8001884:	460b      	mov	r3, r1
 8001886:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 8001888:	2200      	movs	r2, #0
 800188a:	2180      	movs	r1, #128	; 0x80
 800188c:	4822      	ldr	r0, [pc, #136]	; (8001918 <ST7789_WriteString+0xa4>)
 800188e:	f002 f8e1 	bl	8003a54 <HAL_GPIO_WritePin>
	while (*str) {
 8001892:	e02e      	b.n	80018f2 <ST7789_WriteString+0x7e>
		if (x + font.width >= ST7789_WIDTH) {
 8001894:	88fb      	ldrh	r3, [r7, #6]
 8001896:	7d3a      	ldrb	r2, [r7, #20]
 8001898:	4413      	add	r3, r2
 800189a:	2bef      	cmp	r3, #239	; 0xef
 800189c:	dd14      	ble.n	80018c8 <ST7789_WriteString+0x54>
			x = 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 80018a2:	7d7b      	ldrb	r3, [r7, #21]
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	88bb      	ldrh	r3, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 80018ac:	88bb      	ldrh	r3, [r7, #4]
 80018ae:	7d7a      	ldrb	r2, [r7, #21]
 80018b0:	4413      	add	r3, r2
 80018b2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80018b6:	da21      	bge.n	80018fc <ST7789_WriteString+0x88>
				break;
			}

			if (*str == ' ') {
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b20      	cmp	r3, #32
 80018be:	d103      	bne.n	80018c8 <ST7789_WriteString+0x54>
				// skip spaces in the beginning of the new line
				str++;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	3301      	adds	r3, #1
 80018c4:	603b      	str	r3, [r7, #0]
				continue;
 80018c6:	e014      	b.n	80018f2 <ST7789_WriteString+0x7e>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	781a      	ldrb	r2, [r3, #0]
 80018cc:	88b9      	ldrh	r1, [r7, #4]
 80018ce:	88f8      	ldrh	r0, [r7, #6]
 80018d0:	8c3b      	ldrh	r3, [r7, #32]
 80018d2:	9302      	str	r3, [sp, #8]
 80018d4:	8bbb      	ldrh	r3, [r7, #28]
 80018d6:	9301      	str	r3, [sp, #4]
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	9300      	str	r3, [sp, #0]
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	f7ff ff49 	bl	8001774 <ST7789_WriteChar>
		x += font.width;
 80018e2:	7d3b      	ldrb	r3, [r7, #20]
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	88fb      	ldrh	r3, [r7, #6]
 80018e8:	4413      	add	r3, r2
 80018ea:	80fb      	strh	r3, [r7, #6]
		str++;
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	3301      	adds	r3, #1
 80018f0:	603b      	str	r3, [r7, #0]
	while (*str) {
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1cc      	bne.n	8001894 <ST7789_WriteString+0x20>
 80018fa:	e000      	b.n	80018fe <ST7789_WriteString+0x8a>
				break;
 80018fc:	bf00      	nop
	}
	ST7789_UnSelect();
 80018fe:	2201      	movs	r2, #1
 8001900:	2180      	movs	r1, #128	; 0x80
 8001902:	4805      	ldr	r0, [pc, #20]	; (8001918 <ST7789_WriteString+0xa4>)
 8001904:	f002 f8a6 	bl	8003a54 <HAL_GPIO_WritePin>
}
 8001908:	bf00      	nop
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001912:	b002      	add	sp, #8
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	40020400 	.word	0x40020400

0800191c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	607b      	str	r3, [r7, #4]
 8001926:	4b10      	ldr	r3, [pc, #64]	; (8001968 <HAL_MspInit+0x4c>)
 8001928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192a:	4a0f      	ldr	r2, [pc, #60]	; (8001968 <HAL_MspInit+0x4c>)
 800192c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001930:	6453      	str	r3, [r2, #68]	; 0x44
 8001932:	4b0d      	ldr	r3, [pc, #52]	; (8001968 <HAL_MspInit+0x4c>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	603b      	str	r3, [r7, #0]
 8001942:	4b09      	ldr	r3, [pc, #36]	; (8001968 <HAL_MspInit+0x4c>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	4a08      	ldr	r2, [pc, #32]	; (8001968 <HAL_MspInit+0x4c>)
 8001948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800194c:	6413      	str	r3, [r2, #64]	; 0x40
 800194e:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_MspInit+0x4c>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001956:	603b      	str	r3, [r7, #0]
 8001958:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	40023800 	.word	0x40023800

0800196c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08a      	sub	sp, #40	; 0x28
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a17      	ldr	r2, [pc, #92]	; (80019e8 <HAL_ADC_MspInit+0x7c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d127      	bne.n	80019de <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	4b16      	ldr	r3, [pc, #88]	; (80019ec <HAL_ADC_MspInit+0x80>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001996:	4a15      	ldr	r2, [pc, #84]	; (80019ec <HAL_ADC_MspInit+0x80>)
 8001998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800199c:	6453      	str	r3, [r2, #68]	; 0x44
 800199e:	4b13      	ldr	r3, [pc, #76]	; (80019ec <HAL_ADC_MspInit+0x80>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <HAL_ADC_MspInit+0x80>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	4a0e      	ldr	r2, [pc, #56]	; (80019ec <HAL_ADC_MspInit+0x80>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ba:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <HAL_ADC_MspInit+0x80>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019c6:	2308      	movs	r3, #8
 80019c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019ca:	2303      	movs	r3, #3
 80019cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d2:	f107 0314 	add.w	r3, r7, #20
 80019d6:	4619      	mov	r1, r3
 80019d8:	4805      	ldr	r0, [pc, #20]	; (80019f0 <HAL_ADC_MspInit+0x84>)
 80019da:	f001 fe9f 	bl	800371c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019de:	bf00      	nop
 80019e0:	3728      	adds	r7, #40	; 0x28
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40012000 	.word	0x40012000
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40020000 	.word	0x40020000

080019f4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08c      	sub	sp, #48	; 0x30
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 031c 	add.w	r3, r7, #28
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a4a      	ldr	r2, [pc, #296]	; (8001b3c <HAL_CAN_MspInit+0x148>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d13e      	bne.n	8001a94 <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001a16:	4b4a      	ldr	r3, [pc, #296]	; (8001b40 <HAL_CAN_MspInit+0x14c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	4a48      	ldr	r2, [pc, #288]	; (8001b40 <HAL_CAN_MspInit+0x14c>)
 8001a1e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001a20:	4b47      	ldr	r3, [pc, #284]	; (8001b40 <HAL_CAN_MspInit+0x14c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d10d      	bne.n	8001a44 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001a28:	2300      	movs	r3, #0
 8001a2a:	61bb      	str	r3, [r7, #24]
 8001a2c:	4b45      	ldr	r3, [pc, #276]	; (8001b44 <HAL_CAN_MspInit+0x150>)
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a30:	4a44      	ldr	r2, [pc, #272]	; (8001b44 <HAL_CAN_MspInit+0x150>)
 8001a32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a36:	6413      	str	r3, [r2, #64]	; 0x40
 8001a38:	4b42      	ldr	r3, [pc, #264]	; (8001b44 <HAL_CAN_MspInit+0x150>)
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a40:	61bb      	str	r3, [r7, #24]
 8001a42:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	4b3e      	ldr	r3, [pc, #248]	; (8001b44 <HAL_CAN_MspInit+0x150>)
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4c:	4a3d      	ldr	r2, [pc, #244]	; (8001b44 <HAL_CAN_MspInit+0x150>)
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	6313      	str	r3, [r2, #48]	; 0x30
 8001a54:	4b3b      	ldr	r3, [pc, #236]	; (8001b44 <HAL_CAN_MspInit+0x150>)
 8001a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001a60:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a66:	2302      	movs	r3, #2
 8001a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001a72:	2309      	movs	r3, #9
 8001a74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a76:	f107 031c 	add.w	r3, r7, #28
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4832      	ldr	r0, [pc, #200]	; (8001b48 <HAL_CAN_MspInit+0x154>)
 8001a7e:	f001 fe4d 	bl	800371c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001a82:	2200      	movs	r2, #0
 8001a84:	2100      	movs	r1, #0
 8001a86:	2014      	movs	r0, #20
 8001a88:	f001 fe11 	bl	80036ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001a8c:	2014      	movs	r0, #20
 8001a8e:	f001 fe2a 	bl	80036e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001a92:	e04f      	b.n	8001b34 <HAL_CAN_MspInit+0x140>
  else if(hcan->Instance==CAN2)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a2c      	ldr	r2, [pc, #176]	; (8001b4c <HAL_CAN_MspInit+0x158>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d14a      	bne.n	8001b34 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
 8001aa2:	4b28      	ldr	r3, [pc, #160]	; (8001b44 <HAL_CAN_MspInit+0x150>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	4a27      	ldr	r2, [pc, #156]	; (8001b44 <HAL_CAN_MspInit+0x150>)
 8001aa8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001aac:	6413      	str	r3, [r2, #64]	; 0x40
 8001aae:	4b25      	ldr	r3, [pc, #148]	; (8001b44 <HAL_CAN_MspInit+0x150>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ab6:	613b      	str	r3, [r7, #16]
 8001ab8:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001aba:	4b21      	ldr	r3, [pc, #132]	; (8001b40 <HAL_CAN_MspInit+0x14c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	4a1f      	ldr	r2, [pc, #124]	; (8001b40 <HAL_CAN_MspInit+0x14c>)
 8001ac2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001ac4:	4b1e      	ldr	r3, [pc, #120]	; (8001b40 <HAL_CAN_MspInit+0x14c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d10d      	bne.n	8001ae8 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001acc:	2300      	movs	r3, #0
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	4b1c      	ldr	r3, [pc, #112]	; (8001b44 <HAL_CAN_MspInit+0x150>)
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad4:	4a1b      	ldr	r2, [pc, #108]	; (8001b44 <HAL_CAN_MspInit+0x150>)
 8001ad6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ada:	6413      	str	r3, [r2, #64]	; 0x40
 8001adc:	4b19      	ldr	r3, [pc, #100]	; (8001b44 <HAL_CAN_MspInit+0x150>)
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <HAL_CAN_MspInit+0x150>)
 8001aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af0:	4a14      	ldr	r2, [pc, #80]	; (8001b44 <HAL_CAN_MspInit+0x150>)
 8001af2:	f043 0302 	orr.w	r3, r3, #2
 8001af6:	6313      	str	r3, [r2, #48]	; 0x30
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <HAL_CAN_MspInit+0x150>)
 8001afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001b04:	2360      	movs	r3, #96	; 0x60
 8001b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b10:	2303      	movs	r3, #3
 8001b12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001b14:	2309      	movs	r3, #9
 8001b16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b18:	f107 031c 	add.w	r3, r7, #28
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	480c      	ldr	r0, [pc, #48]	; (8001b50 <HAL_CAN_MspInit+0x15c>)
 8001b20:	f001 fdfc 	bl	800371c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8001b24:	2200      	movs	r2, #0
 8001b26:	2100      	movs	r1, #0
 8001b28:	2041      	movs	r0, #65	; 0x41
 8001b2a:	f001 fdc0 	bl	80036ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8001b2e:	2041      	movs	r0, #65	; 0x41
 8001b30:	f001 fdd9 	bl	80036e6 <HAL_NVIC_EnableIRQ>
}
 8001b34:	bf00      	nop
 8001b36:	3730      	adds	r7, #48	; 0x30
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40006400 	.word	0x40006400
 8001b40:	200003c8 	.word	0x200003c8
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40020000 	.word	0x40020000
 8001b4c:	40006800 	.word	0x40006800
 8001b50:	40020400 	.word	0x40020400

08001b54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08a      	sub	sp, #40	; 0x28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a28      	ldr	r2, [pc, #160]	; (8001c14 <HAL_SPI_MspInit+0xc0>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d149      	bne.n	8001c0a <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	4b27      	ldr	r3, [pc, #156]	; (8001c18 <HAL_SPI_MspInit+0xc4>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7e:	4a26      	ldr	r2, [pc, #152]	; (8001c18 <HAL_SPI_MspInit+0xc4>)
 8001b80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b84:	6453      	str	r3, [r2, #68]	; 0x44
 8001b86:	4b24      	ldr	r3, [pc, #144]	; (8001c18 <HAL_SPI_MspInit+0xc4>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	4b20      	ldr	r3, [pc, #128]	; (8001c18 <HAL_SPI_MspInit+0xc4>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	4a1f      	ldr	r2, [pc, #124]	; (8001c18 <HAL_SPI_MspInit+0xc4>)
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba2:	4b1d      	ldr	r3, [pc, #116]	; (8001c18 <HAL_SPI_MspInit+0xc4>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <HAL_SPI_MspInit+0xc4>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	4a18      	ldr	r2, [pc, #96]	; (8001c18 <HAL_SPI_MspInit+0xc4>)
 8001bb8:	f043 0302 	orr.w	r3, r3, #2
 8001bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bbe:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <HAL_SPI_MspInit+0xc4>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bca:	23c0      	movs	r3, #192	; 0xc0
 8001bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bda:	2305      	movs	r3, #5
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bde:	f107 0314 	add.w	r3, r7, #20
 8001be2:	4619      	mov	r1, r3
 8001be4:	480d      	ldr	r0, [pc, #52]	; (8001c1c <HAL_SPI_MspInit+0xc8>)
 8001be6:	f001 fd99 	bl	800371c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001bea:	2308      	movs	r3, #8
 8001bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bfa:	2305      	movs	r3, #5
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bfe:	f107 0314 	add.w	r3, r7, #20
 8001c02:	4619      	mov	r1, r3
 8001c04:	4806      	ldr	r0, [pc, #24]	; (8001c20 <HAL_SPI_MspInit+0xcc>)
 8001c06:	f001 fd89 	bl	800371c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c0a:	bf00      	nop
 8001c0c:	3728      	adds	r7, #40	; 0x28
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40013000 	.word	0x40013000
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	40020000 	.word	0x40020000
 8001c20:	40020400 	.word	0x40020400

08001c24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c34:	d115      	bne.n	8001c62 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <HAL_TIM_Base_MspInit+0x48>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	4a0b      	ldr	r2, [pc, #44]	; (8001c6c <HAL_TIM_Base_MspInit+0x48>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	6413      	str	r3, [r2, #64]	; 0x40
 8001c46:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <HAL_TIM_Base_MspInit+0x48>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c52:	2200      	movs	r2, #0
 8001c54:	2100      	movs	r1, #0
 8001c56:	201c      	movs	r0, #28
 8001c58:	f001 fd29 	bl	80036ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c5c:	201c      	movs	r0, #28
 8001c5e:	f001 fd42 	bl	80036e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c62:	bf00      	nop
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40023800 	.word	0x40023800

08001c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c74:	e7fe      	b.n	8001c74 <NMI_Handler+0x4>

08001c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c7a:	e7fe      	b.n	8001c7a <HardFault_Handler+0x4>

08001c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c80:	e7fe      	b.n	8001c80 <MemManage_Handler+0x4>

08001c82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c86:	e7fe      	b.n	8001c86 <BusFault_Handler+0x4>

08001c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c8c:	e7fe      	b.n	8001c8c <UsageFault_Handler+0x4>

08001c8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cbc:	f000 f9b4 	bl	8002028 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cc0:	bf00      	nop
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001cc8:	4802      	ldr	r0, [pc, #8]	; (8001cd4 <CAN1_RX0_IRQHandler+0x10>)
 8001cca:	f001 f9f0 	bl	80030ae <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	200000e0 	.word	0x200000e0

08001cd8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001cdc:	4802      	ldr	r0, [pc, #8]	; (8001ce8 <TIM2_IRQHandler+0x10>)
 8001cde:	f003 f96d 	bl	8004fbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000188 	.word	0x20000188

08001cec <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001cf0:	4802      	ldr	r0, [pc, #8]	; (8001cfc <CAN2_RX1_IRQHandler+0x10>)
 8001cf2:	f001 f9dc 	bl	80030ae <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000108 	.word	0x20000108

08001d00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d08:	4a14      	ldr	r2, [pc, #80]	; (8001d5c <_sbrk+0x5c>)
 8001d0a:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <_sbrk+0x60>)
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d14:	4b13      	ldr	r3, [pc, #76]	; (8001d64 <_sbrk+0x64>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d102      	bne.n	8001d22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d1c:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <_sbrk+0x64>)
 8001d1e:	4a12      	ldr	r2, [pc, #72]	; (8001d68 <_sbrk+0x68>)
 8001d20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d22:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <_sbrk+0x64>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4413      	add	r3, r2
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d207      	bcs.n	8001d40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d30:	f003 fd06 	bl	8005740 <__errno>
 8001d34:	4603      	mov	r3, r0
 8001d36:	220c      	movs	r2, #12
 8001d38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d3e:	e009      	b.n	8001d54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d40:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <_sbrk+0x64>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d46:	4b07      	ldr	r3, [pc, #28]	; (8001d64 <_sbrk+0x64>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	4a05      	ldr	r2, [pc, #20]	; (8001d64 <_sbrk+0x64>)
 8001d50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d52:	68fb      	ldr	r3, [r7, #12]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20020000 	.word	0x20020000
 8001d60:	00000400 	.word	0x00000400
 8001d64:	200003cc 	.word	0x200003cc
 8001d68:	20000430 	.word	0x20000430

08001d6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d70:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <SystemInit+0x20>)
 8001d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d76:	4a05      	ldr	r2, [pc, #20]	; (8001d8c <SystemInit+0x20>)
 8001d78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <setTimer1>:
int timer8_flag = 0;

int timer9_counter = 0;
int timer9_flag = 0;

void setTimer1(int duration){
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8001d98:	4a05      	ldr	r2, [pc, #20]	; (8001db0 <setTimer1+0x20>)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001d9e:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <setTimer1+0x24>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	200003d0 	.word	0x200003d0
 8001db4:	200003d4 	.word	0x200003d4

08001db8 <timerRun>:
void setTimer9(int duration){
	timer9_counter = duration;
	timer9_flag = 0;
}

void timerRun(){
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8001dbc:	4b4a      	ldr	r3, [pc, #296]	; (8001ee8 <timerRun+0x130>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	dd0b      	ble.n	8001ddc <timerRun+0x24>
		timer1_counter--;
 8001dc4:	4b48      	ldr	r3, [pc, #288]	; (8001ee8 <timerRun+0x130>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	4a47      	ldr	r2, [pc, #284]	; (8001ee8 <timerRun+0x130>)
 8001dcc:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0) timer1_flag = 1;
 8001dce:	4b46      	ldr	r3, [pc, #280]	; (8001ee8 <timerRun+0x130>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	dc02      	bgt.n	8001ddc <timerRun+0x24>
 8001dd6:	4b45      	ldr	r3, [pc, #276]	; (8001eec <timerRun+0x134>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	601a      	str	r2, [r3, #0]
	}

	if(timer2_counter > 0){
 8001ddc:	4b44      	ldr	r3, [pc, #272]	; (8001ef0 <timerRun+0x138>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	dd0b      	ble.n	8001dfc <timerRun+0x44>
		timer2_counter--;
 8001de4:	4b42      	ldr	r3, [pc, #264]	; (8001ef0 <timerRun+0x138>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	3b01      	subs	r3, #1
 8001dea:	4a41      	ldr	r2, [pc, #260]	; (8001ef0 <timerRun+0x138>)
 8001dec:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0) timer2_flag = 1;
 8001dee:	4b40      	ldr	r3, [pc, #256]	; (8001ef0 <timerRun+0x138>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	dc02      	bgt.n	8001dfc <timerRun+0x44>
 8001df6:	4b3f      	ldr	r3, [pc, #252]	; (8001ef4 <timerRun+0x13c>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]
	}

	if(timer3_counter > 0){
 8001dfc:	4b3e      	ldr	r3, [pc, #248]	; (8001ef8 <timerRun+0x140>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	dd0b      	ble.n	8001e1c <timerRun+0x64>
		timer3_counter--;
 8001e04:	4b3c      	ldr	r3, [pc, #240]	; (8001ef8 <timerRun+0x140>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	4a3b      	ldr	r2, [pc, #236]	; (8001ef8 <timerRun+0x140>)
 8001e0c:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0) timer3_flag = 1;
 8001e0e:	4b3a      	ldr	r3, [pc, #232]	; (8001ef8 <timerRun+0x140>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	dc02      	bgt.n	8001e1c <timerRun+0x64>
 8001e16:	4b39      	ldr	r3, [pc, #228]	; (8001efc <timerRun+0x144>)
 8001e18:	2201      	movs	r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]
	}

	if(timer4_counter > 0){
 8001e1c:	4b38      	ldr	r3, [pc, #224]	; (8001f00 <timerRun+0x148>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	dd0b      	ble.n	8001e3c <timerRun+0x84>
		timer4_counter--;
 8001e24:	4b36      	ldr	r3, [pc, #216]	; (8001f00 <timerRun+0x148>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	4a35      	ldr	r2, [pc, #212]	; (8001f00 <timerRun+0x148>)
 8001e2c:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0) timer4_flag = 1;
 8001e2e:	4b34      	ldr	r3, [pc, #208]	; (8001f00 <timerRun+0x148>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	dc02      	bgt.n	8001e3c <timerRun+0x84>
 8001e36:	4b33      	ldr	r3, [pc, #204]	; (8001f04 <timerRun+0x14c>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]
	}

	if(timer5_counter > 0){
 8001e3c:	4b32      	ldr	r3, [pc, #200]	; (8001f08 <timerRun+0x150>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	dd0b      	ble.n	8001e5c <timerRun+0xa4>
		timer5_counter--;
 8001e44:	4b30      	ldr	r3, [pc, #192]	; (8001f08 <timerRun+0x150>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	4a2f      	ldr	r2, [pc, #188]	; (8001f08 <timerRun+0x150>)
 8001e4c:	6013      	str	r3, [r2, #0]
		if(timer5_counter <= 0) timer5_flag = 1;
 8001e4e:	4b2e      	ldr	r3, [pc, #184]	; (8001f08 <timerRun+0x150>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	dc02      	bgt.n	8001e5c <timerRun+0xa4>
 8001e56:	4b2d      	ldr	r3, [pc, #180]	; (8001f0c <timerRun+0x154>)
 8001e58:	2201      	movs	r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]
	}

	if(timer6_counter > 0){
 8001e5c:	4b2c      	ldr	r3, [pc, #176]	; (8001f10 <timerRun+0x158>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	dd0b      	ble.n	8001e7c <timerRun+0xc4>
		timer6_counter--;
 8001e64:	4b2a      	ldr	r3, [pc, #168]	; (8001f10 <timerRun+0x158>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	4a29      	ldr	r2, [pc, #164]	; (8001f10 <timerRun+0x158>)
 8001e6c:	6013      	str	r3, [r2, #0]
		if(timer6_counter <= 0) timer6_flag = 1;
 8001e6e:	4b28      	ldr	r3, [pc, #160]	; (8001f10 <timerRun+0x158>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	dc02      	bgt.n	8001e7c <timerRun+0xc4>
 8001e76:	4b27      	ldr	r3, [pc, #156]	; (8001f14 <timerRun+0x15c>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]
	}

	if(timer7_counter > 0){
 8001e7c:	4b26      	ldr	r3, [pc, #152]	; (8001f18 <timerRun+0x160>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	dd0b      	ble.n	8001e9c <timerRun+0xe4>
		timer7_counter--;
 8001e84:	4b24      	ldr	r3, [pc, #144]	; (8001f18 <timerRun+0x160>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	4a23      	ldr	r2, [pc, #140]	; (8001f18 <timerRun+0x160>)
 8001e8c:	6013      	str	r3, [r2, #0]
		if(timer7_counter <= 0) timer7_flag = 1;
 8001e8e:	4b22      	ldr	r3, [pc, #136]	; (8001f18 <timerRun+0x160>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	dc02      	bgt.n	8001e9c <timerRun+0xe4>
 8001e96:	4b21      	ldr	r3, [pc, #132]	; (8001f1c <timerRun+0x164>)
 8001e98:	2201      	movs	r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]
	}

	if(timer8_counter > 0){
 8001e9c:	4b20      	ldr	r3, [pc, #128]	; (8001f20 <timerRun+0x168>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	dd0b      	ble.n	8001ebc <timerRun+0x104>
		timer8_counter--;
 8001ea4:	4b1e      	ldr	r3, [pc, #120]	; (8001f20 <timerRun+0x168>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	4a1d      	ldr	r2, [pc, #116]	; (8001f20 <timerRun+0x168>)
 8001eac:	6013      	str	r3, [r2, #0]
		if(timer8_counter <= 0) timer8_flag = 1;
 8001eae:	4b1c      	ldr	r3, [pc, #112]	; (8001f20 <timerRun+0x168>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	dc02      	bgt.n	8001ebc <timerRun+0x104>
 8001eb6:	4b1b      	ldr	r3, [pc, #108]	; (8001f24 <timerRun+0x16c>)
 8001eb8:	2201      	movs	r2, #1
 8001eba:	601a      	str	r2, [r3, #0]
	}

	if(timer9_counter > 0){
 8001ebc:	4b1a      	ldr	r3, [pc, #104]	; (8001f28 <timerRun+0x170>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	dd0b      	ble.n	8001edc <timerRun+0x124>
		timer9_counter--;
 8001ec4:	4b18      	ldr	r3, [pc, #96]	; (8001f28 <timerRun+0x170>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	4a17      	ldr	r2, [pc, #92]	; (8001f28 <timerRun+0x170>)
 8001ecc:	6013      	str	r3, [r2, #0]
		if(timer9_counter <= 0) timer9_flag = 1;
 8001ece:	4b16      	ldr	r3, [pc, #88]	; (8001f28 <timerRun+0x170>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	dc02      	bgt.n	8001edc <timerRun+0x124>
 8001ed6:	4b15      	ldr	r3, [pc, #84]	; (8001f2c <timerRun+0x174>)
 8001ed8:	2201      	movs	r2, #1
 8001eda:	601a      	str	r2, [r3, #0]
	}
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	200003d0 	.word	0x200003d0
 8001eec:	200003d4 	.word	0x200003d4
 8001ef0:	200003d8 	.word	0x200003d8
 8001ef4:	200003dc 	.word	0x200003dc
 8001ef8:	200003e0 	.word	0x200003e0
 8001efc:	200003e4 	.word	0x200003e4
 8001f00:	200003e8 	.word	0x200003e8
 8001f04:	200003ec 	.word	0x200003ec
 8001f08:	200003f0 	.word	0x200003f0
 8001f0c:	200003f4 	.word	0x200003f4
 8001f10:	200003f8 	.word	0x200003f8
 8001f14:	200003fc 	.word	0x200003fc
 8001f18:	20000400 	.word	0x20000400
 8001f1c:	20000404 	.word	0x20000404
 8001f20:	20000408 	.word	0x20000408
 8001f24:	2000040c 	.word	0x2000040c
 8001f28:	20000410 	.word	0x20000410
 8001f2c:	20000414 	.word	0x20000414

08001f30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f34:	480d      	ldr	r0, [pc, #52]	; (8001f6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f36:	490e      	ldr	r1, [pc, #56]	; (8001f70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f38:	4a0e      	ldr	r2, [pc, #56]	; (8001f74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f3c:	e002      	b.n	8001f44 <LoopCopyDataInit>

08001f3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f42:	3304      	adds	r3, #4

08001f44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f48:	d3f9      	bcc.n	8001f3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f4a:	4a0b      	ldr	r2, [pc, #44]	; (8001f78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f4c:	4c0b      	ldr	r4, [pc, #44]	; (8001f7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f50:	e001      	b.n	8001f56 <LoopFillZerobss>

08001f52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f54:	3204      	adds	r2, #4

08001f56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f58:	d3fb      	bcc.n	8001f52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f5a:	f7ff ff07 	bl	8001d6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f5e:	f003 fbf5 	bl	800574c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f62:	f7fe fd9f 	bl	8000aa4 <main>
  bx  lr    
 8001f66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f70:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001f74:	08006990 	.word	0x08006990
  ldr r2, =_sbss
 8001f78:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001f7c:	2000042c 	.word	0x2000042c

08001f80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f80:	e7fe      	b.n	8001f80 <ADC_IRQHandler>
	...

08001f84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f88:	4b0e      	ldr	r3, [pc, #56]	; (8001fc4 <HAL_Init+0x40>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a0d      	ldr	r2, [pc, #52]	; (8001fc4 <HAL_Init+0x40>)
 8001f8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f94:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <HAL_Init+0x40>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a0a      	ldr	r2, [pc, #40]	; (8001fc4 <HAL_Init+0x40>)
 8001f9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fa0:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <HAL_Init+0x40>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a07      	ldr	r2, [pc, #28]	; (8001fc4 <HAL_Init+0x40>)
 8001fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001faa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fac:	2003      	movs	r0, #3
 8001fae:	f001 fb73 	bl	8003698 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fb2:	200f      	movs	r0, #15
 8001fb4:	f000 f808 	bl	8001fc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fb8:	f7ff fcb0 	bl	800191c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40023c00 	.word	0x40023c00

08001fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fd0:	4b12      	ldr	r3, [pc, #72]	; (800201c <HAL_InitTick+0x54>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	4b12      	ldr	r3, [pc, #72]	; (8002020 <HAL_InitTick+0x58>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	4619      	mov	r1, r3
 8001fda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f001 fb8b 	bl	8003702 <HAL_SYSTICK_Config>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e00e      	b.n	8002014 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b0f      	cmp	r3, #15
 8001ffa:	d80a      	bhi.n	8002012 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	f04f 30ff 	mov.w	r0, #4294967295
 8002004:	f001 fb53 	bl	80036ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002008:	4a06      	ldr	r2, [pc, #24]	; (8002024 <HAL_InitTick+0x5c>)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800200e:	2300      	movs	r3, #0
 8002010:	e000      	b.n	8002014 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
}
 8002014:	4618      	mov	r0, r3
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	20000008 	.word	0x20000008
 8002020:	20000010 	.word	0x20000010
 8002024:	2000000c 	.word	0x2000000c

08002028 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800202c:	4b06      	ldr	r3, [pc, #24]	; (8002048 <HAL_IncTick+0x20>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	461a      	mov	r2, r3
 8002032:	4b06      	ldr	r3, [pc, #24]	; (800204c <HAL_IncTick+0x24>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4413      	add	r3, r2
 8002038:	4a04      	ldr	r2, [pc, #16]	; (800204c <HAL_IncTick+0x24>)
 800203a:	6013      	str	r3, [r2, #0]
}
 800203c:	bf00      	nop
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	20000010 	.word	0x20000010
 800204c:	20000418 	.word	0x20000418

08002050 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  return uwTick;
 8002054:	4b03      	ldr	r3, [pc, #12]	; (8002064 <HAL_GetTick+0x14>)
 8002056:	681b      	ldr	r3, [r3, #0]
}
 8002058:	4618      	mov	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	20000418 	.word	0x20000418

08002068 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002070:	f7ff ffee 	bl	8002050 <HAL_GetTick>
 8002074:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002080:	d005      	beq.n	800208e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002082:	4b0a      	ldr	r3, [pc, #40]	; (80020ac <HAL_Delay+0x44>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	461a      	mov	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4413      	add	r3, r2
 800208c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800208e:	bf00      	nop
 8002090:	f7ff ffde 	bl	8002050 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	429a      	cmp	r2, r3
 800209e:	d8f7      	bhi.n	8002090 <HAL_Delay+0x28>
  {
  }
}
 80020a0:	bf00      	nop
 80020a2:	bf00      	nop
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000010 	.word	0x20000010

080020b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020b8:	2300      	movs	r3, #0
 80020ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e033      	b.n	800212e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d109      	bne.n	80020e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff fc4c 	bl	800196c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	f003 0310 	and.w	r3, r3, #16
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d118      	bne.n	8002120 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020f6:	f023 0302 	bic.w	r3, r3, #2
 80020fa:	f043 0202 	orr.w	r2, r3, #2
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 faa4 	bl	8002650 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f023 0303 	bic.w	r3, r3, #3
 8002116:	f043 0201 	orr.w	r2, r3, #1
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	641a      	str	r2, [r3, #64]	; 0x40
 800211e:	e001      	b.n	8002124 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800212c:	7bfb      	ldrb	r3, [r7, #15]
}
 800212e:	4618      	mov	r0, r3
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
	...

08002138 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002140:	2300      	movs	r3, #0
 8002142:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800214a:	2b01      	cmp	r3, #1
 800214c:	d101      	bne.n	8002152 <HAL_ADC_Start+0x1a>
 800214e:	2302      	movs	r3, #2
 8002150:	e0b2      	b.n	80022b8 <HAL_ADC_Start+0x180>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b01      	cmp	r3, #1
 8002166:	d018      	beq.n	800219a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 0201 	orr.w	r2, r2, #1
 8002176:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002178:	4b52      	ldr	r3, [pc, #328]	; (80022c4 <HAL_ADC_Start+0x18c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a52      	ldr	r2, [pc, #328]	; (80022c8 <HAL_ADC_Start+0x190>)
 800217e:	fba2 2303 	umull	r2, r3, r2, r3
 8002182:	0c9a      	lsrs	r2, r3, #18
 8002184:	4613      	mov	r3, r2
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	4413      	add	r3, r2
 800218a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800218c:	e002      	b.n	8002194 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	3b01      	subs	r3, #1
 8002192:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f9      	bne.n	800218e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d17a      	bne.n	800229e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80021b0:	f023 0301 	bic.w	r3, r3, #1
 80021b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d007      	beq.n	80021da <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021e6:	d106      	bne.n	80021f6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ec:	f023 0206 	bic.w	r2, r3, #6
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	645a      	str	r2, [r3, #68]	; 0x44
 80021f4:	e002      	b.n	80021fc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002204:	4b31      	ldr	r3, [pc, #196]	; (80022cc <HAL_ADC_Start+0x194>)
 8002206:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002210:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f003 031f 	and.w	r3, r3, #31
 800221a:	2b00      	cmp	r3, #0
 800221c:	d12a      	bne.n	8002274 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a2b      	ldr	r2, [pc, #172]	; (80022d0 <HAL_ADC_Start+0x198>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d015      	beq.n	8002254 <HAL_ADC_Start+0x11c>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a29      	ldr	r2, [pc, #164]	; (80022d4 <HAL_ADC_Start+0x19c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d105      	bne.n	800223e <HAL_ADC_Start+0x106>
 8002232:	4b26      	ldr	r3, [pc, #152]	; (80022cc <HAL_ADC_Start+0x194>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 031f 	and.w	r3, r3, #31
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00a      	beq.n	8002254 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a25      	ldr	r2, [pc, #148]	; (80022d8 <HAL_ADC_Start+0x1a0>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d136      	bne.n	80022b6 <HAL_ADC_Start+0x17e>
 8002248:	4b20      	ldr	r3, [pc, #128]	; (80022cc <HAL_ADC_Start+0x194>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 0310 	and.w	r3, r3, #16
 8002250:	2b00      	cmp	r3, #0
 8002252:	d130      	bne.n	80022b6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d129      	bne.n	80022b6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002270:	609a      	str	r2, [r3, #8]
 8002272:	e020      	b.n	80022b6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a15      	ldr	r2, [pc, #84]	; (80022d0 <HAL_ADC_Start+0x198>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d11b      	bne.n	80022b6 <HAL_ADC_Start+0x17e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d114      	bne.n	80022b6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689a      	ldr	r2, [r3, #8]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	e00b      	b.n	80022b6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	f043 0210 	orr.w	r2, r3, #16
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ae:	f043 0201 	orr.w	r2, r3, #1
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	20000008 	.word	0x20000008
 80022c8:	431bde83 	.word	0x431bde83
 80022cc:	40012300 	.word	0x40012300
 80022d0:	40012000 	.word	0x40012000
 80022d4:	40012100 	.word	0x40012100
 80022d8:	40012200 	.word	0x40012200

080022dc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022f8:	d113      	bne.n	8002322 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002304:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002308:	d10b      	bne.n	8002322 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	f043 0220 	orr.w	r2, r3, #32
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e063      	b.n	80023ea <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002322:	f7ff fe95 	bl	8002050 <HAL_GetTick>
 8002326:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002328:	e021      	b.n	800236e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002330:	d01d      	beq.n	800236e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d007      	beq.n	8002348 <HAL_ADC_PollForConversion+0x6c>
 8002338:	f7ff fe8a 	bl	8002050 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	429a      	cmp	r2, r3
 8002346:	d212      	bcs.n	800236e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b02      	cmp	r3, #2
 8002354:	d00b      	beq.n	800236e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	f043 0204 	orr.w	r2, r3, #4
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e03d      	b.n	80023ea <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b02      	cmp	r3, #2
 800237a:	d1d6      	bne.n	800232a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f06f 0212 	mvn.w	r2, #18
 8002384:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d123      	bne.n	80023e8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d11f      	bne.n	80023e8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d006      	beq.n	80023c4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d111      	bne.n	80023e8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d105      	bne.n	80023e8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	f043 0201 	orr.w	r2, r3, #1
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002400:	4618      	mov	r0, r3
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002416:	2300      	movs	r3, #0
 8002418:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <HAL_ADC_ConfigChannel+0x1c>
 8002424:	2302      	movs	r3, #2
 8002426:	e105      	b.n	8002634 <HAL_ADC_ConfigChannel+0x228>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b09      	cmp	r3, #9
 8002436:	d925      	bls.n	8002484 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68d9      	ldr	r1, [r3, #12]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	b29b      	uxth	r3, r3
 8002444:	461a      	mov	r2, r3
 8002446:	4613      	mov	r3, r2
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	4413      	add	r3, r2
 800244c:	3b1e      	subs	r3, #30
 800244e:	2207      	movs	r2, #7
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43da      	mvns	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	400a      	ands	r2, r1
 800245c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68d9      	ldr	r1, [r3, #12]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	b29b      	uxth	r3, r3
 800246e:	4618      	mov	r0, r3
 8002470:	4603      	mov	r3, r0
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	4403      	add	r3, r0
 8002476:	3b1e      	subs	r3, #30
 8002478:	409a      	lsls	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	430a      	orrs	r2, r1
 8002480:	60da      	str	r2, [r3, #12]
 8002482:	e022      	b.n	80024ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6919      	ldr	r1, [r3, #16]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	b29b      	uxth	r3, r3
 8002490:	461a      	mov	r2, r3
 8002492:	4613      	mov	r3, r2
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	4413      	add	r3, r2
 8002498:	2207      	movs	r2, #7
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43da      	mvns	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	400a      	ands	r2, r1
 80024a6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6919      	ldr	r1, [r3, #16]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	689a      	ldr	r2, [r3, #8]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	4618      	mov	r0, r3
 80024ba:	4603      	mov	r3, r0
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	4403      	add	r3, r0
 80024c0:	409a      	lsls	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b06      	cmp	r3, #6
 80024d0:	d824      	bhi.n	800251c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	4613      	mov	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4413      	add	r3, r2
 80024e2:	3b05      	subs	r3, #5
 80024e4:	221f      	movs	r2, #31
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43da      	mvns	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	400a      	ands	r2, r1
 80024f2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	b29b      	uxth	r3, r3
 8002500:	4618      	mov	r0, r3
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	4613      	mov	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	3b05      	subs	r3, #5
 800250e:	fa00 f203 	lsl.w	r2, r0, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	635a      	str	r2, [r3, #52]	; 0x34
 800251a:	e04c      	b.n	80025b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	2b0c      	cmp	r3, #12
 8002522:	d824      	bhi.n	800256e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	3b23      	subs	r3, #35	; 0x23
 8002536:	221f      	movs	r2, #31
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43da      	mvns	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	400a      	ands	r2, r1
 8002544:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	b29b      	uxth	r3, r3
 8002552:	4618      	mov	r0, r3
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	4613      	mov	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	4413      	add	r3, r2
 800255e:	3b23      	subs	r3, #35	; 0x23
 8002560:	fa00 f203 	lsl.w	r2, r0, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	430a      	orrs	r2, r1
 800256a:	631a      	str	r2, [r3, #48]	; 0x30
 800256c:	e023      	b.n	80025b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	3b41      	subs	r3, #65	; 0x41
 8002580:	221f      	movs	r2, #31
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43da      	mvns	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	400a      	ands	r2, r1
 800258e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	b29b      	uxth	r3, r3
 800259c:	4618      	mov	r0, r3
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	4613      	mov	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	3b41      	subs	r3, #65	; 0x41
 80025aa:	fa00 f203 	lsl.w	r2, r0, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025b6:	4b22      	ldr	r3, [pc, #136]	; (8002640 <HAL_ADC_ConfigChannel+0x234>)
 80025b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a21      	ldr	r2, [pc, #132]	; (8002644 <HAL_ADC_ConfigChannel+0x238>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d109      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x1cc>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b12      	cmp	r3, #18
 80025ca:	d105      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a19      	ldr	r2, [pc, #100]	; (8002644 <HAL_ADC_ConfigChannel+0x238>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d123      	bne.n	800262a <HAL_ADC_ConfigChannel+0x21e>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2b10      	cmp	r3, #16
 80025e8:	d003      	beq.n	80025f2 <HAL_ADC_ConfigChannel+0x1e6>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2b11      	cmp	r3, #17
 80025f0:	d11b      	bne.n	800262a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2b10      	cmp	r3, #16
 8002604:	d111      	bne.n	800262a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002606:	4b10      	ldr	r3, [pc, #64]	; (8002648 <HAL_ADC_ConfigChannel+0x23c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a10      	ldr	r2, [pc, #64]	; (800264c <HAL_ADC_ConfigChannel+0x240>)
 800260c:	fba2 2303 	umull	r2, r3, r2, r3
 8002610:	0c9a      	lsrs	r2, r3, #18
 8002612:	4613      	mov	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800261c:	e002      	b.n	8002624 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	3b01      	subs	r3, #1
 8002622:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1f9      	bne.n	800261e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	40012300 	.word	0x40012300
 8002644:	40012000 	.word	0x40012000
 8002648:	20000008 	.word	0x20000008
 800264c:	431bde83 	.word	0x431bde83

08002650 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002658:	4b79      	ldr	r3, [pc, #484]	; (8002840 <ADC_Init+0x1f0>)
 800265a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	431a      	orrs	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	685a      	ldr	r2, [r3, #4]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002684:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6859      	ldr	r1, [r3, #4]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	021a      	lsls	r2, r3, #8
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80026a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6859      	ldr	r1, [r3, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6899      	ldr	r1, [r3, #8]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68da      	ldr	r2, [r3, #12]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	430a      	orrs	r2, r1
 80026dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e2:	4a58      	ldr	r2, [pc, #352]	; (8002844 <ADC_Init+0x1f4>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d022      	beq.n	800272e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689a      	ldr	r2, [r3, #8]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6899      	ldr	r1, [r3, #8]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002718:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6899      	ldr	r1, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	430a      	orrs	r2, r1
 800272a:	609a      	str	r2, [r3, #8]
 800272c:	e00f      	b.n	800274e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800273c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800274c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 0202 	bic.w	r2, r2, #2
 800275c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6899      	ldr	r1, [r3, #8]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	7e1b      	ldrb	r3, [r3, #24]
 8002768:	005a      	lsls	r2, r3, #1
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d01b      	beq.n	80027b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800278a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800279a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6859      	ldr	r1, [r3, #4]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a6:	3b01      	subs	r3, #1
 80027a8:	035a      	lsls	r2, r3, #13
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	e007      	b.n	80027c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80027d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	3b01      	subs	r3, #1
 80027e0:	051a      	lsls	r2, r3, #20
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80027f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6899      	ldr	r1, [r3, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002806:	025a      	lsls	r2, r3, #9
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689a      	ldr	r2, [r3, #8]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800281e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6899      	ldr	r1, [r3, #8]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	029a      	lsls	r2, r3, #10
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	609a      	str	r2, [r3, #8]
}
 8002834:	bf00      	nop
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	40012300 	.word	0x40012300
 8002844:	0f000001 	.word	0x0f000001

08002848 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e0ed      	b.n	8002a36 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d102      	bne.n	800286c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7ff f8c4 	bl	80019f4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f042 0201 	orr.w	r2, r2, #1
 800287a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800287c:	f7ff fbe8 	bl	8002050 <HAL_GetTick>
 8002880:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002882:	e012      	b.n	80028aa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002884:	f7ff fbe4 	bl	8002050 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b0a      	cmp	r3, #10
 8002890:	d90b      	bls.n	80028aa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002896:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2205      	movs	r2, #5
 80028a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e0c5      	b.n	8002a36 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0e5      	beq.n	8002884 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f022 0202 	bic.w	r2, r2, #2
 80028c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028c8:	f7ff fbc2 	bl	8002050 <HAL_GetTick>
 80028cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80028ce:	e012      	b.n	80028f6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028d0:	f7ff fbbe 	bl	8002050 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b0a      	cmp	r3, #10
 80028dc:	d90b      	bls.n	80028f6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2205      	movs	r2, #5
 80028ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e09f      	b.n	8002a36 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1e5      	bne.n	80028d0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	7e1b      	ldrb	r3, [r3, #24]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d108      	bne.n	800291e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	e007      	b.n	800292e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800292c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	7e5b      	ldrb	r3, [r3, #25]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d108      	bne.n	8002948 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	e007      	b.n	8002958 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002956:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	7e9b      	ldrb	r3, [r3, #26]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d108      	bne.n	8002972 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 0220 	orr.w	r2, r2, #32
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	e007      	b.n	8002982 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0220 	bic.w	r2, r2, #32
 8002980:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	7edb      	ldrb	r3, [r3, #27]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d108      	bne.n	800299c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0210 	bic.w	r2, r2, #16
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	e007      	b.n	80029ac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 0210 	orr.w	r2, r2, #16
 80029aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	7f1b      	ldrb	r3, [r3, #28]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d108      	bne.n	80029c6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 0208 	orr.w	r2, r2, #8
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	e007      	b.n	80029d6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 0208 	bic.w	r2, r2, #8
 80029d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	7f5b      	ldrb	r3, [r3, #29]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d108      	bne.n	80029f0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f042 0204 	orr.w	r2, r2, #4
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	e007      	b.n	8002a00 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 0204 	bic.w	r2, r2, #4
 80029fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	695b      	ldr	r3, [r3, #20]
 8002a14:	ea42 0103 	orr.w	r1, r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	1e5a      	subs	r2, r3, #1
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
	...

08002a40 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b087      	sub	sp, #28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a56:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002a58:	7cfb      	ldrb	r3, [r7, #19]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d003      	beq.n	8002a66 <HAL_CAN_ConfigFilter+0x26>
 8002a5e:	7cfb      	ldrb	r3, [r7, #19]
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	f040 80be 	bne.w	8002be2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002a66:	4b65      	ldr	r3, [pc, #404]	; (8002bfc <HAL_CAN_ConfigFilter+0x1bc>)
 8002a68:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a70:	f043 0201 	orr.w	r2, r3, #1
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a80:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	021b      	lsls	r3, r3, #8
 8002a96:	431a      	orrs	r2, r3
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	f003 031f 	and.w	r3, r3, #31
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	401a      	ands	r2, r3
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	69db      	ldr	r3, [r3, #28]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d123      	bne.n	8002b10 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	401a      	ands	r2, r3
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002aea:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	3248      	adds	r2, #72	; 0x48
 8002af0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b04:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b06:	6979      	ldr	r1, [r7, #20]
 8002b08:	3348      	adds	r3, #72	; 0x48
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	440b      	add	r3, r1
 8002b0e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d122      	bne.n	8002b5e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	431a      	orrs	r2, r3
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002b38:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	3248      	adds	r2, #72	; 0x48
 8002b3e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b52:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b54:	6979      	ldr	r1, [r7, #20]
 8002b56:	3348      	adds	r3, #72	; 0x48
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	440b      	add	r3, r1
 8002b5c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d109      	bne.n	8002b7a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	401a      	ands	r2, r3
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002b78:	e007      	b.n	8002b8a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	431a      	orrs	r2, r3
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d109      	bne.n	8002ba6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	401a      	ands	r2, r3
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002ba4:	e007      	b.n	8002bb6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d107      	bne.n	8002bce <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002bd4:	f023 0201 	bic.w	r2, r3, #1
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002bde:	2300      	movs	r3, #0
 8002be0:	e006      	b.n	8002bf0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
  }
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	371c      	adds	r7, #28
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	40006400 	.word	0x40006400

08002c00 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d12e      	bne.n	8002c72 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2202      	movs	r2, #2
 8002c18:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0201 	bic.w	r2, r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c2c:	f7ff fa10 	bl	8002050 <HAL_GetTick>
 8002c30:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c32:	e012      	b.n	8002c5a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c34:	f7ff fa0c 	bl	8002050 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b0a      	cmp	r3, #10
 8002c40:	d90b      	bls.n	8002c5a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2205      	movs	r2, #5
 8002c52:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e012      	b.n	8002c80 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1e5      	bne.n	8002c34 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	e006      	b.n	8002c80 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
  }
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b089      	sub	sp, #36	; 0x24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
 8002c94:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c9c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ca6:	7ffb      	ldrb	r3, [r7, #31]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d003      	beq.n	8002cb4 <HAL_CAN_AddTxMessage+0x2c>
 8002cac:	7ffb      	ldrb	r3, [r7, #31]
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	f040 80b8 	bne.w	8002e24 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10a      	bne.n	8002cd4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d105      	bne.n	8002cd4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f000 80a0 	beq.w	8002e14 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	0e1b      	lsrs	r3, r3, #24
 8002cd8:	f003 0303 	and.w	r3, r3, #3
 8002cdc:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d907      	bls.n	8002cf4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e09e      	b.n	8002e32 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	409a      	lsls	r2, r3
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10d      	bne.n	8002d22 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002d10:	68f9      	ldr	r1, [r7, #12]
 8002d12:	6809      	ldr	r1, [r1, #0]
 8002d14:	431a      	orrs	r2, r3
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	3318      	adds	r3, #24
 8002d1a:	011b      	lsls	r3, r3, #4
 8002d1c:	440b      	add	r3, r1
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	e00f      	b.n	8002d42 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d2c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d32:	68f9      	ldr	r1, [r7, #12]
 8002d34:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002d36:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	3318      	adds	r3, #24
 8002d3c:	011b      	lsls	r3, r3, #4
 8002d3e:	440b      	add	r3, r1
 8002d40:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6819      	ldr	r1, [r3, #0]
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	691a      	ldr	r2, [r3, #16]
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	3318      	adds	r3, #24
 8002d4e:	011b      	lsls	r3, r3, #4
 8002d50:	440b      	add	r3, r1
 8002d52:	3304      	adds	r3, #4
 8002d54:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	7d1b      	ldrb	r3, [r3, #20]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d111      	bne.n	8002d82 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	3318      	adds	r3, #24
 8002d66:	011b      	lsls	r3, r3, #4
 8002d68:	4413      	add	r3, r2
 8002d6a:	3304      	adds	r3, #4
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	6811      	ldr	r1, [r2, #0]
 8002d72:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	3318      	adds	r3, #24
 8002d7a:	011b      	lsls	r3, r3, #4
 8002d7c:	440b      	add	r3, r1
 8002d7e:	3304      	adds	r3, #4
 8002d80:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	3307      	adds	r3, #7
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	061a      	lsls	r2, r3, #24
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	3306      	adds	r3, #6
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	041b      	lsls	r3, r3, #16
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3305      	adds	r3, #5
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	021b      	lsls	r3, r3, #8
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	3204      	adds	r2, #4
 8002da2:	7812      	ldrb	r2, [r2, #0]
 8002da4:	4610      	mov	r0, r2
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	6811      	ldr	r1, [r2, #0]
 8002daa:	ea43 0200 	orr.w	r2, r3, r0
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	011b      	lsls	r3, r3, #4
 8002db2:	440b      	add	r3, r1
 8002db4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002db8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	3303      	adds	r3, #3
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	061a      	lsls	r2, r3, #24
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	3302      	adds	r3, #2
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	041b      	lsls	r3, r3, #16
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	021b      	lsls	r3, r3, #8
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	7812      	ldrb	r2, [r2, #0]
 8002dda:	4610      	mov	r0, r2
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	6811      	ldr	r1, [r2, #0]
 8002de0:	ea43 0200 	orr.w	r2, r3, r0
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	440b      	add	r3, r1
 8002dea:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002dee:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	3318      	adds	r3, #24
 8002df8:	011b      	lsls	r3, r3, #4
 8002dfa:	4413      	add	r3, r2
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	6811      	ldr	r1, [r2, #0]
 8002e02:	f043 0201 	orr.w	r2, r3, #1
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	3318      	adds	r3, #24
 8002e0a:	011b      	lsls	r3, r3, #4
 8002e0c:	440b      	add	r3, r1
 8002e0e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002e10:	2300      	movs	r3, #0
 8002e12:	e00e      	b.n	8002e32 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e006      	b.n	8002e32 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
  }
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3724      	adds	r7, #36	; 0x24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b087      	sub	sp, #28
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	60f8      	str	r0, [r7, #12]
 8002e46:	60b9      	str	r1, [r7, #8]
 8002e48:	607a      	str	r2, [r7, #4]
 8002e4a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e52:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002e54:	7dfb      	ldrb	r3, [r7, #23]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d003      	beq.n	8002e62 <HAL_CAN_GetRxMessage+0x24>
 8002e5a:	7dfb      	ldrb	r3, [r7, #23]
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	f040 80f3 	bne.w	8003048 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10e      	bne.n	8002e86 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d116      	bne.n	8002ea4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e0e7      	b.n	8003056 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	f003 0303 	and.w	r3, r3, #3
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d107      	bne.n	8002ea4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e0d8      	b.n	8003056 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	331b      	adds	r3, #27
 8002eac:	011b      	lsls	r3, r3, #4
 8002eae:	4413      	add	r3, r2
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0204 	and.w	r2, r3, #4
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10c      	bne.n	8002edc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	331b      	adds	r3, #27
 8002eca:	011b      	lsls	r3, r3, #4
 8002ecc:	4413      	add	r3, r2
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	0d5b      	lsrs	r3, r3, #21
 8002ed2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	e00b      	b.n	8002ef4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	331b      	adds	r3, #27
 8002ee4:	011b      	lsls	r3, r3, #4
 8002ee6:	4413      	add	r3, r2
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	08db      	lsrs	r3, r3, #3
 8002eec:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	331b      	adds	r3, #27
 8002efc:	011b      	lsls	r3, r3, #4
 8002efe:	4413      	add	r3, r2
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0202 	and.w	r2, r3, #2
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	331b      	adds	r3, #27
 8002f12:	011b      	lsls	r3, r3, #4
 8002f14:	4413      	add	r3, r2
 8002f16:	3304      	adds	r3, #4
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 020f 	and.w	r2, r3, #15
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	331b      	adds	r3, #27
 8002f2a:	011b      	lsls	r3, r3, #4
 8002f2c:	4413      	add	r3, r2
 8002f2e:	3304      	adds	r3, #4
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	0a1b      	lsrs	r3, r3, #8
 8002f34:	b2da      	uxtb	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	331b      	adds	r3, #27
 8002f42:	011b      	lsls	r3, r3, #4
 8002f44:	4413      	add	r3, r2
 8002f46:	3304      	adds	r3, #4
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	0c1b      	lsrs	r3, r3, #16
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	011b      	lsls	r3, r3, #4
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	011b      	lsls	r3, r3, #4
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	0a1a      	lsrs	r2, r3, #8
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	011b      	lsls	r3, r3, #4
 8002f8a:	4413      	add	r3, r2
 8002f8c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	0c1a      	lsrs	r2, r3, #16
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	3302      	adds	r3, #2
 8002f98:	b2d2      	uxtb	r2, r2
 8002f9a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	4413      	add	r3, r2
 8002fa6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	0e1a      	lsrs	r2, r3, #24
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	3303      	adds	r3, #3
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	011b      	lsls	r3, r3, #4
 8002fbe:	4413      	add	r3, r2
 8002fc0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	3304      	adds	r3, #4
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	011b      	lsls	r3, r3, #4
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	0a1a      	lsrs	r2, r3, #8
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	3305      	adds	r3, #5
 8002fe4:	b2d2      	uxtb	r2, r2
 8002fe6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	011b      	lsls	r3, r3, #4
 8002ff0:	4413      	add	r3, r2
 8002ff2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	0c1a      	lsrs	r2, r3, #16
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	3306      	adds	r3, #6
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	011b      	lsls	r3, r3, #4
 800300a:	4413      	add	r3, r2
 800300c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	0e1a      	lsrs	r2, r3, #24
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	3307      	adds	r3, #7
 8003018:	b2d2      	uxtb	r2, r2
 800301a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d108      	bne.n	8003034 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f042 0220 	orr.w	r2, r2, #32
 8003030:	60da      	str	r2, [r3, #12]
 8003032:	e007      	b.n	8003044 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	691a      	ldr	r2, [r3, #16]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0220 	orr.w	r2, r2, #32
 8003042:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003044:	2300      	movs	r3, #0
 8003046:	e006      	b.n	8003056 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
  }
}
 8003056:	4618      	mov	r0, r3
 8003058:	371c      	adds	r7, #28
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003062:	b480      	push	{r7}
 8003064:	b085      	sub	sp, #20
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
 800306a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003072:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003074:	7bfb      	ldrb	r3, [r7, #15]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d002      	beq.n	8003080 <HAL_CAN_ActivateNotification+0x1e>
 800307a:	7bfb      	ldrb	r3, [r7, #15]
 800307c:	2b02      	cmp	r3, #2
 800307e:	d109      	bne.n	8003094 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6959      	ldr	r1, [r3, #20]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003090:	2300      	movs	r3, #0
 8003092:	e006      	b.n	80030a2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
  }
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b08a      	sub	sp, #40	; 0x28
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80030b6:	2300      	movs	r3, #0
 80030b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80030ea:	6a3b      	ldr	r3, [r7, #32]
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d07c      	beq.n	80031ee <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d023      	beq.n	8003146 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2201      	movs	r2, #1
 8003104:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 f983 	bl	800341c <HAL_CAN_TxMailbox0CompleteCallback>
 8003116:	e016      	b.n	8003146 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	f003 0304 	and.w	r3, r3, #4
 800311e:	2b00      	cmp	r3, #0
 8003120:	d004      	beq.n	800312c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003124:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003128:	627b      	str	r3, [r7, #36]	; 0x24
 800312a:	e00c      	b.n	8003146 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	f003 0308 	and.w	r3, r3, #8
 8003132:	2b00      	cmp	r3, #0
 8003134:	d004      	beq.n	8003140 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800313c:	627b      	str	r3, [r7, #36]	; 0x24
 800313e:	e002      	b.n	8003146 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 f989 	bl	8003458 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314c:	2b00      	cmp	r3, #0
 800314e:	d024      	beq.n	800319a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003158:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003160:	2b00      	cmp	r3, #0
 8003162:	d003      	beq.n	800316c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 f963 	bl	8003430 <HAL_CAN_TxMailbox1CompleteCallback>
 800316a:	e016      	b.n	800319a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003172:	2b00      	cmp	r3, #0
 8003174:	d004      	beq.n	8003180 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003178:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800317c:	627b      	str	r3, [r7, #36]	; 0x24
 800317e:	e00c      	b.n	800319a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003186:	2b00      	cmp	r3, #0
 8003188:	d004      	beq.n	8003194 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003190:	627b      	str	r3, [r7, #36]	; 0x24
 8003192:	e002      	b.n	800319a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f969 	bl	800346c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d024      	beq.n	80031ee <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80031ac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 f943 	bl	8003444 <HAL_CAN_TxMailbox2CompleteCallback>
 80031be:	e016      	b.n	80031ee <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d004      	beq.n	80031d4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031d0:	627b      	str	r3, [r7, #36]	; 0x24
 80031d2:	e00c      	b.n	80031ee <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d004      	beq.n	80031e8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80031de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e4:	627b      	str	r3, [r7, #36]	; 0x24
 80031e6:	e002      	b.n	80031ee <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 f949 	bl	8003480 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80031ee:	6a3b      	ldr	r3, [r7, #32]
 80031f0:	f003 0308 	and.w	r3, r3, #8
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00c      	beq.n	8003212 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	f003 0310 	and.w	r3, r3, #16
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d007      	beq.n	8003212 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003204:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003208:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2210      	movs	r2, #16
 8003210:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003212:	6a3b      	ldr	r3, [r7, #32]
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00b      	beq.n	8003234 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f003 0308 	and.w	r3, r3, #8
 8003222:	2b00      	cmp	r3, #0
 8003224:	d006      	beq.n	8003234 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2208      	movs	r2, #8
 800322c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f930 	bl	8003494 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003234:	6a3b      	ldr	r3, [r7, #32]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d009      	beq.n	8003252 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	f003 0303 	and.w	r3, r3, #3
 8003248:	2b00      	cmp	r3, #0
 800324a:	d002      	beq.n	8003252 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f7fd fea5 	bl	8000f9c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00c      	beq.n	8003276 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	f003 0310 	and.w	r3, r3, #16
 8003262:	2b00      	cmp	r3, #0
 8003264:	d007      	beq.n	8003276 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800326c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2210      	movs	r2, #16
 8003274:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003276:	6a3b      	ldr	r3, [r7, #32]
 8003278:	f003 0320 	and.w	r3, r3, #32
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00b      	beq.n	8003298 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	2b00      	cmp	r3, #0
 8003288:	d006      	beq.n	8003298 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2208      	movs	r2, #8
 8003290:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f908 	bl	80034a8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	f003 0310 	and.w	r3, r3, #16
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d009      	beq.n	80032b6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	f003 0303 	and.w	r3, r3, #3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d002      	beq.n	80032b6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7fd ff93 	bl	80011dc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80032b6:	6a3b      	ldr	r3, [r7, #32]
 80032b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00b      	beq.n	80032d8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	f003 0310 	and.w	r3, r3, #16
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d006      	beq.n	80032d8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2210      	movs	r2, #16
 80032d0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f8f2 	bl	80034bc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80032d8:	6a3b      	ldr	r3, [r7, #32]
 80032da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00b      	beq.n	80032fa <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	f003 0308 	and.w	r3, r3, #8
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d006      	beq.n	80032fa <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2208      	movs	r2, #8
 80032f2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 f8eb 	bl	80034d0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80032fa:	6a3b      	ldr	r3, [r7, #32]
 80032fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d07b      	beq.n	80033fc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	f003 0304 	and.w	r3, r3, #4
 800330a:	2b00      	cmp	r3, #0
 800330c:	d072      	beq.n	80033f4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800330e:	6a3b      	ldr	r3, [r7, #32]
 8003310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003314:	2b00      	cmp	r3, #0
 8003316:	d008      	beq.n	800332a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	f043 0301 	orr.w	r3, r3, #1
 8003328:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800332a:	6a3b      	ldr	r3, [r7, #32]
 800332c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003330:	2b00      	cmp	r3, #0
 8003332:	d008      	beq.n	8003346 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003340:	f043 0302 	orr.w	r3, r3, #2
 8003344:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003346:	6a3b      	ldr	r3, [r7, #32]
 8003348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800334c:	2b00      	cmp	r3, #0
 800334e:	d008      	beq.n	8003362 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	f043 0304 	orr.w	r3, r3, #4
 8003360:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003368:	2b00      	cmp	r3, #0
 800336a:	d043      	beq.n	80033f4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003372:	2b00      	cmp	r3, #0
 8003374:	d03e      	beq.n	80033f4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800337c:	2b60      	cmp	r3, #96	; 0x60
 800337e:	d02b      	beq.n	80033d8 <HAL_CAN_IRQHandler+0x32a>
 8003380:	2b60      	cmp	r3, #96	; 0x60
 8003382:	d82e      	bhi.n	80033e2 <HAL_CAN_IRQHandler+0x334>
 8003384:	2b50      	cmp	r3, #80	; 0x50
 8003386:	d022      	beq.n	80033ce <HAL_CAN_IRQHandler+0x320>
 8003388:	2b50      	cmp	r3, #80	; 0x50
 800338a:	d82a      	bhi.n	80033e2 <HAL_CAN_IRQHandler+0x334>
 800338c:	2b40      	cmp	r3, #64	; 0x40
 800338e:	d019      	beq.n	80033c4 <HAL_CAN_IRQHandler+0x316>
 8003390:	2b40      	cmp	r3, #64	; 0x40
 8003392:	d826      	bhi.n	80033e2 <HAL_CAN_IRQHandler+0x334>
 8003394:	2b30      	cmp	r3, #48	; 0x30
 8003396:	d010      	beq.n	80033ba <HAL_CAN_IRQHandler+0x30c>
 8003398:	2b30      	cmp	r3, #48	; 0x30
 800339a:	d822      	bhi.n	80033e2 <HAL_CAN_IRQHandler+0x334>
 800339c:	2b10      	cmp	r3, #16
 800339e:	d002      	beq.n	80033a6 <HAL_CAN_IRQHandler+0x2f8>
 80033a0:	2b20      	cmp	r3, #32
 80033a2:	d005      	beq.n	80033b0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80033a4:	e01d      	b.n	80033e2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	f043 0308 	orr.w	r3, r3, #8
 80033ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80033ae:	e019      	b.n	80033e4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b2:	f043 0310 	orr.w	r3, r3, #16
 80033b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80033b8:	e014      	b.n	80033e4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80033ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033bc:	f043 0320 	orr.w	r3, r3, #32
 80033c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80033c2:	e00f      	b.n	80033e4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80033c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80033cc:	e00a      	b.n	80033e4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80033d6:	e005      	b.n	80033e4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033de:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80033e0:	e000      	b.n	80033e4 <HAL_CAN_IRQHandler+0x336>
            break;
 80033e2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699a      	ldr	r2, [r3, #24]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80033f2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2204      	movs	r2, #4
 80033fa:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80033fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d008      	beq.n	8003414 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	431a      	orrs	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f868 	bl	80034e4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003414:	bf00      	nop
 8003416:	3728      	adds	r7, #40	; 0x28
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f003 0307 	and.w	r3, r3, #7
 8003506:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003508:	4b0c      	ldr	r3, [pc, #48]	; (800353c <__NVIC_SetPriorityGrouping+0x44>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003514:	4013      	ands	r3, r2
 8003516:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003520:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003528:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800352a:	4a04      	ldr	r2, [pc, #16]	; (800353c <__NVIC_SetPriorityGrouping+0x44>)
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	60d3      	str	r3, [r2, #12]
}
 8003530:	bf00      	nop
 8003532:	3714      	adds	r7, #20
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	e000ed00 	.word	0xe000ed00

08003540 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003544:	4b04      	ldr	r3, [pc, #16]	; (8003558 <__NVIC_GetPriorityGrouping+0x18>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	0a1b      	lsrs	r3, r3, #8
 800354a:	f003 0307 	and.w	r3, r3, #7
}
 800354e:	4618      	mov	r0, r3
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	e000ed00 	.word	0xe000ed00

0800355c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356a:	2b00      	cmp	r3, #0
 800356c:	db0b      	blt.n	8003586 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800356e:	79fb      	ldrb	r3, [r7, #7]
 8003570:	f003 021f 	and.w	r2, r3, #31
 8003574:	4907      	ldr	r1, [pc, #28]	; (8003594 <__NVIC_EnableIRQ+0x38>)
 8003576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357a:	095b      	lsrs	r3, r3, #5
 800357c:	2001      	movs	r0, #1
 800357e:	fa00 f202 	lsl.w	r2, r0, r2
 8003582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003586:	bf00      	nop
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	e000e100 	.word	0xe000e100

08003598 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	4603      	mov	r3, r0
 80035a0:	6039      	str	r1, [r7, #0]
 80035a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	db0a      	blt.n	80035c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	490c      	ldr	r1, [pc, #48]	; (80035e4 <__NVIC_SetPriority+0x4c>)
 80035b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b6:	0112      	lsls	r2, r2, #4
 80035b8:	b2d2      	uxtb	r2, r2
 80035ba:	440b      	add	r3, r1
 80035bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035c0:	e00a      	b.n	80035d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	4908      	ldr	r1, [pc, #32]	; (80035e8 <__NVIC_SetPriority+0x50>)
 80035c8:	79fb      	ldrb	r3, [r7, #7]
 80035ca:	f003 030f 	and.w	r3, r3, #15
 80035ce:	3b04      	subs	r3, #4
 80035d0:	0112      	lsls	r2, r2, #4
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	440b      	add	r3, r1
 80035d6:	761a      	strb	r2, [r3, #24]
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	e000e100 	.word	0xe000e100
 80035e8:	e000ed00 	.word	0xe000ed00

080035ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b089      	sub	sp, #36	; 0x24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	f1c3 0307 	rsb	r3, r3, #7
 8003606:	2b04      	cmp	r3, #4
 8003608:	bf28      	it	cs
 800360a:	2304      	movcs	r3, #4
 800360c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	3304      	adds	r3, #4
 8003612:	2b06      	cmp	r3, #6
 8003614:	d902      	bls.n	800361c <NVIC_EncodePriority+0x30>
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	3b03      	subs	r3, #3
 800361a:	e000      	b.n	800361e <NVIC_EncodePriority+0x32>
 800361c:	2300      	movs	r3, #0
 800361e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003620:	f04f 32ff 	mov.w	r2, #4294967295
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	fa02 f303 	lsl.w	r3, r2, r3
 800362a:	43da      	mvns	r2, r3
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	401a      	ands	r2, r3
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003634:	f04f 31ff 	mov.w	r1, #4294967295
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	fa01 f303 	lsl.w	r3, r1, r3
 800363e:	43d9      	mvns	r1, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003644:	4313      	orrs	r3, r2
         );
}
 8003646:	4618      	mov	r0, r3
 8003648:	3724      	adds	r7, #36	; 0x24
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
	...

08003654 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3b01      	subs	r3, #1
 8003660:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003664:	d301      	bcc.n	800366a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003666:	2301      	movs	r3, #1
 8003668:	e00f      	b.n	800368a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800366a:	4a0a      	ldr	r2, [pc, #40]	; (8003694 <SysTick_Config+0x40>)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	3b01      	subs	r3, #1
 8003670:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003672:	210f      	movs	r1, #15
 8003674:	f04f 30ff 	mov.w	r0, #4294967295
 8003678:	f7ff ff8e 	bl	8003598 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800367c:	4b05      	ldr	r3, [pc, #20]	; (8003694 <SysTick_Config+0x40>)
 800367e:	2200      	movs	r2, #0
 8003680:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003682:	4b04      	ldr	r3, [pc, #16]	; (8003694 <SysTick_Config+0x40>)
 8003684:	2207      	movs	r2, #7
 8003686:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	e000e010 	.word	0xe000e010

08003698 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f7ff ff29 	bl	80034f8 <__NVIC_SetPriorityGrouping>
}
 80036a6:	bf00      	nop
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b086      	sub	sp, #24
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	4603      	mov	r3, r0
 80036b6:	60b9      	str	r1, [r7, #8]
 80036b8:	607a      	str	r2, [r7, #4]
 80036ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036bc:	2300      	movs	r3, #0
 80036be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036c0:	f7ff ff3e 	bl	8003540 <__NVIC_GetPriorityGrouping>
 80036c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	68b9      	ldr	r1, [r7, #8]
 80036ca:	6978      	ldr	r0, [r7, #20]
 80036cc:	f7ff ff8e 	bl	80035ec <NVIC_EncodePriority>
 80036d0:	4602      	mov	r2, r0
 80036d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036d6:	4611      	mov	r1, r2
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff ff5d 	bl	8003598 <__NVIC_SetPriority>
}
 80036de:	bf00      	nop
 80036e0:	3718      	adds	r7, #24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b082      	sub	sp, #8
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	4603      	mov	r3, r0
 80036ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff ff31 	bl	800355c <__NVIC_EnableIRQ>
}
 80036fa:	bf00      	nop
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b082      	sub	sp, #8
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7ff ffa2 	bl	8003654 <SysTick_Config>
 8003710:	4603      	mov	r3, r0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
	...

0800371c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800371c:	b480      	push	{r7}
 800371e:	b089      	sub	sp, #36	; 0x24
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003726:	2300      	movs	r3, #0
 8003728:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800372a:	2300      	movs	r3, #0
 800372c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800372e:	2300      	movs	r3, #0
 8003730:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003732:	2300      	movs	r3, #0
 8003734:	61fb      	str	r3, [r7, #28]
 8003736:	e16b      	b.n	8003a10 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003738:	2201      	movs	r2, #1
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	4013      	ands	r3, r2
 800374a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	429a      	cmp	r2, r3
 8003752:	f040 815a 	bne.w	8003a0a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f003 0303 	and.w	r3, r3, #3
 800375e:	2b01      	cmp	r3, #1
 8003760:	d005      	beq.n	800376e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800376a:	2b02      	cmp	r3, #2
 800376c:	d130      	bne.n	80037d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	2203      	movs	r2, #3
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	43db      	mvns	r3, r3
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	4013      	ands	r3, r2
 8003784:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	68da      	ldr	r2, [r3, #12]
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	fa02 f303 	lsl.w	r3, r2, r3
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	4313      	orrs	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037a4:	2201      	movs	r2, #1
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	43db      	mvns	r3, r3
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	4013      	ands	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	091b      	lsrs	r3, r3, #4
 80037ba:	f003 0201 	and.w	r2, r3, #1
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f003 0303 	and.w	r3, r3, #3
 80037d8:	2b03      	cmp	r3, #3
 80037da:	d017      	beq.n	800380c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	2203      	movs	r2, #3
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	43db      	mvns	r3, r3
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	4013      	ands	r3, r2
 80037f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	4313      	orrs	r3, r2
 8003804:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f003 0303 	and.w	r3, r3, #3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d123      	bne.n	8003860 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	08da      	lsrs	r2, r3, #3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	3208      	adds	r2, #8
 8003820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003824:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	220f      	movs	r2, #15
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	43db      	mvns	r3, r3
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	4013      	ands	r3, r2
 800383a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	691a      	ldr	r2, [r3, #16]
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	f003 0307 	and.w	r3, r3, #7
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	4313      	orrs	r3, r2
 8003850:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	08da      	lsrs	r2, r3, #3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	3208      	adds	r2, #8
 800385a:	69b9      	ldr	r1, [r7, #24]
 800385c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	2203      	movs	r2, #3
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	43db      	mvns	r3, r3
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	4013      	ands	r3, r2
 8003876:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f003 0203 	and.w	r2, r3, #3
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	fa02 f303 	lsl.w	r3, r2, r3
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	4313      	orrs	r3, r2
 800388c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 80b4 	beq.w	8003a0a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038a2:	2300      	movs	r3, #0
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	4b60      	ldr	r3, [pc, #384]	; (8003a28 <HAL_GPIO_Init+0x30c>)
 80038a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038aa:	4a5f      	ldr	r2, [pc, #380]	; (8003a28 <HAL_GPIO_Init+0x30c>)
 80038ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038b0:	6453      	str	r3, [r2, #68]	; 0x44
 80038b2:	4b5d      	ldr	r3, [pc, #372]	; (8003a28 <HAL_GPIO_Init+0x30c>)
 80038b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038be:	4a5b      	ldr	r2, [pc, #364]	; (8003a2c <HAL_GPIO_Init+0x310>)
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	089b      	lsrs	r3, r3, #2
 80038c4:	3302      	adds	r3, #2
 80038c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	f003 0303 	and.w	r3, r3, #3
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	220f      	movs	r2, #15
 80038d6:	fa02 f303 	lsl.w	r3, r2, r3
 80038da:	43db      	mvns	r3, r3
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	4013      	ands	r3, r2
 80038e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a52      	ldr	r2, [pc, #328]	; (8003a30 <HAL_GPIO_Init+0x314>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d02b      	beq.n	8003942 <HAL_GPIO_Init+0x226>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a51      	ldr	r2, [pc, #324]	; (8003a34 <HAL_GPIO_Init+0x318>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d025      	beq.n	800393e <HAL_GPIO_Init+0x222>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a50      	ldr	r2, [pc, #320]	; (8003a38 <HAL_GPIO_Init+0x31c>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d01f      	beq.n	800393a <HAL_GPIO_Init+0x21e>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a4f      	ldr	r2, [pc, #316]	; (8003a3c <HAL_GPIO_Init+0x320>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d019      	beq.n	8003936 <HAL_GPIO_Init+0x21a>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a4e      	ldr	r2, [pc, #312]	; (8003a40 <HAL_GPIO_Init+0x324>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d013      	beq.n	8003932 <HAL_GPIO_Init+0x216>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a4d      	ldr	r2, [pc, #308]	; (8003a44 <HAL_GPIO_Init+0x328>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d00d      	beq.n	800392e <HAL_GPIO_Init+0x212>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a4c      	ldr	r2, [pc, #304]	; (8003a48 <HAL_GPIO_Init+0x32c>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d007      	beq.n	800392a <HAL_GPIO_Init+0x20e>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a4b      	ldr	r2, [pc, #300]	; (8003a4c <HAL_GPIO_Init+0x330>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d101      	bne.n	8003926 <HAL_GPIO_Init+0x20a>
 8003922:	2307      	movs	r3, #7
 8003924:	e00e      	b.n	8003944 <HAL_GPIO_Init+0x228>
 8003926:	2308      	movs	r3, #8
 8003928:	e00c      	b.n	8003944 <HAL_GPIO_Init+0x228>
 800392a:	2306      	movs	r3, #6
 800392c:	e00a      	b.n	8003944 <HAL_GPIO_Init+0x228>
 800392e:	2305      	movs	r3, #5
 8003930:	e008      	b.n	8003944 <HAL_GPIO_Init+0x228>
 8003932:	2304      	movs	r3, #4
 8003934:	e006      	b.n	8003944 <HAL_GPIO_Init+0x228>
 8003936:	2303      	movs	r3, #3
 8003938:	e004      	b.n	8003944 <HAL_GPIO_Init+0x228>
 800393a:	2302      	movs	r3, #2
 800393c:	e002      	b.n	8003944 <HAL_GPIO_Init+0x228>
 800393e:	2301      	movs	r3, #1
 8003940:	e000      	b.n	8003944 <HAL_GPIO_Init+0x228>
 8003942:	2300      	movs	r3, #0
 8003944:	69fa      	ldr	r2, [r7, #28]
 8003946:	f002 0203 	and.w	r2, r2, #3
 800394a:	0092      	lsls	r2, r2, #2
 800394c:	4093      	lsls	r3, r2
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	4313      	orrs	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003954:	4935      	ldr	r1, [pc, #212]	; (8003a2c <HAL_GPIO_Init+0x310>)
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	089b      	lsrs	r3, r3, #2
 800395a:	3302      	adds	r3, #2
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003962:	4b3b      	ldr	r3, [pc, #236]	; (8003a50 <HAL_GPIO_Init+0x334>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	43db      	mvns	r3, r3
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	4013      	ands	r3, r2
 8003970:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d003      	beq.n	8003986 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	4313      	orrs	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003986:	4a32      	ldr	r2, [pc, #200]	; (8003a50 <HAL_GPIO_Init+0x334>)
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800398c:	4b30      	ldr	r3, [pc, #192]	; (8003a50 <HAL_GPIO_Init+0x334>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	43db      	mvns	r3, r3
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4013      	ands	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039b0:	4a27      	ldr	r2, [pc, #156]	; (8003a50 <HAL_GPIO_Init+0x334>)
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039b6:	4b26      	ldr	r3, [pc, #152]	; (8003a50 <HAL_GPIO_Init+0x334>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	43db      	mvns	r3, r3
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	4013      	ands	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039da:	4a1d      	ldr	r2, [pc, #116]	; (8003a50 <HAL_GPIO_Init+0x334>)
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039e0:	4b1b      	ldr	r3, [pc, #108]	; (8003a50 <HAL_GPIO_Init+0x334>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	43db      	mvns	r3, r3
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	4013      	ands	r3, r2
 80039ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a04:	4a12      	ldr	r2, [pc, #72]	; (8003a50 <HAL_GPIO_Init+0x334>)
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	61fb      	str	r3, [r7, #28]
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	2b0f      	cmp	r3, #15
 8003a14:	f67f ae90 	bls.w	8003738 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a18:	bf00      	nop
 8003a1a:	bf00      	nop
 8003a1c:	3724      	adds	r7, #36	; 0x24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	40023800 	.word	0x40023800
 8003a2c:	40013800 	.word	0x40013800
 8003a30:	40020000 	.word	0x40020000
 8003a34:	40020400 	.word	0x40020400
 8003a38:	40020800 	.word	0x40020800
 8003a3c:	40020c00 	.word	0x40020c00
 8003a40:	40021000 	.word	0x40021000
 8003a44:	40021400 	.word	0x40021400
 8003a48:	40021800 	.word	0x40021800
 8003a4c:	40021c00 	.word	0x40021c00
 8003a50:	40013c00 	.word	0x40013c00

08003a54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	807b      	strh	r3, [r7, #2]
 8003a60:	4613      	mov	r3, r2
 8003a62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a64:	787b      	ldrb	r3, [r7, #1]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a6a:	887a      	ldrh	r2, [r7, #2]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a70:	e003      	b.n	8003a7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a72:	887b      	ldrh	r3, [r7, #2]
 8003a74:	041a      	lsls	r2, r3, #16
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	619a      	str	r2, [r3, #24]
}
 8003a7a:	bf00      	nop
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
	...

08003a88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e267      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d075      	beq.n	8003b92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003aa6:	4b88      	ldr	r3, [pc, #544]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 030c 	and.w	r3, r3, #12
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	d00c      	beq.n	8003acc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ab2:	4b85      	ldr	r3, [pc, #532]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003aba:	2b08      	cmp	r3, #8
 8003abc:	d112      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003abe:	4b82      	ldr	r3, [pc, #520]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ac6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aca:	d10b      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003acc:	4b7e      	ldr	r3, [pc, #504]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d05b      	beq.n	8003b90 <HAL_RCC_OscConfig+0x108>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d157      	bne.n	8003b90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e242      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aec:	d106      	bne.n	8003afc <HAL_RCC_OscConfig+0x74>
 8003aee:	4b76      	ldr	r3, [pc, #472]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a75      	ldr	r2, [pc, #468]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	e01d      	b.n	8003b38 <HAL_RCC_OscConfig+0xb0>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b04:	d10c      	bne.n	8003b20 <HAL_RCC_OscConfig+0x98>
 8003b06:	4b70      	ldr	r3, [pc, #448]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a6f      	ldr	r2, [pc, #444]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003b0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b10:	6013      	str	r3, [r2, #0]
 8003b12:	4b6d      	ldr	r3, [pc, #436]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a6c      	ldr	r2, [pc, #432]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	e00b      	b.n	8003b38 <HAL_RCC_OscConfig+0xb0>
 8003b20:	4b69      	ldr	r3, [pc, #420]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a68      	ldr	r2, [pc, #416]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b2a:	6013      	str	r3, [r2, #0]
 8003b2c:	4b66      	ldr	r3, [pc, #408]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a65      	ldr	r2, [pc, #404]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d013      	beq.n	8003b68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b40:	f7fe fa86 	bl	8002050 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b48:	f7fe fa82 	bl	8002050 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b64      	cmp	r3, #100	; 0x64
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e207      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b5a:	4b5b      	ldr	r3, [pc, #364]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0f0      	beq.n	8003b48 <HAL_RCC_OscConfig+0xc0>
 8003b66:	e014      	b.n	8003b92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b68:	f7fe fa72 	bl	8002050 <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b70:	f7fe fa6e 	bl	8002050 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b64      	cmp	r3, #100	; 0x64
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e1f3      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b82:	4b51      	ldr	r3, [pc, #324]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1f0      	bne.n	8003b70 <HAL_RCC_OscConfig+0xe8>
 8003b8e:	e000      	b.n	8003b92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d063      	beq.n	8003c66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b9e:	4b4a      	ldr	r3, [pc, #296]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 030c 	and.w	r3, r3, #12
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00b      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003baa:	4b47      	ldr	r3, [pc, #284]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bb2:	2b08      	cmp	r3, #8
 8003bb4:	d11c      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bb6:	4b44      	ldr	r3, [pc, #272]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d116      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bc2:	4b41      	ldr	r3, [pc, #260]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d005      	beq.n	8003bda <HAL_RCC_OscConfig+0x152>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d001      	beq.n	8003bda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e1c7      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bda:	4b3b      	ldr	r3, [pc, #236]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	4937      	ldr	r1, [pc, #220]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bee:	e03a      	b.n	8003c66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d020      	beq.n	8003c3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bf8:	4b34      	ldr	r3, [pc, #208]	; (8003ccc <HAL_RCC_OscConfig+0x244>)
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfe:	f7fe fa27 	bl	8002050 <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c04:	e008      	b.n	8003c18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c06:	f7fe fa23 	bl	8002050 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e1a8      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c18:	4b2b      	ldr	r3, [pc, #172]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0f0      	beq.n	8003c06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c24:	4b28      	ldr	r3, [pc, #160]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	00db      	lsls	r3, r3, #3
 8003c32:	4925      	ldr	r1, [pc, #148]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	600b      	str	r3, [r1, #0]
 8003c38:	e015      	b.n	8003c66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c3a:	4b24      	ldr	r3, [pc, #144]	; (8003ccc <HAL_RCC_OscConfig+0x244>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c40:	f7fe fa06 	bl	8002050 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c48:	f7fe fa02 	bl	8002050 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e187      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c5a:	4b1b      	ldr	r3, [pc, #108]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1f0      	bne.n	8003c48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d036      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d016      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c7a:	4b15      	ldr	r3, [pc, #84]	; (8003cd0 <HAL_RCC_OscConfig+0x248>)
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c80:	f7fe f9e6 	bl	8002050 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c88:	f7fe f9e2 	bl	8002050 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e167      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c9a:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <HAL_RCC_OscConfig+0x240>)
 8003c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0f0      	beq.n	8003c88 <HAL_RCC_OscConfig+0x200>
 8003ca6:	e01b      	b.n	8003ce0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ca8:	4b09      	ldr	r3, [pc, #36]	; (8003cd0 <HAL_RCC_OscConfig+0x248>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cae:	f7fe f9cf 	bl	8002050 <HAL_GetTick>
 8003cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cb4:	e00e      	b.n	8003cd4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cb6:	f7fe f9cb 	bl	8002050 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d907      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e150      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	42470000 	.word	0x42470000
 8003cd0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cd4:	4b88      	ldr	r3, [pc, #544]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003cd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1ea      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 8097 	beq.w	8003e1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cf2:	4b81      	ldr	r3, [pc, #516]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10f      	bne.n	8003d1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cfe:	2300      	movs	r3, #0
 8003d00:	60bb      	str	r3, [r7, #8]
 8003d02:	4b7d      	ldr	r3, [pc, #500]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	4a7c      	ldr	r2, [pc, #496]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d0e:	4b7a      	ldr	r3, [pc, #488]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d16:	60bb      	str	r3, [r7, #8]
 8003d18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d1e:	4b77      	ldr	r3, [pc, #476]	; (8003efc <HAL_RCC_OscConfig+0x474>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d118      	bne.n	8003d5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d2a:	4b74      	ldr	r3, [pc, #464]	; (8003efc <HAL_RCC_OscConfig+0x474>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a73      	ldr	r2, [pc, #460]	; (8003efc <HAL_RCC_OscConfig+0x474>)
 8003d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d36:	f7fe f98b 	bl	8002050 <HAL_GetTick>
 8003d3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d3c:	e008      	b.n	8003d50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d3e:	f7fe f987 	bl	8002050 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e10c      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d50:	4b6a      	ldr	r3, [pc, #424]	; (8003efc <HAL_RCC_OscConfig+0x474>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0f0      	beq.n	8003d3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d106      	bne.n	8003d72 <HAL_RCC_OscConfig+0x2ea>
 8003d64:	4b64      	ldr	r3, [pc, #400]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d68:	4a63      	ldr	r2, [pc, #396]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003d6a:	f043 0301 	orr.w	r3, r3, #1
 8003d6e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d70:	e01c      	b.n	8003dac <HAL_RCC_OscConfig+0x324>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	2b05      	cmp	r3, #5
 8003d78:	d10c      	bne.n	8003d94 <HAL_RCC_OscConfig+0x30c>
 8003d7a:	4b5f      	ldr	r3, [pc, #380]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7e:	4a5e      	ldr	r2, [pc, #376]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003d80:	f043 0304 	orr.w	r3, r3, #4
 8003d84:	6713      	str	r3, [r2, #112]	; 0x70
 8003d86:	4b5c      	ldr	r3, [pc, #368]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8a:	4a5b      	ldr	r2, [pc, #364]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003d8c:	f043 0301 	orr.w	r3, r3, #1
 8003d90:	6713      	str	r3, [r2, #112]	; 0x70
 8003d92:	e00b      	b.n	8003dac <HAL_RCC_OscConfig+0x324>
 8003d94:	4b58      	ldr	r3, [pc, #352]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d98:	4a57      	ldr	r2, [pc, #348]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003d9a:	f023 0301 	bic.w	r3, r3, #1
 8003d9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003da0:	4b55      	ldr	r3, [pc, #340]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da4:	4a54      	ldr	r2, [pc, #336]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003da6:	f023 0304 	bic.w	r3, r3, #4
 8003daa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d015      	beq.n	8003de0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db4:	f7fe f94c 	bl	8002050 <HAL_GetTick>
 8003db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dba:	e00a      	b.n	8003dd2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dbc:	f7fe f948 	bl	8002050 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e0cb      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd2:	4b49      	ldr	r3, [pc, #292]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d0ee      	beq.n	8003dbc <HAL_RCC_OscConfig+0x334>
 8003dde:	e014      	b.n	8003e0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003de0:	f7fe f936 	bl	8002050 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003de6:	e00a      	b.n	8003dfe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003de8:	f7fe f932 	bl	8002050 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e0b5      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dfe:	4b3e      	ldr	r3, [pc, #248]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1ee      	bne.n	8003de8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e0a:	7dfb      	ldrb	r3, [r7, #23]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d105      	bne.n	8003e1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e10:	4b39      	ldr	r3, [pc, #228]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e14:	4a38      	ldr	r2, [pc, #224]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003e16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 80a1 	beq.w	8003f68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e26:	4b34      	ldr	r3, [pc, #208]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 030c 	and.w	r3, r3, #12
 8003e2e:	2b08      	cmp	r3, #8
 8003e30:	d05c      	beq.n	8003eec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d141      	bne.n	8003ebe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e3a:	4b31      	ldr	r3, [pc, #196]	; (8003f00 <HAL_RCC_OscConfig+0x478>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e40:	f7fe f906 	bl	8002050 <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e48:	f7fe f902 	bl	8002050 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e087      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e5a:	4b27      	ldr	r3, [pc, #156]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1f0      	bne.n	8003e48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	69da      	ldr	r2, [r3, #28]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e74:	019b      	lsls	r3, r3, #6
 8003e76:	431a      	orrs	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7c:	085b      	lsrs	r3, r3, #1
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	041b      	lsls	r3, r3, #16
 8003e82:	431a      	orrs	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e88:	061b      	lsls	r3, r3, #24
 8003e8a:	491b      	ldr	r1, [pc, #108]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e90:	4b1b      	ldr	r3, [pc, #108]	; (8003f00 <HAL_RCC_OscConfig+0x478>)
 8003e92:	2201      	movs	r2, #1
 8003e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e96:	f7fe f8db 	bl	8002050 <HAL_GetTick>
 8003e9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e9c:	e008      	b.n	8003eb0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e9e:	f7fe f8d7 	bl	8002050 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e05c      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eb0:	4b11      	ldr	r3, [pc, #68]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d0f0      	beq.n	8003e9e <HAL_RCC_OscConfig+0x416>
 8003ebc:	e054      	b.n	8003f68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ebe:	4b10      	ldr	r3, [pc, #64]	; (8003f00 <HAL_RCC_OscConfig+0x478>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec4:	f7fe f8c4 	bl	8002050 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ecc:	f7fe f8c0 	bl	8002050 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e045      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ede:	4b06      	ldr	r3, [pc, #24]	; (8003ef8 <HAL_RCC_OscConfig+0x470>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1f0      	bne.n	8003ecc <HAL_RCC_OscConfig+0x444>
 8003eea:	e03d      	b.n	8003f68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d107      	bne.n	8003f04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e038      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
 8003ef8:	40023800 	.word	0x40023800
 8003efc:	40007000 	.word	0x40007000
 8003f00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f04:	4b1b      	ldr	r3, [pc, #108]	; (8003f74 <HAL_RCC_OscConfig+0x4ec>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d028      	beq.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d121      	bne.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d11a      	bne.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f34:	4013      	ands	r3, r2
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d111      	bne.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4a:	085b      	lsrs	r3, r3, #1
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d107      	bne.n	8003f64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d001      	beq.n	8003f68 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e000      	b.n	8003f6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	40023800 	.word	0x40023800

08003f78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d101      	bne.n	8003f8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e0cc      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f8c:	4b68      	ldr	r3, [pc, #416]	; (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d90c      	bls.n	8003fb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f9a:	4b65      	ldr	r3, [pc, #404]	; (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa2:	4b63      	ldr	r3, [pc, #396]	; (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0307 	and.w	r3, r3, #7
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d001      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e0b8      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d020      	beq.n	8004002 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d005      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fcc:	4b59      	ldr	r3, [pc, #356]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	4a58      	ldr	r2, [pc, #352]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0308 	and.w	r3, r3, #8
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d005      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fe4:	4b53      	ldr	r3, [pc, #332]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	4a52      	ldr	r2, [pc, #328]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003fea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ff0:	4b50      	ldr	r3, [pc, #320]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	494d      	ldr	r1, [pc, #308]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d044      	beq.n	8004098 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d107      	bne.n	8004026 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004016:	4b47      	ldr	r3, [pc, #284]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d119      	bne.n	8004056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e07f      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b02      	cmp	r3, #2
 800402c:	d003      	beq.n	8004036 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004032:	2b03      	cmp	r3, #3
 8004034:	d107      	bne.n	8004046 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004036:	4b3f      	ldr	r3, [pc, #252]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d109      	bne.n	8004056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e06f      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004046:	4b3b      	ldr	r3, [pc, #236]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e067      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004056:	4b37      	ldr	r3, [pc, #220]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f023 0203 	bic.w	r2, r3, #3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	4934      	ldr	r1, [pc, #208]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004064:	4313      	orrs	r3, r2
 8004066:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004068:	f7fd fff2 	bl	8002050 <HAL_GetTick>
 800406c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800406e:	e00a      	b.n	8004086 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004070:	f7fd ffee 	bl	8002050 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	f241 3288 	movw	r2, #5000	; 0x1388
 800407e:	4293      	cmp	r3, r2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e04f      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004086:	4b2b      	ldr	r3, [pc, #172]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 020c 	and.w	r2, r3, #12
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	429a      	cmp	r2, r3
 8004096:	d1eb      	bne.n	8004070 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004098:	4b25      	ldr	r3, [pc, #148]	; (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0307 	and.w	r3, r3, #7
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d20c      	bcs.n	80040c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a6:	4b22      	ldr	r3, [pc, #136]	; (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	b2d2      	uxtb	r2, r2
 80040ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ae:	4b20      	ldr	r3, [pc, #128]	; (8004130 <HAL_RCC_ClockConfig+0x1b8>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0307 	and.w	r3, r3, #7
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d001      	beq.n	80040c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e032      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d008      	beq.n	80040de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040cc:	4b19      	ldr	r3, [pc, #100]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	4916      	ldr	r1, [pc, #88]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0308 	and.w	r3, r3, #8
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d009      	beq.n	80040fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040ea:	4b12      	ldr	r3, [pc, #72]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	490e      	ldr	r1, [pc, #56]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040fe:	f000 f821 	bl	8004144 <HAL_RCC_GetSysClockFreq>
 8004102:	4602      	mov	r2, r0
 8004104:	4b0b      	ldr	r3, [pc, #44]	; (8004134 <HAL_RCC_ClockConfig+0x1bc>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	091b      	lsrs	r3, r3, #4
 800410a:	f003 030f 	and.w	r3, r3, #15
 800410e:	490a      	ldr	r1, [pc, #40]	; (8004138 <HAL_RCC_ClockConfig+0x1c0>)
 8004110:	5ccb      	ldrb	r3, [r1, r3]
 8004112:	fa22 f303 	lsr.w	r3, r2, r3
 8004116:	4a09      	ldr	r2, [pc, #36]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 8004118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800411a:	4b09      	ldr	r3, [pc, #36]	; (8004140 <HAL_RCC_ClockConfig+0x1c8>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4618      	mov	r0, r3
 8004120:	f7fd ff52 	bl	8001fc8 <HAL_InitTick>

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	40023c00 	.word	0x40023c00
 8004134:	40023800 	.word	0x40023800
 8004138:	0800693c 	.word	0x0800693c
 800413c:	20000008 	.word	0x20000008
 8004140:	2000000c 	.word	0x2000000c

08004144 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004144:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004148:	b090      	sub	sp, #64	; 0x40
 800414a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800414c:	2300      	movs	r3, #0
 800414e:	637b      	str	r3, [r7, #52]	; 0x34
 8004150:	2300      	movs	r3, #0
 8004152:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004154:	2300      	movs	r3, #0
 8004156:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004158:	2300      	movs	r3, #0
 800415a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800415c:	4b59      	ldr	r3, [pc, #356]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f003 030c 	and.w	r3, r3, #12
 8004164:	2b08      	cmp	r3, #8
 8004166:	d00d      	beq.n	8004184 <HAL_RCC_GetSysClockFreq+0x40>
 8004168:	2b08      	cmp	r3, #8
 800416a:	f200 80a1 	bhi.w	80042b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <HAL_RCC_GetSysClockFreq+0x34>
 8004172:	2b04      	cmp	r3, #4
 8004174:	d003      	beq.n	800417e <HAL_RCC_GetSysClockFreq+0x3a>
 8004176:	e09b      	b.n	80042b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004178:	4b53      	ldr	r3, [pc, #332]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800417a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800417c:	e09b      	b.n	80042b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800417e:	4b53      	ldr	r3, [pc, #332]	; (80042cc <HAL_RCC_GetSysClockFreq+0x188>)
 8004180:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004182:	e098      	b.n	80042b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004184:	4b4f      	ldr	r3, [pc, #316]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800418c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800418e:	4b4d      	ldr	r3, [pc, #308]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d028      	beq.n	80041ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800419a:	4b4a      	ldr	r3, [pc, #296]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	099b      	lsrs	r3, r3, #6
 80041a0:	2200      	movs	r2, #0
 80041a2:	623b      	str	r3, [r7, #32]
 80041a4:	627a      	str	r2, [r7, #36]	; 0x24
 80041a6:	6a3b      	ldr	r3, [r7, #32]
 80041a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80041ac:	2100      	movs	r1, #0
 80041ae:	4b47      	ldr	r3, [pc, #284]	; (80042cc <HAL_RCC_GetSysClockFreq+0x188>)
 80041b0:	fb03 f201 	mul.w	r2, r3, r1
 80041b4:	2300      	movs	r3, #0
 80041b6:	fb00 f303 	mul.w	r3, r0, r3
 80041ba:	4413      	add	r3, r2
 80041bc:	4a43      	ldr	r2, [pc, #268]	; (80042cc <HAL_RCC_GetSysClockFreq+0x188>)
 80041be:	fba0 1202 	umull	r1, r2, r0, r2
 80041c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041c4:	460a      	mov	r2, r1
 80041c6:	62ba      	str	r2, [r7, #40]	; 0x28
 80041c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041ca:	4413      	add	r3, r2
 80041cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041d0:	2200      	movs	r2, #0
 80041d2:	61bb      	str	r3, [r7, #24]
 80041d4:	61fa      	str	r2, [r7, #28]
 80041d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80041de:	f7fc f847 	bl	8000270 <__aeabi_uldivmod>
 80041e2:	4602      	mov	r2, r0
 80041e4:	460b      	mov	r3, r1
 80041e6:	4613      	mov	r3, r2
 80041e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041ea:	e053      	b.n	8004294 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041ec:	4b35      	ldr	r3, [pc, #212]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	099b      	lsrs	r3, r3, #6
 80041f2:	2200      	movs	r2, #0
 80041f4:	613b      	str	r3, [r7, #16]
 80041f6:	617a      	str	r2, [r7, #20]
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80041fe:	f04f 0b00 	mov.w	fp, #0
 8004202:	4652      	mov	r2, sl
 8004204:	465b      	mov	r3, fp
 8004206:	f04f 0000 	mov.w	r0, #0
 800420a:	f04f 0100 	mov.w	r1, #0
 800420e:	0159      	lsls	r1, r3, #5
 8004210:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004214:	0150      	lsls	r0, r2, #5
 8004216:	4602      	mov	r2, r0
 8004218:	460b      	mov	r3, r1
 800421a:	ebb2 080a 	subs.w	r8, r2, sl
 800421e:	eb63 090b 	sbc.w	r9, r3, fp
 8004222:	f04f 0200 	mov.w	r2, #0
 8004226:	f04f 0300 	mov.w	r3, #0
 800422a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800422e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004232:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004236:	ebb2 0408 	subs.w	r4, r2, r8
 800423a:	eb63 0509 	sbc.w	r5, r3, r9
 800423e:	f04f 0200 	mov.w	r2, #0
 8004242:	f04f 0300 	mov.w	r3, #0
 8004246:	00eb      	lsls	r3, r5, #3
 8004248:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800424c:	00e2      	lsls	r2, r4, #3
 800424e:	4614      	mov	r4, r2
 8004250:	461d      	mov	r5, r3
 8004252:	eb14 030a 	adds.w	r3, r4, sl
 8004256:	603b      	str	r3, [r7, #0]
 8004258:	eb45 030b 	adc.w	r3, r5, fp
 800425c:	607b      	str	r3, [r7, #4]
 800425e:	f04f 0200 	mov.w	r2, #0
 8004262:	f04f 0300 	mov.w	r3, #0
 8004266:	e9d7 4500 	ldrd	r4, r5, [r7]
 800426a:	4629      	mov	r1, r5
 800426c:	028b      	lsls	r3, r1, #10
 800426e:	4621      	mov	r1, r4
 8004270:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004274:	4621      	mov	r1, r4
 8004276:	028a      	lsls	r2, r1, #10
 8004278:	4610      	mov	r0, r2
 800427a:	4619      	mov	r1, r3
 800427c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800427e:	2200      	movs	r2, #0
 8004280:	60bb      	str	r3, [r7, #8]
 8004282:	60fa      	str	r2, [r7, #12]
 8004284:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004288:	f7fb fff2 	bl	8000270 <__aeabi_uldivmod>
 800428c:	4602      	mov	r2, r0
 800428e:	460b      	mov	r3, r1
 8004290:	4613      	mov	r3, r2
 8004292:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004294:	4b0b      	ldr	r3, [pc, #44]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	0c1b      	lsrs	r3, r3, #16
 800429a:	f003 0303 	and.w	r3, r3, #3
 800429e:	3301      	adds	r3, #1
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80042a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80042a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80042ae:	e002      	b.n	80042b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042b0:	4b05      	ldr	r3, [pc, #20]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80042b2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80042b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3740      	adds	r7, #64	; 0x40
 80042bc:	46bd      	mov	sp, r7
 80042be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042c2:	bf00      	nop
 80042c4:	40023800 	.word	0x40023800
 80042c8:	00f42400 	.word	0x00f42400
 80042cc:	017d7840 	.word	0x017d7840

080042d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e07b      	b.n	80043da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d108      	bne.n	80042fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042f2:	d009      	beq.n	8004308 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	61da      	str	r2, [r3, #28]
 80042fa:	e005      	b.n	8004308 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d106      	bne.n	8004328 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7fd fc16 	bl	8001b54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2202      	movs	r2, #2
 800432c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800433e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004350:	431a      	orrs	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800435a:	431a      	orrs	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	431a      	orrs	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	431a      	orrs	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004378:	431a      	orrs	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a1b      	ldr	r3, [r3, #32]
 8004388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800438c:	ea42 0103 	orr.w	r1, r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004394:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	430a      	orrs	r2, r1
 800439e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	0c1b      	lsrs	r3, r3, #16
 80043a6:	f003 0104 	and.w	r1, r3, #4
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	f003 0210 	and.w	r2, r3, #16
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	430a      	orrs	r2, r1
 80043b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	69da      	ldr	r2, [r3, #28]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b088      	sub	sp, #32
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	60f8      	str	r0, [r7, #12]
 80043ea:	60b9      	str	r1, [r7, #8]
 80043ec:	603b      	str	r3, [r7, #0]
 80043ee:	4613      	mov	r3, r2
 80043f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d101      	bne.n	8004404 <HAL_SPI_Transmit+0x22>
 8004400:	2302      	movs	r3, #2
 8004402:	e126      	b.n	8004652 <HAL_SPI_Transmit+0x270>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800440c:	f7fd fe20 	bl	8002050 <HAL_GetTick>
 8004410:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004412:	88fb      	ldrh	r3, [r7, #6]
 8004414:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b01      	cmp	r3, #1
 8004420:	d002      	beq.n	8004428 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004422:	2302      	movs	r3, #2
 8004424:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004426:	e10b      	b.n	8004640 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d002      	beq.n	8004434 <HAL_SPI_Transmit+0x52>
 800442e:	88fb      	ldrh	r3, [r7, #6]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d102      	bne.n	800443a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004438:	e102      	b.n	8004640 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2203      	movs	r2, #3
 800443e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	88fa      	ldrh	r2, [r7, #6]
 8004452:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	88fa      	ldrh	r2, [r7, #6]
 8004458:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004480:	d10f      	bne.n	80044a2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004490:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ac:	2b40      	cmp	r3, #64	; 0x40
 80044ae:	d007      	beq.n	80044c0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044c8:	d14b      	bne.n	8004562 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d002      	beq.n	80044d8 <HAL_SPI_Transmit+0xf6>
 80044d2:	8afb      	ldrh	r3, [r7, #22]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d13e      	bne.n	8004556 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044dc:	881a      	ldrh	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e8:	1c9a      	adds	r2, r3, #2
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80044fc:	e02b      	b.n	8004556 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b02      	cmp	r3, #2
 800450a:	d112      	bne.n	8004532 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004510:	881a      	ldrh	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451c:	1c9a      	adds	r2, r3, #2
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004526:	b29b      	uxth	r3, r3
 8004528:	3b01      	subs	r3, #1
 800452a:	b29a      	uxth	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004530:	e011      	b.n	8004556 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004532:	f7fd fd8d 	bl	8002050 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	683a      	ldr	r2, [r7, #0]
 800453e:	429a      	cmp	r2, r3
 8004540:	d803      	bhi.n	800454a <HAL_SPI_Transmit+0x168>
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004548:	d102      	bne.n	8004550 <HAL_SPI_Transmit+0x16e>
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d102      	bne.n	8004556 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004554:	e074      	b.n	8004640 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800455a:	b29b      	uxth	r3, r3
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1ce      	bne.n	80044fe <HAL_SPI_Transmit+0x11c>
 8004560:	e04c      	b.n	80045fc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d002      	beq.n	8004570 <HAL_SPI_Transmit+0x18e>
 800456a:	8afb      	ldrh	r3, [r7, #22]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d140      	bne.n	80045f2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	330c      	adds	r3, #12
 800457a:	7812      	ldrb	r2, [r2, #0]
 800457c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004582:	1c5a      	adds	r2, r3, #1
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800458c:	b29b      	uxth	r3, r3
 800458e:	3b01      	subs	r3, #1
 8004590:	b29a      	uxth	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004596:	e02c      	b.n	80045f2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d113      	bne.n	80045ce <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	330c      	adds	r3, #12
 80045b0:	7812      	ldrb	r2, [r2, #0]
 80045b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b8:	1c5a      	adds	r2, r3, #1
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	3b01      	subs	r3, #1
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	86da      	strh	r2, [r3, #54]	; 0x36
 80045cc:	e011      	b.n	80045f2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045ce:	f7fd fd3f 	bl	8002050 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d803      	bhi.n	80045e6 <HAL_SPI_Transmit+0x204>
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e4:	d102      	bne.n	80045ec <HAL_SPI_Transmit+0x20a>
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d102      	bne.n	80045f2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80045f0:	e026      	b.n	8004640 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1cd      	bne.n	8004598 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	6839      	ldr	r1, [r7, #0]
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f000 fbd9 	bl	8004db8 <SPI_EndRxTxTransaction>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d002      	beq.n	8004612 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2220      	movs	r2, #32
 8004610:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10a      	bne.n	8004630 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800461a:	2300      	movs	r3, #0
 800461c:	613b      	str	r3, [r7, #16]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	613b      	str	r3, [r7, #16]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	613b      	str	r3, [r7, #16]
 800462e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004634:	2b00      	cmp	r3, #0
 8004636:	d002      	beq.n	800463e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	77fb      	strb	r3, [r7, #31]
 800463c:	e000      	b.n	8004640 <HAL_SPI_Transmit+0x25e>
  }

error:
 800463e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004650:	7ffb      	ldrb	r3, [r7, #31]
}
 8004652:	4618      	mov	r0, r3
 8004654:	3720      	adds	r7, #32
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b088      	sub	sp, #32
 800465e:	af02      	add	r7, sp, #8
 8004660:	60f8      	str	r0, [r7, #12]
 8004662:	60b9      	str	r1, [r7, #8]
 8004664:	603b      	str	r3, [r7, #0]
 8004666:	4613      	mov	r3, r2
 8004668:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800466a:	2300      	movs	r3, #0
 800466c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004676:	d112      	bne.n	800469e <HAL_SPI_Receive+0x44>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d10e      	bne.n	800469e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2204      	movs	r2, #4
 8004684:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004688:	88fa      	ldrh	r2, [r7, #6]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	9300      	str	r3, [sp, #0]
 800468e:	4613      	mov	r3, r2
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	68b9      	ldr	r1, [r7, #8]
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 f8f1 	bl	800487c <HAL_SPI_TransmitReceive>
 800469a:	4603      	mov	r3, r0
 800469c:	e0ea      	b.n	8004874 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d101      	bne.n	80046ac <HAL_SPI_Receive+0x52>
 80046a8:	2302      	movs	r3, #2
 80046aa:	e0e3      	b.n	8004874 <HAL_SPI_Receive+0x21a>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046b4:	f7fd fccc 	bl	8002050 <HAL_GetTick>
 80046b8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d002      	beq.n	80046cc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80046c6:	2302      	movs	r3, #2
 80046c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80046ca:	e0ca      	b.n	8004862 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d002      	beq.n	80046d8 <HAL_SPI_Receive+0x7e>
 80046d2:	88fb      	ldrh	r3, [r7, #6]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d102      	bne.n	80046de <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	75fb      	strb	r3, [r7, #23]
    goto error;
 80046dc:	e0c1      	b.n	8004862 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2204      	movs	r2, #4
 80046e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	68ba      	ldr	r2, [r7, #8]
 80046f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	88fa      	ldrh	r2, [r7, #6]
 80046f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	88fa      	ldrh	r2, [r7, #6]
 80046fc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004724:	d10f      	bne.n	8004746 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004734:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004744:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004750:	2b40      	cmp	r3, #64	; 0x40
 8004752:	d007      	beq.n	8004764 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004762:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d162      	bne.n	8004832 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800476c:	e02e      	b.n	80047cc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	2b01      	cmp	r3, #1
 800477a:	d115      	bne.n	80047a8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f103 020c 	add.w	r2, r3, #12
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004788:	7812      	ldrb	r2, [r2, #0]
 800478a:	b2d2      	uxtb	r2, r2
 800478c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004792:	1c5a      	adds	r2, r3, #1
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800479c:	b29b      	uxth	r3, r3
 800479e:	3b01      	subs	r3, #1
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047a6:	e011      	b.n	80047cc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047a8:	f7fd fc52 	bl	8002050 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d803      	bhi.n	80047c0 <HAL_SPI_Receive+0x166>
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047be:	d102      	bne.n	80047c6 <HAL_SPI_Receive+0x16c>
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d102      	bne.n	80047cc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80047ca:	e04a      	b.n	8004862 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1cb      	bne.n	800476e <HAL_SPI_Receive+0x114>
 80047d6:	e031      	b.n	800483c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d113      	bne.n	800480e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68da      	ldr	r2, [r3, #12]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f0:	b292      	uxth	r2, r2
 80047f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f8:	1c9a      	adds	r2, r3, #2
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004802:	b29b      	uxth	r3, r3
 8004804:	3b01      	subs	r3, #1
 8004806:	b29a      	uxth	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800480c:	e011      	b.n	8004832 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800480e:	f7fd fc1f 	bl	8002050 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	429a      	cmp	r2, r3
 800481c:	d803      	bhi.n	8004826 <HAL_SPI_Receive+0x1cc>
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004824:	d102      	bne.n	800482c <HAL_SPI_Receive+0x1d2>
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d102      	bne.n	8004832 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004830:	e017      	b.n	8004862 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004836:	b29b      	uxth	r3, r3
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1cd      	bne.n	80047d8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	6839      	ldr	r1, [r7, #0]
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	f000 fa53 	bl	8004cec <SPI_EndRxTransaction>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d002      	beq.n	8004852 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2220      	movs	r2, #32
 8004850:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004856:	2b00      	cmp	r3, #0
 8004858:	d002      	beq.n	8004860 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	75fb      	strb	r3, [r7, #23]
 800485e:	e000      	b.n	8004862 <HAL_SPI_Receive+0x208>
  }

error :
 8004860:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004872:	7dfb      	ldrb	r3, [r7, #23]
}
 8004874:	4618      	mov	r0, r3
 8004876:	3718      	adds	r7, #24
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b08c      	sub	sp, #48	; 0x30
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
 8004888:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800488a:	2301      	movs	r3, #1
 800488c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800488e:	2300      	movs	r3, #0
 8004890:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800489a:	2b01      	cmp	r3, #1
 800489c:	d101      	bne.n	80048a2 <HAL_SPI_TransmitReceive+0x26>
 800489e:	2302      	movs	r3, #2
 80048a0:	e18a      	b.n	8004bb8 <HAL_SPI_TransmitReceive+0x33c>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048aa:	f7fd fbd1 	bl	8002050 <HAL_GetTick>
 80048ae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80048c0:	887b      	ldrh	r3, [r7, #2]
 80048c2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80048c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d00f      	beq.n	80048ec <HAL_SPI_TransmitReceive+0x70>
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048d2:	d107      	bne.n	80048e4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d103      	bne.n	80048e4 <HAL_SPI_TransmitReceive+0x68>
 80048dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048e0:	2b04      	cmp	r3, #4
 80048e2:	d003      	beq.n	80048ec <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80048e4:	2302      	movs	r3, #2
 80048e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80048ea:	e15b      	b.n	8004ba4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d005      	beq.n	80048fe <HAL_SPI_TransmitReceive+0x82>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d002      	beq.n	80048fe <HAL_SPI_TransmitReceive+0x82>
 80048f8:	887b      	ldrh	r3, [r7, #2]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d103      	bne.n	8004906 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004904:	e14e      	b.n	8004ba4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b04      	cmp	r3, #4
 8004910:	d003      	beq.n	800491a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2205      	movs	r2, #5
 8004916:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	887a      	ldrh	r2, [r7, #2]
 800492a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	887a      	ldrh	r2, [r7, #2]
 8004930:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	887a      	ldrh	r2, [r7, #2]
 800493c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	887a      	ldrh	r2, [r7, #2]
 8004942:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800495a:	2b40      	cmp	r3, #64	; 0x40
 800495c:	d007      	beq.n	800496e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800496c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004976:	d178      	bne.n	8004a6a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d002      	beq.n	8004986 <HAL_SPI_TransmitReceive+0x10a>
 8004980:	8b7b      	ldrh	r3, [r7, #26]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d166      	bne.n	8004a54 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498a:	881a      	ldrh	r2, [r3, #0]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004996:	1c9a      	adds	r2, r3, #2
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	3b01      	subs	r3, #1
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049aa:	e053      	b.n	8004a54 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d11b      	bne.n	80049f2 <HAL_SPI_TransmitReceive+0x176>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049be:	b29b      	uxth	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d016      	beq.n	80049f2 <HAL_SPI_TransmitReceive+0x176>
 80049c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d113      	bne.n	80049f2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ce:	881a      	ldrh	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049da:	1c9a      	adds	r2, r3, #2
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	3b01      	subs	r3, #1
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049ee:	2300      	movs	r3, #0
 80049f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d119      	bne.n	8004a34 <HAL_SPI_TransmitReceive+0x1b8>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d014      	beq.n	8004a34 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68da      	ldr	r2, [r3, #12]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a14:	b292      	uxth	r2, r2
 8004a16:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1c:	1c9a      	adds	r2, r3, #2
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a30:	2301      	movs	r3, #1
 8004a32:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004a34:	f7fd fb0c 	bl	8002050 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d807      	bhi.n	8004a54 <HAL_SPI_TransmitReceive+0x1d8>
 8004a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a4a:	d003      	beq.n	8004a54 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004a52:	e0a7      	b.n	8004ba4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1a6      	bne.n	80049ac <HAL_SPI_TransmitReceive+0x130>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1a1      	bne.n	80049ac <HAL_SPI_TransmitReceive+0x130>
 8004a68:	e07c      	b.n	8004b64 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d002      	beq.n	8004a78 <HAL_SPI_TransmitReceive+0x1fc>
 8004a72:	8b7b      	ldrh	r3, [r7, #26]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d16b      	bne.n	8004b50 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	330c      	adds	r3, #12
 8004a82:	7812      	ldrb	r2, [r2, #0]
 8004a84:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8a:	1c5a      	adds	r2, r3, #1
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	3b01      	subs	r3, #1
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a9e:	e057      	b.n	8004b50 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d11c      	bne.n	8004ae8 <HAL_SPI_TransmitReceive+0x26c>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d017      	beq.n	8004ae8 <HAL_SPI_TransmitReceive+0x26c>
 8004ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d114      	bne.n	8004ae8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	330c      	adds	r3, #12
 8004ac8:	7812      	ldrb	r2, [r2, #0]
 8004aca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad0:	1c5a      	adds	r2, r3, #1
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	3b01      	subs	r3, #1
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d119      	bne.n	8004b2a <HAL_SPI_TransmitReceive+0x2ae>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d014      	beq.n	8004b2a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68da      	ldr	r2, [r3, #12]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0a:	b2d2      	uxtb	r2, r2
 8004b0c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b12:	1c5a      	adds	r2, r3, #1
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b26:	2301      	movs	r3, #1
 8004b28:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004b2a:	f7fd fa91 	bl	8002050 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d803      	bhi.n	8004b42 <HAL_SPI_TransmitReceive+0x2c6>
 8004b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b40:	d102      	bne.n	8004b48 <HAL_SPI_TransmitReceive+0x2cc>
 8004b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d103      	bne.n	8004b50 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004b4e:	e029      	b.n	8004ba4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1a2      	bne.n	8004aa0 <HAL_SPI_TransmitReceive+0x224>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d19d      	bne.n	8004aa0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f000 f925 	bl	8004db8 <SPI_EndRxTxTransaction>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d006      	beq.n	8004b82 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004b80:	e010      	b.n	8004ba4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10b      	bne.n	8004ba2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	617b      	str	r3, [r7, #20]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	617b      	str	r3, [r7, #20]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	617b      	str	r3, [r7, #20]
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	e000      	b.n	8004ba4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004ba2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004bb4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3730      	adds	r7, #48	; 0x30
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bce:	b2db      	uxtb	r3, r3
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b088      	sub	sp, #32
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	603b      	str	r3, [r7, #0]
 8004be8:	4613      	mov	r3, r2
 8004bea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004bec:	f7fd fa30 	bl	8002050 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf4:	1a9b      	subs	r3, r3, r2
 8004bf6:	683a      	ldr	r2, [r7, #0]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004bfc:	f7fd fa28 	bl	8002050 <HAL_GetTick>
 8004c00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c02:	4b39      	ldr	r3, [pc, #228]	; (8004ce8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	015b      	lsls	r3, r3, #5
 8004c08:	0d1b      	lsrs	r3, r3, #20
 8004c0a:	69fa      	ldr	r2, [r7, #28]
 8004c0c:	fb02 f303 	mul.w	r3, r2, r3
 8004c10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c12:	e054      	b.n	8004cbe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c1a:	d050      	beq.n	8004cbe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c1c:	f7fd fa18 	bl	8002050 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	69fa      	ldr	r2, [r7, #28]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d902      	bls.n	8004c32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d13d      	bne.n	8004cae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	685a      	ldr	r2, [r3, #4]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c4a:	d111      	bne.n	8004c70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c54:	d004      	beq.n	8004c60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c5e:	d107      	bne.n	8004c70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c78:	d10f      	bne.n	8004c9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c88:	601a      	str	r2, [r3, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e017      	b.n	8004cde <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d101      	bne.n	8004cb8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689a      	ldr	r2, [r3, #8]
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	68ba      	ldr	r2, [r7, #8]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	bf0c      	ite	eq
 8004cce:	2301      	moveq	r3, #1
 8004cd0:	2300      	movne	r3, #0
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	79fb      	ldrb	r3, [r7, #7]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d19b      	bne.n	8004c14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3720      	adds	r7, #32
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	20000008 	.word	0x20000008

08004cec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af02      	add	r7, sp, #8
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d00:	d111      	bne.n	8004d26 <SPI_EndRxTransaction+0x3a>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d0a:	d004      	beq.n	8004d16 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d14:	d107      	bne.n	8004d26 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d24:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d2e:	d12a      	bne.n	8004d86 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d38:	d012      	beq.n	8004d60 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	2200      	movs	r2, #0
 8004d42:	2180      	movs	r1, #128	; 0x80
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f7ff ff49 	bl	8004bdc <SPI_WaitFlagStateUntilTimeout>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d02d      	beq.n	8004dac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d54:	f043 0220 	orr.w	r2, r3, #32
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e026      	b.n	8004dae <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	9300      	str	r3, [sp, #0]
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	2200      	movs	r2, #0
 8004d68:	2101      	movs	r1, #1
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f7ff ff36 	bl	8004bdc <SPI_WaitFlagStateUntilTimeout>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d01a      	beq.n	8004dac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7a:	f043 0220 	orr.w	r2, r3, #32
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e013      	b.n	8004dae <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	2101      	movs	r1, #1
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f7ff ff23 	bl	8004bdc <SPI_WaitFlagStateUntilTimeout>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d007      	beq.n	8004dac <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da0:	f043 0220 	orr.w	r2, r3, #32
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e000      	b.n	8004dae <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
	...

08004db8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b088      	sub	sp, #32
 8004dbc:	af02      	add	r7, sp, #8
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004dc4:	4b1b      	ldr	r3, [pc, #108]	; (8004e34 <SPI_EndRxTxTransaction+0x7c>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a1b      	ldr	r2, [pc, #108]	; (8004e38 <SPI_EndRxTxTransaction+0x80>)
 8004dca:	fba2 2303 	umull	r2, r3, r2, r3
 8004dce:	0d5b      	lsrs	r3, r3, #21
 8004dd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004dd4:	fb02 f303 	mul.w	r3, r2, r3
 8004dd8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004de2:	d112      	bne.n	8004e0a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	9300      	str	r3, [sp, #0]
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	2200      	movs	r2, #0
 8004dec:	2180      	movs	r1, #128	; 0x80
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	f7ff fef4 	bl	8004bdc <SPI_WaitFlagStateUntilTimeout>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d016      	beq.n	8004e28 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dfe:	f043 0220 	orr.w	r2, r3, #32
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e00f      	b.n	8004e2a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00a      	beq.n	8004e26 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	3b01      	subs	r3, #1
 8004e14:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e20:	2b80      	cmp	r3, #128	; 0x80
 8004e22:	d0f2      	beq.n	8004e0a <SPI_EndRxTxTransaction+0x52>
 8004e24:	e000      	b.n	8004e28 <SPI_EndRxTxTransaction+0x70>
        break;
 8004e26:	bf00      	nop
  }

  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3718      	adds	r7, #24
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	20000008 	.word	0x20000008
 8004e38:	165e9f81 	.word	0x165e9f81

08004e3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e041      	b.n	8004ed2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d106      	bne.n	8004e68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f7fc fede 	bl	8001c24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	3304      	adds	r3, #4
 8004e78:	4619      	mov	r1, r3
 8004e7a:	4610      	mov	r0, r2
 8004e7c:	f000 fa96 	bl	80053ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3708      	adds	r7, #8
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
	...

08004edc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d001      	beq.n	8004ef4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e04e      	b.n	8004f92 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68da      	ldr	r2, [r3, #12]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f042 0201 	orr.w	r2, r2, #1
 8004f0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a23      	ldr	r2, [pc, #140]	; (8004fa0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d022      	beq.n	8004f5c <HAL_TIM_Base_Start_IT+0x80>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f1e:	d01d      	beq.n	8004f5c <HAL_TIM_Base_Start_IT+0x80>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a1f      	ldr	r2, [pc, #124]	; (8004fa4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d018      	beq.n	8004f5c <HAL_TIM_Base_Start_IT+0x80>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a1e      	ldr	r2, [pc, #120]	; (8004fa8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d013      	beq.n	8004f5c <HAL_TIM_Base_Start_IT+0x80>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a1c      	ldr	r2, [pc, #112]	; (8004fac <HAL_TIM_Base_Start_IT+0xd0>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d00e      	beq.n	8004f5c <HAL_TIM_Base_Start_IT+0x80>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a1b      	ldr	r2, [pc, #108]	; (8004fb0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d009      	beq.n	8004f5c <HAL_TIM_Base_Start_IT+0x80>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a19      	ldr	r2, [pc, #100]	; (8004fb4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d004      	beq.n	8004f5c <HAL_TIM_Base_Start_IT+0x80>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a18      	ldr	r2, [pc, #96]	; (8004fb8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d111      	bne.n	8004f80 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f003 0307 	and.w	r3, r3, #7
 8004f66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2b06      	cmp	r3, #6
 8004f6c:	d010      	beq.n	8004f90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f042 0201 	orr.w	r2, r2, #1
 8004f7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f7e:	e007      	b.n	8004f90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f042 0201 	orr.w	r2, r2, #1
 8004f8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3714      	adds	r7, #20
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	40010000 	.word	0x40010000
 8004fa4:	40000400 	.word	0x40000400
 8004fa8:	40000800 	.word	0x40000800
 8004fac:	40000c00 	.word	0x40000c00
 8004fb0:	40010400 	.word	0x40010400
 8004fb4:	40014000 	.word	0x40014000
 8004fb8:	40001800 	.word	0x40001800

08004fbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d122      	bne.n	8005018 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	f003 0302 	and.w	r3, r3, #2
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d11b      	bne.n	8005018 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f06f 0202 	mvn.w	r2, #2
 8004fe8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	f003 0303 	and.w	r3, r3, #3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d003      	beq.n	8005006 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f9b5 	bl	800536e <HAL_TIM_IC_CaptureCallback>
 8005004:	e005      	b.n	8005012 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f9a7 	bl	800535a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 f9b8 	bl	8005382 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	f003 0304 	and.w	r3, r3, #4
 8005022:	2b04      	cmp	r3, #4
 8005024:	d122      	bne.n	800506c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	f003 0304 	and.w	r3, r3, #4
 8005030:	2b04      	cmp	r3, #4
 8005032:	d11b      	bne.n	800506c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f06f 0204 	mvn.w	r2, #4
 800503c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2202      	movs	r2, #2
 8005042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800504e:	2b00      	cmp	r3, #0
 8005050:	d003      	beq.n	800505a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f98b 	bl	800536e <HAL_TIM_IC_CaptureCallback>
 8005058:	e005      	b.n	8005066 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f97d 	bl	800535a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f98e 	bl	8005382 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	f003 0308 	and.w	r3, r3, #8
 8005076:	2b08      	cmp	r3, #8
 8005078:	d122      	bne.n	80050c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f003 0308 	and.w	r3, r3, #8
 8005084:	2b08      	cmp	r3, #8
 8005086:	d11b      	bne.n	80050c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f06f 0208 	mvn.w	r2, #8
 8005090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2204      	movs	r2, #4
 8005096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	f003 0303 	and.w	r3, r3, #3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f961 	bl	800536e <HAL_TIM_IC_CaptureCallback>
 80050ac:	e005      	b.n	80050ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f953 	bl	800535a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 f964 	bl	8005382 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	f003 0310 	and.w	r3, r3, #16
 80050ca:	2b10      	cmp	r3, #16
 80050cc:	d122      	bne.n	8005114 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	f003 0310 	and.w	r3, r3, #16
 80050d8:	2b10      	cmp	r3, #16
 80050da:	d11b      	bne.n	8005114 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f06f 0210 	mvn.w	r2, #16
 80050e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2208      	movs	r2, #8
 80050ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	69db      	ldr	r3, [r3, #28]
 80050f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f937 	bl	800536e <HAL_TIM_IC_CaptureCallback>
 8005100:	e005      	b.n	800510e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f929 	bl	800535a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 f93a 	bl	8005382 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b01      	cmp	r3, #1
 8005120:	d10e      	bne.n	8005140 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	f003 0301 	and.w	r3, r3, #1
 800512c:	2b01      	cmp	r3, #1
 800512e:	d107      	bne.n	8005140 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f06f 0201 	mvn.w	r2, #1
 8005138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7fb ff24 	bl	8000f88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800514a:	2b80      	cmp	r3, #128	; 0x80
 800514c:	d10e      	bne.n	800516c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005158:	2b80      	cmp	r3, #128	; 0x80
 800515a:	d107      	bne.n	800516c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 fae0 	bl	800572c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005176:	2b40      	cmp	r3, #64	; 0x40
 8005178:	d10e      	bne.n	8005198 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005184:	2b40      	cmp	r3, #64	; 0x40
 8005186:	d107      	bne.n	8005198 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f8ff 	bl	8005396 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	f003 0320 	and.w	r3, r3, #32
 80051a2:	2b20      	cmp	r3, #32
 80051a4:	d10e      	bne.n	80051c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f003 0320 	and.w	r3, r3, #32
 80051b0:	2b20      	cmp	r3, #32
 80051b2:	d107      	bne.n	80051c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f06f 0220 	mvn.w	r2, #32
 80051bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 faaa 	bl	8005718 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051c4:	bf00      	nop
 80051c6:	3708      	adds	r7, #8
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051d6:	2300      	movs	r3, #0
 80051d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d101      	bne.n	80051e8 <HAL_TIM_ConfigClockSource+0x1c>
 80051e4:	2302      	movs	r3, #2
 80051e6:	e0b4      	b.n	8005352 <HAL_TIM_ConfigClockSource+0x186>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2202      	movs	r2, #2
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005206:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800520e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68ba      	ldr	r2, [r7, #8]
 8005216:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005220:	d03e      	beq.n	80052a0 <HAL_TIM_ConfigClockSource+0xd4>
 8005222:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005226:	f200 8087 	bhi.w	8005338 <HAL_TIM_ConfigClockSource+0x16c>
 800522a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800522e:	f000 8086 	beq.w	800533e <HAL_TIM_ConfigClockSource+0x172>
 8005232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005236:	d87f      	bhi.n	8005338 <HAL_TIM_ConfigClockSource+0x16c>
 8005238:	2b70      	cmp	r3, #112	; 0x70
 800523a:	d01a      	beq.n	8005272 <HAL_TIM_ConfigClockSource+0xa6>
 800523c:	2b70      	cmp	r3, #112	; 0x70
 800523e:	d87b      	bhi.n	8005338 <HAL_TIM_ConfigClockSource+0x16c>
 8005240:	2b60      	cmp	r3, #96	; 0x60
 8005242:	d050      	beq.n	80052e6 <HAL_TIM_ConfigClockSource+0x11a>
 8005244:	2b60      	cmp	r3, #96	; 0x60
 8005246:	d877      	bhi.n	8005338 <HAL_TIM_ConfigClockSource+0x16c>
 8005248:	2b50      	cmp	r3, #80	; 0x50
 800524a:	d03c      	beq.n	80052c6 <HAL_TIM_ConfigClockSource+0xfa>
 800524c:	2b50      	cmp	r3, #80	; 0x50
 800524e:	d873      	bhi.n	8005338 <HAL_TIM_ConfigClockSource+0x16c>
 8005250:	2b40      	cmp	r3, #64	; 0x40
 8005252:	d058      	beq.n	8005306 <HAL_TIM_ConfigClockSource+0x13a>
 8005254:	2b40      	cmp	r3, #64	; 0x40
 8005256:	d86f      	bhi.n	8005338 <HAL_TIM_ConfigClockSource+0x16c>
 8005258:	2b30      	cmp	r3, #48	; 0x30
 800525a:	d064      	beq.n	8005326 <HAL_TIM_ConfigClockSource+0x15a>
 800525c:	2b30      	cmp	r3, #48	; 0x30
 800525e:	d86b      	bhi.n	8005338 <HAL_TIM_ConfigClockSource+0x16c>
 8005260:	2b20      	cmp	r3, #32
 8005262:	d060      	beq.n	8005326 <HAL_TIM_ConfigClockSource+0x15a>
 8005264:	2b20      	cmp	r3, #32
 8005266:	d867      	bhi.n	8005338 <HAL_TIM_ConfigClockSource+0x16c>
 8005268:	2b00      	cmp	r3, #0
 800526a:	d05c      	beq.n	8005326 <HAL_TIM_ConfigClockSource+0x15a>
 800526c:	2b10      	cmp	r3, #16
 800526e:	d05a      	beq.n	8005326 <HAL_TIM_ConfigClockSource+0x15a>
 8005270:	e062      	b.n	8005338 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6818      	ldr	r0, [r3, #0]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	6899      	ldr	r1, [r3, #8]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	f000 f9ad 	bl	80055e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005294:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68ba      	ldr	r2, [r7, #8]
 800529c:	609a      	str	r2, [r3, #8]
      break;
 800529e:	e04f      	b.n	8005340 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6818      	ldr	r0, [r3, #0]
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	6899      	ldr	r1, [r3, #8]
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	685a      	ldr	r2, [r3, #4]
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	f000 f996 	bl	80055e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	689a      	ldr	r2, [r3, #8]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052c2:	609a      	str	r2, [r3, #8]
      break;
 80052c4:	e03c      	b.n	8005340 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6818      	ldr	r0, [r3, #0]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	6859      	ldr	r1, [r3, #4]
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	461a      	mov	r2, r3
 80052d4:	f000 f90a 	bl	80054ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2150      	movs	r1, #80	; 0x50
 80052de:	4618      	mov	r0, r3
 80052e0:	f000 f963 	bl	80055aa <TIM_ITRx_SetConfig>
      break;
 80052e4:	e02c      	b.n	8005340 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6818      	ldr	r0, [r3, #0]
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	6859      	ldr	r1, [r3, #4]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	461a      	mov	r2, r3
 80052f4:	f000 f929 	bl	800554a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2160      	movs	r1, #96	; 0x60
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 f953 	bl	80055aa <TIM_ITRx_SetConfig>
      break;
 8005304:	e01c      	b.n	8005340 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6818      	ldr	r0, [r3, #0]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	6859      	ldr	r1, [r3, #4]
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	461a      	mov	r2, r3
 8005314:	f000 f8ea 	bl	80054ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2140      	movs	r1, #64	; 0x40
 800531e:	4618      	mov	r0, r3
 8005320:	f000 f943 	bl	80055aa <TIM_ITRx_SetConfig>
      break;
 8005324:	e00c      	b.n	8005340 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4619      	mov	r1, r3
 8005330:	4610      	mov	r0, r2
 8005332:	f000 f93a 	bl	80055aa <TIM_ITRx_SetConfig>
      break;
 8005336:	e003      	b.n	8005340 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	73fb      	strb	r3, [r7, #15]
      break;
 800533c:	e000      	b.n	8005340 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800533e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005350:	7bfb      	ldrb	r3, [r7, #15]
}
 8005352:	4618      	mov	r0, r3
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800535a:	b480      	push	{r7}
 800535c:	b083      	sub	sp, #12
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005362:	bf00      	nop
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr

0800536e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800536e:	b480      	push	{r7}
 8005370:	b083      	sub	sp, #12
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005376:	bf00      	nop
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005382:	b480      	push	{r7}
 8005384:	b083      	sub	sp, #12
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800538a:	bf00      	nop
 800538c:	370c      	adds	r7, #12
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005396:	b480      	push	{r7}
 8005398:	b083      	sub	sp, #12
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800539e:	bf00      	nop
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
	...

080053ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a40      	ldr	r2, [pc, #256]	; (80054c0 <TIM_Base_SetConfig+0x114>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d013      	beq.n	80053ec <TIM_Base_SetConfig+0x40>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ca:	d00f      	beq.n	80053ec <TIM_Base_SetConfig+0x40>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a3d      	ldr	r2, [pc, #244]	; (80054c4 <TIM_Base_SetConfig+0x118>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d00b      	beq.n	80053ec <TIM_Base_SetConfig+0x40>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a3c      	ldr	r2, [pc, #240]	; (80054c8 <TIM_Base_SetConfig+0x11c>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d007      	beq.n	80053ec <TIM_Base_SetConfig+0x40>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a3b      	ldr	r2, [pc, #236]	; (80054cc <TIM_Base_SetConfig+0x120>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d003      	beq.n	80053ec <TIM_Base_SetConfig+0x40>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a3a      	ldr	r2, [pc, #232]	; (80054d0 <TIM_Base_SetConfig+0x124>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d108      	bne.n	80053fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a2f      	ldr	r2, [pc, #188]	; (80054c0 <TIM_Base_SetConfig+0x114>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d02b      	beq.n	800545e <TIM_Base_SetConfig+0xb2>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800540c:	d027      	beq.n	800545e <TIM_Base_SetConfig+0xb2>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a2c      	ldr	r2, [pc, #176]	; (80054c4 <TIM_Base_SetConfig+0x118>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d023      	beq.n	800545e <TIM_Base_SetConfig+0xb2>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a2b      	ldr	r2, [pc, #172]	; (80054c8 <TIM_Base_SetConfig+0x11c>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d01f      	beq.n	800545e <TIM_Base_SetConfig+0xb2>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a2a      	ldr	r2, [pc, #168]	; (80054cc <TIM_Base_SetConfig+0x120>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d01b      	beq.n	800545e <TIM_Base_SetConfig+0xb2>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a29      	ldr	r2, [pc, #164]	; (80054d0 <TIM_Base_SetConfig+0x124>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d017      	beq.n	800545e <TIM_Base_SetConfig+0xb2>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a28      	ldr	r2, [pc, #160]	; (80054d4 <TIM_Base_SetConfig+0x128>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d013      	beq.n	800545e <TIM_Base_SetConfig+0xb2>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a27      	ldr	r2, [pc, #156]	; (80054d8 <TIM_Base_SetConfig+0x12c>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d00f      	beq.n	800545e <TIM_Base_SetConfig+0xb2>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a26      	ldr	r2, [pc, #152]	; (80054dc <TIM_Base_SetConfig+0x130>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d00b      	beq.n	800545e <TIM_Base_SetConfig+0xb2>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a25      	ldr	r2, [pc, #148]	; (80054e0 <TIM_Base_SetConfig+0x134>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d007      	beq.n	800545e <TIM_Base_SetConfig+0xb2>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a24      	ldr	r2, [pc, #144]	; (80054e4 <TIM_Base_SetConfig+0x138>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d003      	beq.n	800545e <TIM_Base_SetConfig+0xb2>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a23      	ldr	r2, [pc, #140]	; (80054e8 <TIM_Base_SetConfig+0x13c>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d108      	bne.n	8005470 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005464:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	4313      	orrs	r3, r2
 800546e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	4313      	orrs	r3, r2
 800547c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	689a      	ldr	r2, [r3, #8]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a0a      	ldr	r2, [pc, #40]	; (80054c0 <TIM_Base_SetConfig+0x114>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d003      	beq.n	80054a4 <TIM_Base_SetConfig+0xf8>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a0c      	ldr	r2, [pc, #48]	; (80054d0 <TIM_Base_SetConfig+0x124>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d103      	bne.n	80054ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	691a      	ldr	r2, [r3, #16]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	615a      	str	r2, [r3, #20]
}
 80054b2:	bf00      	nop
 80054b4:	3714      	adds	r7, #20
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	40010000 	.word	0x40010000
 80054c4:	40000400 	.word	0x40000400
 80054c8:	40000800 	.word	0x40000800
 80054cc:	40000c00 	.word	0x40000c00
 80054d0:	40010400 	.word	0x40010400
 80054d4:	40014000 	.word	0x40014000
 80054d8:	40014400 	.word	0x40014400
 80054dc:	40014800 	.word	0x40014800
 80054e0:	40001800 	.word	0x40001800
 80054e4:	40001c00 	.word	0x40001c00
 80054e8:	40002000 	.word	0x40002000

080054ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b087      	sub	sp, #28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6a1b      	ldr	r3, [r3, #32]
 80054fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	f023 0201 	bic.w	r2, r3, #1
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005516:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	011b      	lsls	r3, r3, #4
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	4313      	orrs	r3, r2
 8005520:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f023 030a 	bic.w	r3, r3, #10
 8005528:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	4313      	orrs	r3, r2
 8005530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	621a      	str	r2, [r3, #32]
}
 800553e:	bf00      	nop
 8005540:	371c      	adds	r7, #28
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800554a:	b480      	push	{r7}
 800554c:	b087      	sub	sp, #28
 800554e:	af00      	add	r7, sp, #0
 8005550:	60f8      	str	r0, [r7, #12]
 8005552:	60b9      	str	r1, [r7, #8]
 8005554:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	f023 0210 	bic.w	r2, r3, #16
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6a1b      	ldr	r3, [r3, #32]
 800556c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005574:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	031b      	lsls	r3, r3, #12
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	4313      	orrs	r3, r2
 800557e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005586:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	011b      	lsls	r3, r3, #4
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	4313      	orrs	r3, r2
 8005590:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	621a      	str	r2, [r3, #32]
}
 800559e:	bf00      	nop
 80055a0:	371c      	adds	r7, #28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b085      	sub	sp, #20
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
 80055b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	f043 0307 	orr.w	r3, r3, #7
 80055cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	609a      	str	r2, [r3, #8]
}
 80055d4:	bf00      	nop
 80055d6:	3714      	adds	r7, #20
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b087      	sub	sp, #28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
 80055ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	021a      	lsls	r2, r3, #8
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	431a      	orrs	r2, r3
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	4313      	orrs	r3, r2
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	4313      	orrs	r3, r2
 800560c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	609a      	str	r2, [r3, #8]
}
 8005614:	bf00      	nop
 8005616:	371c      	adds	r7, #28
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005630:	2b01      	cmp	r3, #1
 8005632:	d101      	bne.n	8005638 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005634:	2302      	movs	r3, #2
 8005636:	e05a      	b.n	80056ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2202      	movs	r2, #2
 8005644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800565e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	4313      	orrs	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a21      	ldr	r2, [pc, #132]	; (80056fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d022      	beq.n	80056c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005684:	d01d      	beq.n	80056c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a1d      	ldr	r2, [pc, #116]	; (8005700 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d018      	beq.n	80056c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a1b      	ldr	r2, [pc, #108]	; (8005704 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d013      	beq.n	80056c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a1a      	ldr	r2, [pc, #104]	; (8005708 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d00e      	beq.n	80056c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a18      	ldr	r2, [pc, #96]	; (800570c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d009      	beq.n	80056c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a17      	ldr	r2, [pc, #92]	; (8005710 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d004      	beq.n	80056c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a15      	ldr	r2, [pc, #84]	; (8005714 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d10c      	bne.n	80056dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68ba      	ldr	r2, [r7, #8]
 80056da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3714      	adds	r7, #20
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	40010000 	.word	0x40010000
 8005700:	40000400 	.word	0x40000400
 8005704:	40000800 	.word	0x40000800
 8005708:	40000c00 	.word	0x40000c00
 800570c:	40010400 	.word	0x40010400
 8005710:	40014000 	.word	0x40014000
 8005714:	40001800 	.word	0x40001800

08005718 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <__errno>:
 8005740:	4b01      	ldr	r3, [pc, #4]	; (8005748 <__errno+0x8>)
 8005742:	6818      	ldr	r0, [r3, #0]
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	20000014 	.word	0x20000014

0800574c <__libc_init_array>:
 800574c:	b570      	push	{r4, r5, r6, lr}
 800574e:	4d0d      	ldr	r5, [pc, #52]	; (8005784 <__libc_init_array+0x38>)
 8005750:	4c0d      	ldr	r4, [pc, #52]	; (8005788 <__libc_init_array+0x3c>)
 8005752:	1b64      	subs	r4, r4, r5
 8005754:	10a4      	asrs	r4, r4, #2
 8005756:	2600      	movs	r6, #0
 8005758:	42a6      	cmp	r6, r4
 800575a:	d109      	bne.n	8005770 <__libc_init_array+0x24>
 800575c:	4d0b      	ldr	r5, [pc, #44]	; (800578c <__libc_init_array+0x40>)
 800575e:	4c0c      	ldr	r4, [pc, #48]	; (8005790 <__libc_init_array+0x44>)
 8005760:	f000 fc8e 	bl	8006080 <_init>
 8005764:	1b64      	subs	r4, r4, r5
 8005766:	10a4      	asrs	r4, r4, #2
 8005768:	2600      	movs	r6, #0
 800576a:	42a6      	cmp	r6, r4
 800576c:	d105      	bne.n	800577a <__libc_init_array+0x2e>
 800576e:	bd70      	pop	{r4, r5, r6, pc}
 8005770:	f855 3b04 	ldr.w	r3, [r5], #4
 8005774:	4798      	blx	r3
 8005776:	3601      	adds	r6, #1
 8005778:	e7ee      	b.n	8005758 <__libc_init_array+0xc>
 800577a:	f855 3b04 	ldr.w	r3, [r5], #4
 800577e:	4798      	blx	r3
 8005780:	3601      	adds	r6, #1
 8005782:	e7f2      	b.n	800576a <__libc_init_array+0x1e>
 8005784:	08006988 	.word	0x08006988
 8005788:	08006988 	.word	0x08006988
 800578c:	08006988 	.word	0x08006988
 8005790:	0800698c 	.word	0x0800698c

08005794 <memset>:
 8005794:	4402      	add	r2, r0
 8005796:	4603      	mov	r3, r0
 8005798:	4293      	cmp	r3, r2
 800579a:	d100      	bne.n	800579e <memset+0xa>
 800579c:	4770      	bx	lr
 800579e:	f803 1b01 	strb.w	r1, [r3], #1
 80057a2:	e7f9      	b.n	8005798 <memset+0x4>

080057a4 <siprintf>:
 80057a4:	b40e      	push	{r1, r2, r3}
 80057a6:	b500      	push	{lr}
 80057a8:	b09c      	sub	sp, #112	; 0x70
 80057aa:	ab1d      	add	r3, sp, #116	; 0x74
 80057ac:	9002      	str	r0, [sp, #8]
 80057ae:	9006      	str	r0, [sp, #24]
 80057b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80057b4:	4809      	ldr	r0, [pc, #36]	; (80057dc <siprintf+0x38>)
 80057b6:	9107      	str	r1, [sp, #28]
 80057b8:	9104      	str	r1, [sp, #16]
 80057ba:	4909      	ldr	r1, [pc, #36]	; (80057e0 <siprintf+0x3c>)
 80057bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80057c0:	9105      	str	r1, [sp, #20]
 80057c2:	6800      	ldr	r0, [r0, #0]
 80057c4:	9301      	str	r3, [sp, #4]
 80057c6:	a902      	add	r1, sp, #8
 80057c8:	f000 f868 	bl	800589c <_svfiprintf_r>
 80057cc:	9b02      	ldr	r3, [sp, #8]
 80057ce:	2200      	movs	r2, #0
 80057d0:	701a      	strb	r2, [r3, #0]
 80057d2:	b01c      	add	sp, #112	; 0x70
 80057d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80057d8:	b003      	add	sp, #12
 80057da:	4770      	bx	lr
 80057dc:	20000014 	.word	0x20000014
 80057e0:	ffff0208 	.word	0xffff0208

080057e4 <__ssputs_r>:
 80057e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057e8:	688e      	ldr	r6, [r1, #8]
 80057ea:	429e      	cmp	r6, r3
 80057ec:	4682      	mov	sl, r0
 80057ee:	460c      	mov	r4, r1
 80057f0:	4690      	mov	r8, r2
 80057f2:	461f      	mov	r7, r3
 80057f4:	d838      	bhi.n	8005868 <__ssputs_r+0x84>
 80057f6:	898a      	ldrh	r2, [r1, #12]
 80057f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80057fc:	d032      	beq.n	8005864 <__ssputs_r+0x80>
 80057fe:	6825      	ldr	r5, [r4, #0]
 8005800:	6909      	ldr	r1, [r1, #16]
 8005802:	eba5 0901 	sub.w	r9, r5, r1
 8005806:	6965      	ldr	r5, [r4, #20]
 8005808:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800580c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005810:	3301      	adds	r3, #1
 8005812:	444b      	add	r3, r9
 8005814:	106d      	asrs	r5, r5, #1
 8005816:	429d      	cmp	r5, r3
 8005818:	bf38      	it	cc
 800581a:	461d      	movcc	r5, r3
 800581c:	0553      	lsls	r3, r2, #21
 800581e:	d531      	bpl.n	8005884 <__ssputs_r+0xa0>
 8005820:	4629      	mov	r1, r5
 8005822:	f000 fb63 	bl	8005eec <_malloc_r>
 8005826:	4606      	mov	r6, r0
 8005828:	b950      	cbnz	r0, 8005840 <__ssputs_r+0x5c>
 800582a:	230c      	movs	r3, #12
 800582c:	f8ca 3000 	str.w	r3, [sl]
 8005830:	89a3      	ldrh	r3, [r4, #12]
 8005832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005836:	81a3      	strh	r3, [r4, #12]
 8005838:	f04f 30ff 	mov.w	r0, #4294967295
 800583c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005840:	6921      	ldr	r1, [r4, #16]
 8005842:	464a      	mov	r2, r9
 8005844:	f000 fabe 	bl	8005dc4 <memcpy>
 8005848:	89a3      	ldrh	r3, [r4, #12]
 800584a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800584e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005852:	81a3      	strh	r3, [r4, #12]
 8005854:	6126      	str	r6, [r4, #16]
 8005856:	6165      	str	r5, [r4, #20]
 8005858:	444e      	add	r6, r9
 800585a:	eba5 0509 	sub.w	r5, r5, r9
 800585e:	6026      	str	r6, [r4, #0]
 8005860:	60a5      	str	r5, [r4, #8]
 8005862:	463e      	mov	r6, r7
 8005864:	42be      	cmp	r6, r7
 8005866:	d900      	bls.n	800586a <__ssputs_r+0x86>
 8005868:	463e      	mov	r6, r7
 800586a:	6820      	ldr	r0, [r4, #0]
 800586c:	4632      	mov	r2, r6
 800586e:	4641      	mov	r1, r8
 8005870:	f000 fab6 	bl	8005de0 <memmove>
 8005874:	68a3      	ldr	r3, [r4, #8]
 8005876:	1b9b      	subs	r3, r3, r6
 8005878:	60a3      	str	r3, [r4, #8]
 800587a:	6823      	ldr	r3, [r4, #0]
 800587c:	4433      	add	r3, r6
 800587e:	6023      	str	r3, [r4, #0]
 8005880:	2000      	movs	r0, #0
 8005882:	e7db      	b.n	800583c <__ssputs_r+0x58>
 8005884:	462a      	mov	r2, r5
 8005886:	f000 fba5 	bl	8005fd4 <_realloc_r>
 800588a:	4606      	mov	r6, r0
 800588c:	2800      	cmp	r0, #0
 800588e:	d1e1      	bne.n	8005854 <__ssputs_r+0x70>
 8005890:	6921      	ldr	r1, [r4, #16]
 8005892:	4650      	mov	r0, sl
 8005894:	f000 fabe 	bl	8005e14 <_free_r>
 8005898:	e7c7      	b.n	800582a <__ssputs_r+0x46>
	...

0800589c <_svfiprintf_r>:
 800589c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a0:	4698      	mov	r8, r3
 80058a2:	898b      	ldrh	r3, [r1, #12]
 80058a4:	061b      	lsls	r3, r3, #24
 80058a6:	b09d      	sub	sp, #116	; 0x74
 80058a8:	4607      	mov	r7, r0
 80058aa:	460d      	mov	r5, r1
 80058ac:	4614      	mov	r4, r2
 80058ae:	d50e      	bpl.n	80058ce <_svfiprintf_r+0x32>
 80058b0:	690b      	ldr	r3, [r1, #16]
 80058b2:	b963      	cbnz	r3, 80058ce <_svfiprintf_r+0x32>
 80058b4:	2140      	movs	r1, #64	; 0x40
 80058b6:	f000 fb19 	bl	8005eec <_malloc_r>
 80058ba:	6028      	str	r0, [r5, #0]
 80058bc:	6128      	str	r0, [r5, #16]
 80058be:	b920      	cbnz	r0, 80058ca <_svfiprintf_r+0x2e>
 80058c0:	230c      	movs	r3, #12
 80058c2:	603b      	str	r3, [r7, #0]
 80058c4:	f04f 30ff 	mov.w	r0, #4294967295
 80058c8:	e0d1      	b.n	8005a6e <_svfiprintf_r+0x1d2>
 80058ca:	2340      	movs	r3, #64	; 0x40
 80058cc:	616b      	str	r3, [r5, #20]
 80058ce:	2300      	movs	r3, #0
 80058d0:	9309      	str	r3, [sp, #36]	; 0x24
 80058d2:	2320      	movs	r3, #32
 80058d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80058dc:	2330      	movs	r3, #48	; 0x30
 80058de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005a88 <_svfiprintf_r+0x1ec>
 80058e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058e6:	f04f 0901 	mov.w	r9, #1
 80058ea:	4623      	mov	r3, r4
 80058ec:	469a      	mov	sl, r3
 80058ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058f2:	b10a      	cbz	r2, 80058f8 <_svfiprintf_r+0x5c>
 80058f4:	2a25      	cmp	r2, #37	; 0x25
 80058f6:	d1f9      	bne.n	80058ec <_svfiprintf_r+0x50>
 80058f8:	ebba 0b04 	subs.w	fp, sl, r4
 80058fc:	d00b      	beq.n	8005916 <_svfiprintf_r+0x7a>
 80058fe:	465b      	mov	r3, fp
 8005900:	4622      	mov	r2, r4
 8005902:	4629      	mov	r1, r5
 8005904:	4638      	mov	r0, r7
 8005906:	f7ff ff6d 	bl	80057e4 <__ssputs_r>
 800590a:	3001      	adds	r0, #1
 800590c:	f000 80aa 	beq.w	8005a64 <_svfiprintf_r+0x1c8>
 8005910:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005912:	445a      	add	r2, fp
 8005914:	9209      	str	r2, [sp, #36]	; 0x24
 8005916:	f89a 3000 	ldrb.w	r3, [sl]
 800591a:	2b00      	cmp	r3, #0
 800591c:	f000 80a2 	beq.w	8005a64 <_svfiprintf_r+0x1c8>
 8005920:	2300      	movs	r3, #0
 8005922:	f04f 32ff 	mov.w	r2, #4294967295
 8005926:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800592a:	f10a 0a01 	add.w	sl, sl, #1
 800592e:	9304      	str	r3, [sp, #16]
 8005930:	9307      	str	r3, [sp, #28]
 8005932:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005936:	931a      	str	r3, [sp, #104]	; 0x68
 8005938:	4654      	mov	r4, sl
 800593a:	2205      	movs	r2, #5
 800593c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005940:	4851      	ldr	r0, [pc, #324]	; (8005a88 <_svfiprintf_r+0x1ec>)
 8005942:	f7fa fc45 	bl	80001d0 <memchr>
 8005946:	9a04      	ldr	r2, [sp, #16]
 8005948:	b9d8      	cbnz	r0, 8005982 <_svfiprintf_r+0xe6>
 800594a:	06d0      	lsls	r0, r2, #27
 800594c:	bf44      	itt	mi
 800594e:	2320      	movmi	r3, #32
 8005950:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005954:	0711      	lsls	r1, r2, #28
 8005956:	bf44      	itt	mi
 8005958:	232b      	movmi	r3, #43	; 0x2b
 800595a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800595e:	f89a 3000 	ldrb.w	r3, [sl]
 8005962:	2b2a      	cmp	r3, #42	; 0x2a
 8005964:	d015      	beq.n	8005992 <_svfiprintf_r+0xf6>
 8005966:	9a07      	ldr	r2, [sp, #28]
 8005968:	4654      	mov	r4, sl
 800596a:	2000      	movs	r0, #0
 800596c:	f04f 0c0a 	mov.w	ip, #10
 8005970:	4621      	mov	r1, r4
 8005972:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005976:	3b30      	subs	r3, #48	; 0x30
 8005978:	2b09      	cmp	r3, #9
 800597a:	d94e      	bls.n	8005a1a <_svfiprintf_r+0x17e>
 800597c:	b1b0      	cbz	r0, 80059ac <_svfiprintf_r+0x110>
 800597e:	9207      	str	r2, [sp, #28]
 8005980:	e014      	b.n	80059ac <_svfiprintf_r+0x110>
 8005982:	eba0 0308 	sub.w	r3, r0, r8
 8005986:	fa09 f303 	lsl.w	r3, r9, r3
 800598a:	4313      	orrs	r3, r2
 800598c:	9304      	str	r3, [sp, #16]
 800598e:	46a2      	mov	sl, r4
 8005990:	e7d2      	b.n	8005938 <_svfiprintf_r+0x9c>
 8005992:	9b03      	ldr	r3, [sp, #12]
 8005994:	1d19      	adds	r1, r3, #4
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	9103      	str	r1, [sp, #12]
 800599a:	2b00      	cmp	r3, #0
 800599c:	bfbb      	ittet	lt
 800599e:	425b      	neglt	r3, r3
 80059a0:	f042 0202 	orrlt.w	r2, r2, #2
 80059a4:	9307      	strge	r3, [sp, #28]
 80059a6:	9307      	strlt	r3, [sp, #28]
 80059a8:	bfb8      	it	lt
 80059aa:	9204      	strlt	r2, [sp, #16]
 80059ac:	7823      	ldrb	r3, [r4, #0]
 80059ae:	2b2e      	cmp	r3, #46	; 0x2e
 80059b0:	d10c      	bne.n	80059cc <_svfiprintf_r+0x130>
 80059b2:	7863      	ldrb	r3, [r4, #1]
 80059b4:	2b2a      	cmp	r3, #42	; 0x2a
 80059b6:	d135      	bne.n	8005a24 <_svfiprintf_r+0x188>
 80059b8:	9b03      	ldr	r3, [sp, #12]
 80059ba:	1d1a      	adds	r2, r3, #4
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	9203      	str	r2, [sp, #12]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	bfb8      	it	lt
 80059c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80059c8:	3402      	adds	r4, #2
 80059ca:	9305      	str	r3, [sp, #20]
 80059cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005a98 <_svfiprintf_r+0x1fc>
 80059d0:	7821      	ldrb	r1, [r4, #0]
 80059d2:	2203      	movs	r2, #3
 80059d4:	4650      	mov	r0, sl
 80059d6:	f7fa fbfb 	bl	80001d0 <memchr>
 80059da:	b140      	cbz	r0, 80059ee <_svfiprintf_r+0x152>
 80059dc:	2340      	movs	r3, #64	; 0x40
 80059de:	eba0 000a 	sub.w	r0, r0, sl
 80059e2:	fa03 f000 	lsl.w	r0, r3, r0
 80059e6:	9b04      	ldr	r3, [sp, #16]
 80059e8:	4303      	orrs	r3, r0
 80059ea:	3401      	adds	r4, #1
 80059ec:	9304      	str	r3, [sp, #16]
 80059ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059f2:	4826      	ldr	r0, [pc, #152]	; (8005a8c <_svfiprintf_r+0x1f0>)
 80059f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059f8:	2206      	movs	r2, #6
 80059fa:	f7fa fbe9 	bl	80001d0 <memchr>
 80059fe:	2800      	cmp	r0, #0
 8005a00:	d038      	beq.n	8005a74 <_svfiprintf_r+0x1d8>
 8005a02:	4b23      	ldr	r3, [pc, #140]	; (8005a90 <_svfiprintf_r+0x1f4>)
 8005a04:	bb1b      	cbnz	r3, 8005a4e <_svfiprintf_r+0x1b2>
 8005a06:	9b03      	ldr	r3, [sp, #12]
 8005a08:	3307      	adds	r3, #7
 8005a0a:	f023 0307 	bic.w	r3, r3, #7
 8005a0e:	3308      	adds	r3, #8
 8005a10:	9303      	str	r3, [sp, #12]
 8005a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a14:	4433      	add	r3, r6
 8005a16:	9309      	str	r3, [sp, #36]	; 0x24
 8005a18:	e767      	b.n	80058ea <_svfiprintf_r+0x4e>
 8005a1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a1e:	460c      	mov	r4, r1
 8005a20:	2001      	movs	r0, #1
 8005a22:	e7a5      	b.n	8005970 <_svfiprintf_r+0xd4>
 8005a24:	2300      	movs	r3, #0
 8005a26:	3401      	adds	r4, #1
 8005a28:	9305      	str	r3, [sp, #20]
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	f04f 0c0a 	mov.w	ip, #10
 8005a30:	4620      	mov	r0, r4
 8005a32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a36:	3a30      	subs	r2, #48	; 0x30
 8005a38:	2a09      	cmp	r2, #9
 8005a3a:	d903      	bls.n	8005a44 <_svfiprintf_r+0x1a8>
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d0c5      	beq.n	80059cc <_svfiprintf_r+0x130>
 8005a40:	9105      	str	r1, [sp, #20]
 8005a42:	e7c3      	b.n	80059cc <_svfiprintf_r+0x130>
 8005a44:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a48:	4604      	mov	r4, r0
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e7f0      	b.n	8005a30 <_svfiprintf_r+0x194>
 8005a4e:	ab03      	add	r3, sp, #12
 8005a50:	9300      	str	r3, [sp, #0]
 8005a52:	462a      	mov	r2, r5
 8005a54:	4b0f      	ldr	r3, [pc, #60]	; (8005a94 <_svfiprintf_r+0x1f8>)
 8005a56:	a904      	add	r1, sp, #16
 8005a58:	4638      	mov	r0, r7
 8005a5a:	f3af 8000 	nop.w
 8005a5e:	1c42      	adds	r2, r0, #1
 8005a60:	4606      	mov	r6, r0
 8005a62:	d1d6      	bne.n	8005a12 <_svfiprintf_r+0x176>
 8005a64:	89ab      	ldrh	r3, [r5, #12]
 8005a66:	065b      	lsls	r3, r3, #25
 8005a68:	f53f af2c 	bmi.w	80058c4 <_svfiprintf_r+0x28>
 8005a6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a6e:	b01d      	add	sp, #116	; 0x74
 8005a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a74:	ab03      	add	r3, sp, #12
 8005a76:	9300      	str	r3, [sp, #0]
 8005a78:	462a      	mov	r2, r5
 8005a7a:	4b06      	ldr	r3, [pc, #24]	; (8005a94 <_svfiprintf_r+0x1f8>)
 8005a7c:	a904      	add	r1, sp, #16
 8005a7e:	4638      	mov	r0, r7
 8005a80:	f000 f87a 	bl	8005b78 <_printf_i>
 8005a84:	e7eb      	b.n	8005a5e <_svfiprintf_r+0x1c2>
 8005a86:	bf00      	nop
 8005a88:	0800694c 	.word	0x0800694c
 8005a8c:	08006956 	.word	0x08006956
 8005a90:	00000000 	.word	0x00000000
 8005a94:	080057e5 	.word	0x080057e5
 8005a98:	08006952 	.word	0x08006952

08005a9c <_printf_common>:
 8005a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005aa0:	4616      	mov	r6, r2
 8005aa2:	4699      	mov	r9, r3
 8005aa4:	688a      	ldr	r2, [r1, #8]
 8005aa6:	690b      	ldr	r3, [r1, #16]
 8005aa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005aac:	4293      	cmp	r3, r2
 8005aae:	bfb8      	it	lt
 8005ab0:	4613      	movlt	r3, r2
 8005ab2:	6033      	str	r3, [r6, #0]
 8005ab4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ab8:	4607      	mov	r7, r0
 8005aba:	460c      	mov	r4, r1
 8005abc:	b10a      	cbz	r2, 8005ac2 <_printf_common+0x26>
 8005abe:	3301      	adds	r3, #1
 8005ac0:	6033      	str	r3, [r6, #0]
 8005ac2:	6823      	ldr	r3, [r4, #0]
 8005ac4:	0699      	lsls	r1, r3, #26
 8005ac6:	bf42      	ittt	mi
 8005ac8:	6833      	ldrmi	r3, [r6, #0]
 8005aca:	3302      	addmi	r3, #2
 8005acc:	6033      	strmi	r3, [r6, #0]
 8005ace:	6825      	ldr	r5, [r4, #0]
 8005ad0:	f015 0506 	ands.w	r5, r5, #6
 8005ad4:	d106      	bne.n	8005ae4 <_printf_common+0x48>
 8005ad6:	f104 0a19 	add.w	sl, r4, #25
 8005ada:	68e3      	ldr	r3, [r4, #12]
 8005adc:	6832      	ldr	r2, [r6, #0]
 8005ade:	1a9b      	subs	r3, r3, r2
 8005ae0:	42ab      	cmp	r3, r5
 8005ae2:	dc26      	bgt.n	8005b32 <_printf_common+0x96>
 8005ae4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ae8:	1e13      	subs	r3, r2, #0
 8005aea:	6822      	ldr	r2, [r4, #0]
 8005aec:	bf18      	it	ne
 8005aee:	2301      	movne	r3, #1
 8005af0:	0692      	lsls	r2, r2, #26
 8005af2:	d42b      	bmi.n	8005b4c <_printf_common+0xb0>
 8005af4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005af8:	4649      	mov	r1, r9
 8005afa:	4638      	mov	r0, r7
 8005afc:	47c0      	blx	r8
 8005afe:	3001      	adds	r0, #1
 8005b00:	d01e      	beq.n	8005b40 <_printf_common+0xa4>
 8005b02:	6823      	ldr	r3, [r4, #0]
 8005b04:	68e5      	ldr	r5, [r4, #12]
 8005b06:	6832      	ldr	r2, [r6, #0]
 8005b08:	f003 0306 	and.w	r3, r3, #6
 8005b0c:	2b04      	cmp	r3, #4
 8005b0e:	bf08      	it	eq
 8005b10:	1aad      	subeq	r5, r5, r2
 8005b12:	68a3      	ldr	r3, [r4, #8]
 8005b14:	6922      	ldr	r2, [r4, #16]
 8005b16:	bf0c      	ite	eq
 8005b18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b1c:	2500      	movne	r5, #0
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	bfc4      	itt	gt
 8005b22:	1a9b      	subgt	r3, r3, r2
 8005b24:	18ed      	addgt	r5, r5, r3
 8005b26:	2600      	movs	r6, #0
 8005b28:	341a      	adds	r4, #26
 8005b2a:	42b5      	cmp	r5, r6
 8005b2c:	d11a      	bne.n	8005b64 <_printf_common+0xc8>
 8005b2e:	2000      	movs	r0, #0
 8005b30:	e008      	b.n	8005b44 <_printf_common+0xa8>
 8005b32:	2301      	movs	r3, #1
 8005b34:	4652      	mov	r2, sl
 8005b36:	4649      	mov	r1, r9
 8005b38:	4638      	mov	r0, r7
 8005b3a:	47c0      	blx	r8
 8005b3c:	3001      	adds	r0, #1
 8005b3e:	d103      	bne.n	8005b48 <_printf_common+0xac>
 8005b40:	f04f 30ff 	mov.w	r0, #4294967295
 8005b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b48:	3501      	adds	r5, #1
 8005b4a:	e7c6      	b.n	8005ada <_printf_common+0x3e>
 8005b4c:	18e1      	adds	r1, r4, r3
 8005b4e:	1c5a      	adds	r2, r3, #1
 8005b50:	2030      	movs	r0, #48	; 0x30
 8005b52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b56:	4422      	add	r2, r4
 8005b58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b60:	3302      	adds	r3, #2
 8005b62:	e7c7      	b.n	8005af4 <_printf_common+0x58>
 8005b64:	2301      	movs	r3, #1
 8005b66:	4622      	mov	r2, r4
 8005b68:	4649      	mov	r1, r9
 8005b6a:	4638      	mov	r0, r7
 8005b6c:	47c0      	blx	r8
 8005b6e:	3001      	adds	r0, #1
 8005b70:	d0e6      	beq.n	8005b40 <_printf_common+0xa4>
 8005b72:	3601      	adds	r6, #1
 8005b74:	e7d9      	b.n	8005b2a <_printf_common+0x8e>
	...

08005b78 <_printf_i>:
 8005b78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b7c:	7e0f      	ldrb	r7, [r1, #24]
 8005b7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b80:	2f78      	cmp	r7, #120	; 0x78
 8005b82:	4691      	mov	r9, r2
 8005b84:	4680      	mov	r8, r0
 8005b86:	460c      	mov	r4, r1
 8005b88:	469a      	mov	sl, r3
 8005b8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b8e:	d807      	bhi.n	8005ba0 <_printf_i+0x28>
 8005b90:	2f62      	cmp	r7, #98	; 0x62
 8005b92:	d80a      	bhi.n	8005baa <_printf_i+0x32>
 8005b94:	2f00      	cmp	r7, #0
 8005b96:	f000 80d8 	beq.w	8005d4a <_printf_i+0x1d2>
 8005b9a:	2f58      	cmp	r7, #88	; 0x58
 8005b9c:	f000 80a3 	beq.w	8005ce6 <_printf_i+0x16e>
 8005ba0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ba4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ba8:	e03a      	b.n	8005c20 <_printf_i+0xa8>
 8005baa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005bae:	2b15      	cmp	r3, #21
 8005bb0:	d8f6      	bhi.n	8005ba0 <_printf_i+0x28>
 8005bb2:	a101      	add	r1, pc, #4	; (adr r1, 8005bb8 <_printf_i+0x40>)
 8005bb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005bb8:	08005c11 	.word	0x08005c11
 8005bbc:	08005c25 	.word	0x08005c25
 8005bc0:	08005ba1 	.word	0x08005ba1
 8005bc4:	08005ba1 	.word	0x08005ba1
 8005bc8:	08005ba1 	.word	0x08005ba1
 8005bcc:	08005ba1 	.word	0x08005ba1
 8005bd0:	08005c25 	.word	0x08005c25
 8005bd4:	08005ba1 	.word	0x08005ba1
 8005bd8:	08005ba1 	.word	0x08005ba1
 8005bdc:	08005ba1 	.word	0x08005ba1
 8005be0:	08005ba1 	.word	0x08005ba1
 8005be4:	08005d31 	.word	0x08005d31
 8005be8:	08005c55 	.word	0x08005c55
 8005bec:	08005d13 	.word	0x08005d13
 8005bf0:	08005ba1 	.word	0x08005ba1
 8005bf4:	08005ba1 	.word	0x08005ba1
 8005bf8:	08005d53 	.word	0x08005d53
 8005bfc:	08005ba1 	.word	0x08005ba1
 8005c00:	08005c55 	.word	0x08005c55
 8005c04:	08005ba1 	.word	0x08005ba1
 8005c08:	08005ba1 	.word	0x08005ba1
 8005c0c:	08005d1b 	.word	0x08005d1b
 8005c10:	682b      	ldr	r3, [r5, #0]
 8005c12:	1d1a      	adds	r2, r3, #4
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	602a      	str	r2, [r5, #0]
 8005c18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c20:	2301      	movs	r3, #1
 8005c22:	e0a3      	b.n	8005d6c <_printf_i+0x1f4>
 8005c24:	6820      	ldr	r0, [r4, #0]
 8005c26:	6829      	ldr	r1, [r5, #0]
 8005c28:	0606      	lsls	r6, r0, #24
 8005c2a:	f101 0304 	add.w	r3, r1, #4
 8005c2e:	d50a      	bpl.n	8005c46 <_printf_i+0xce>
 8005c30:	680e      	ldr	r6, [r1, #0]
 8005c32:	602b      	str	r3, [r5, #0]
 8005c34:	2e00      	cmp	r6, #0
 8005c36:	da03      	bge.n	8005c40 <_printf_i+0xc8>
 8005c38:	232d      	movs	r3, #45	; 0x2d
 8005c3a:	4276      	negs	r6, r6
 8005c3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c40:	485e      	ldr	r0, [pc, #376]	; (8005dbc <_printf_i+0x244>)
 8005c42:	230a      	movs	r3, #10
 8005c44:	e019      	b.n	8005c7a <_printf_i+0x102>
 8005c46:	680e      	ldr	r6, [r1, #0]
 8005c48:	602b      	str	r3, [r5, #0]
 8005c4a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c4e:	bf18      	it	ne
 8005c50:	b236      	sxthne	r6, r6
 8005c52:	e7ef      	b.n	8005c34 <_printf_i+0xbc>
 8005c54:	682b      	ldr	r3, [r5, #0]
 8005c56:	6820      	ldr	r0, [r4, #0]
 8005c58:	1d19      	adds	r1, r3, #4
 8005c5a:	6029      	str	r1, [r5, #0]
 8005c5c:	0601      	lsls	r1, r0, #24
 8005c5e:	d501      	bpl.n	8005c64 <_printf_i+0xec>
 8005c60:	681e      	ldr	r6, [r3, #0]
 8005c62:	e002      	b.n	8005c6a <_printf_i+0xf2>
 8005c64:	0646      	lsls	r6, r0, #25
 8005c66:	d5fb      	bpl.n	8005c60 <_printf_i+0xe8>
 8005c68:	881e      	ldrh	r6, [r3, #0]
 8005c6a:	4854      	ldr	r0, [pc, #336]	; (8005dbc <_printf_i+0x244>)
 8005c6c:	2f6f      	cmp	r7, #111	; 0x6f
 8005c6e:	bf0c      	ite	eq
 8005c70:	2308      	moveq	r3, #8
 8005c72:	230a      	movne	r3, #10
 8005c74:	2100      	movs	r1, #0
 8005c76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c7a:	6865      	ldr	r5, [r4, #4]
 8005c7c:	60a5      	str	r5, [r4, #8]
 8005c7e:	2d00      	cmp	r5, #0
 8005c80:	bfa2      	ittt	ge
 8005c82:	6821      	ldrge	r1, [r4, #0]
 8005c84:	f021 0104 	bicge.w	r1, r1, #4
 8005c88:	6021      	strge	r1, [r4, #0]
 8005c8a:	b90e      	cbnz	r6, 8005c90 <_printf_i+0x118>
 8005c8c:	2d00      	cmp	r5, #0
 8005c8e:	d04d      	beq.n	8005d2c <_printf_i+0x1b4>
 8005c90:	4615      	mov	r5, r2
 8005c92:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c96:	fb03 6711 	mls	r7, r3, r1, r6
 8005c9a:	5dc7      	ldrb	r7, [r0, r7]
 8005c9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ca0:	4637      	mov	r7, r6
 8005ca2:	42bb      	cmp	r3, r7
 8005ca4:	460e      	mov	r6, r1
 8005ca6:	d9f4      	bls.n	8005c92 <_printf_i+0x11a>
 8005ca8:	2b08      	cmp	r3, #8
 8005caa:	d10b      	bne.n	8005cc4 <_printf_i+0x14c>
 8005cac:	6823      	ldr	r3, [r4, #0]
 8005cae:	07de      	lsls	r6, r3, #31
 8005cb0:	d508      	bpl.n	8005cc4 <_printf_i+0x14c>
 8005cb2:	6923      	ldr	r3, [r4, #16]
 8005cb4:	6861      	ldr	r1, [r4, #4]
 8005cb6:	4299      	cmp	r1, r3
 8005cb8:	bfde      	ittt	le
 8005cba:	2330      	movle	r3, #48	; 0x30
 8005cbc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005cc0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005cc4:	1b52      	subs	r2, r2, r5
 8005cc6:	6122      	str	r2, [r4, #16]
 8005cc8:	f8cd a000 	str.w	sl, [sp]
 8005ccc:	464b      	mov	r3, r9
 8005cce:	aa03      	add	r2, sp, #12
 8005cd0:	4621      	mov	r1, r4
 8005cd2:	4640      	mov	r0, r8
 8005cd4:	f7ff fee2 	bl	8005a9c <_printf_common>
 8005cd8:	3001      	adds	r0, #1
 8005cda:	d14c      	bne.n	8005d76 <_printf_i+0x1fe>
 8005cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ce0:	b004      	add	sp, #16
 8005ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ce6:	4835      	ldr	r0, [pc, #212]	; (8005dbc <_printf_i+0x244>)
 8005ce8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005cec:	6829      	ldr	r1, [r5, #0]
 8005cee:	6823      	ldr	r3, [r4, #0]
 8005cf0:	f851 6b04 	ldr.w	r6, [r1], #4
 8005cf4:	6029      	str	r1, [r5, #0]
 8005cf6:	061d      	lsls	r5, r3, #24
 8005cf8:	d514      	bpl.n	8005d24 <_printf_i+0x1ac>
 8005cfa:	07df      	lsls	r7, r3, #31
 8005cfc:	bf44      	itt	mi
 8005cfe:	f043 0320 	orrmi.w	r3, r3, #32
 8005d02:	6023      	strmi	r3, [r4, #0]
 8005d04:	b91e      	cbnz	r6, 8005d0e <_printf_i+0x196>
 8005d06:	6823      	ldr	r3, [r4, #0]
 8005d08:	f023 0320 	bic.w	r3, r3, #32
 8005d0c:	6023      	str	r3, [r4, #0]
 8005d0e:	2310      	movs	r3, #16
 8005d10:	e7b0      	b.n	8005c74 <_printf_i+0xfc>
 8005d12:	6823      	ldr	r3, [r4, #0]
 8005d14:	f043 0320 	orr.w	r3, r3, #32
 8005d18:	6023      	str	r3, [r4, #0]
 8005d1a:	2378      	movs	r3, #120	; 0x78
 8005d1c:	4828      	ldr	r0, [pc, #160]	; (8005dc0 <_printf_i+0x248>)
 8005d1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d22:	e7e3      	b.n	8005cec <_printf_i+0x174>
 8005d24:	0659      	lsls	r1, r3, #25
 8005d26:	bf48      	it	mi
 8005d28:	b2b6      	uxthmi	r6, r6
 8005d2a:	e7e6      	b.n	8005cfa <_printf_i+0x182>
 8005d2c:	4615      	mov	r5, r2
 8005d2e:	e7bb      	b.n	8005ca8 <_printf_i+0x130>
 8005d30:	682b      	ldr	r3, [r5, #0]
 8005d32:	6826      	ldr	r6, [r4, #0]
 8005d34:	6961      	ldr	r1, [r4, #20]
 8005d36:	1d18      	adds	r0, r3, #4
 8005d38:	6028      	str	r0, [r5, #0]
 8005d3a:	0635      	lsls	r5, r6, #24
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	d501      	bpl.n	8005d44 <_printf_i+0x1cc>
 8005d40:	6019      	str	r1, [r3, #0]
 8005d42:	e002      	b.n	8005d4a <_printf_i+0x1d2>
 8005d44:	0670      	lsls	r0, r6, #25
 8005d46:	d5fb      	bpl.n	8005d40 <_printf_i+0x1c8>
 8005d48:	8019      	strh	r1, [r3, #0]
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	6123      	str	r3, [r4, #16]
 8005d4e:	4615      	mov	r5, r2
 8005d50:	e7ba      	b.n	8005cc8 <_printf_i+0x150>
 8005d52:	682b      	ldr	r3, [r5, #0]
 8005d54:	1d1a      	adds	r2, r3, #4
 8005d56:	602a      	str	r2, [r5, #0]
 8005d58:	681d      	ldr	r5, [r3, #0]
 8005d5a:	6862      	ldr	r2, [r4, #4]
 8005d5c:	2100      	movs	r1, #0
 8005d5e:	4628      	mov	r0, r5
 8005d60:	f7fa fa36 	bl	80001d0 <memchr>
 8005d64:	b108      	cbz	r0, 8005d6a <_printf_i+0x1f2>
 8005d66:	1b40      	subs	r0, r0, r5
 8005d68:	6060      	str	r0, [r4, #4]
 8005d6a:	6863      	ldr	r3, [r4, #4]
 8005d6c:	6123      	str	r3, [r4, #16]
 8005d6e:	2300      	movs	r3, #0
 8005d70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d74:	e7a8      	b.n	8005cc8 <_printf_i+0x150>
 8005d76:	6923      	ldr	r3, [r4, #16]
 8005d78:	462a      	mov	r2, r5
 8005d7a:	4649      	mov	r1, r9
 8005d7c:	4640      	mov	r0, r8
 8005d7e:	47d0      	blx	sl
 8005d80:	3001      	adds	r0, #1
 8005d82:	d0ab      	beq.n	8005cdc <_printf_i+0x164>
 8005d84:	6823      	ldr	r3, [r4, #0]
 8005d86:	079b      	lsls	r3, r3, #30
 8005d88:	d413      	bmi.n	8005db2 <_printf_i+0x23a>
 8005d8a:	68e0      	ldr	r0, [r4, #12]
 8005d8c:	9b03      	ldr	r3, [sp, #12]
 8005d8e:	4298      	cmp	r0, r3
 8005d90:	bfb8      	it	lt
 8005d92:	4618      	movlt	r0, r3
 8005d94:	e7a4      	b.n	8005ce0 <_printf_i+0x168>
 8005d96:	2301      	movs	r3, #1
 8005d98:	4632      	mov	r2, r6
 8005d9a:	4649      	mov	r1, r9
 8005d9c:	4640      	mov	r0, r8
 8005d9e:	47d0      	blx	sl
 8005da0:	3001      	adds	r0, #1
 8005da2:	d09b      	beq.n	8005cdc <_printf_i+0x164>
 8005da4:	3501      	adds	r5, #1
 8005da6:	68e3      	ldr	r3, [r4, #12]
 8005da8:	9903      	ldr	r1, [sp, #12]
 8005daa:	1a5b      	subs	r3, r3, r1
 8005dac:	42ab      	cmp	r3, r5
 8005dae:	dcf2      	bgt.n	8005d96 <_printf_i+0x21e>
 8005db0:	e7eb      	b.n	8005d8a <_printf_i+0x212>
 8005db2:	2500      	movs	r5, #0
 8005db4:	f104 0619 	add.w	r6, r4, #25
 8005db8:	e7f5      	b.n	8005da6 <_printf_i+0x22e>
 8005dba:	bf00      	nop
 8005dbc:	0800695d 	.word	0x0800695d
 8005dc0:	0800696e 	.word	0x0800696e

08005dc4 <memcpy>:
 8005dc4:	440a      	add	r2, r1
 8005dc6:	4291      	cmp	r1, r2
 8005dc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005dcc:	d100      	bne.n	8005dd0 <memcpy+0xc>
 8005dce:	4770      	bx	lr
 8005dd0:	b510      	push	{r4, lr}
 8005dd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005dda:	4291      	cmp	r1, r2
 8005ddc:	d1f9      	bne.n	8005dd2 <memcpy+0xe>
 8005dde:	bd10      	pop	{r4, pc}

08005de0 <memmove>:
 8005de0:	4288      	cmp	r0, r1
 8005de2:	b510      	push	{r4, lr}
 8005de4:	eb01 0402 	add.w	r4, r1, r2
 8005de8:	d902      	bls.n	8005df0 <memmove+0x10>
 8005dea:	4284      	cmp	r4, r0
 8005dec:	4623      	mov	r3, r4
 8005dee:	d807      	bhi.n	8005e00 <memmove+0x20>
 8005df0:	1e43      	subs	r3, r0, #1
 8005df2:	42a1      	cmp	r1, r4
 8005df4:	d008      	beq.n	8005e08 <memmove+0x28>
 8005df6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005dfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005dfe:	e7f8      	b.n	8005df2 <memmove+0x12>
 8005e00:	4402      	add	r2, r0
 8005e02:	4601      	mov	r1, r0
 8005e04:	428a      	cmp	r2, r1
 8005e06:	d100      	bne.n	8005e0a <memmove+0x2a>
 8005e08:	bd10      	pop	{r4, pc}
 8005e0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e12:	e7f7      	b.n	8005e04 <memmove+0x24>

08005e14 <_free_r>:
 8005e14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e16:	2900      	cmp	r1, #0
 8005e18:	d044      	beq.n	8005ea4 <_free_r+0x90>
 8005e1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e1e:	9001      	str	r0, [sp, #4]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f1a1 0404 	sub.w	r4, r1, #4
 8005e26:	bfb8      	it	lt
 8005e28:	18e4      	addlt	r4, r4, r3
 8005e2a:	f000 f913 	bl	8006054 <__malloc_lock>
 8005e2e:	4a1e      	ldr	r2, [pc, #120]	; (8005ea8 <_free_r+0x94>)
 8005e30:	9801      	ldr	r0, [sp, #4]
 8005e32:	6813      	ldr	r3, [r2, #0]
 8005e34:	b933      	cbnz	r3, 8005e44 <_free_r+0x30>
 8005e36:	6063      	str	r3, [r4, #4]
 8005e38:	6014      	str	r4, [r2, #0]
 8005e3a:	b003      	add	sp, #12
 8005e3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e40:	f000 b90e 	b.w	8006060 <__malloc_unlock>
 8005e44:	42a3      	cmp	r3, r4
 8005e46:	d908      	bls.n	8005e5a <_free_r+0x46>
 8005e48:	6825      	ldr	r5, [r4, #0]
 8005e4a:	1961      	adds	r1, r4, r5
 8005e4c:	428b      	cmp	r3, r1
 8005e4e:	bf01      	itttt	eq
 8005e50:	6819      	ldreq	r1, [r3, #0]
 8005e52:	685b      	ldreq	r3, [r3, #4]
 8005e54:	1949      	addeq	r1, r1, r5
 8005e56:	6021      	streq	r1, [r4, #0]
 8005e58:	e7ed      	b.n	8005e36 <_free_r+0x22>
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	b10b      	cbz	r3, 8005e64 <_free_r+0x50>
 8005e60:	42a3      	cmp	r3, r4
 8005e62:	d9fa      	bls.n	8005e5a <_free_r+0x46>
 8005e64:	6811      	ldr	r1, [r2, #0]
 8005e66:	1855      	adds	r5, r2, r1
 8005e68:	42a5      	cmp	r5, r4
 8005e6a:	d10b      	bne.n	8005e84 <_free_r+0x70>
 8005e6c:	6824      	ldr	r4, [r4, #0]
 8005e6e:	4421      	add	r1, r4
 8005e70:	1854      	adds	r4, r2, r1
 8005e72:	42a3      	cmp	r3, r4
 8005e74:	6011      	str	r1, [r2, #0]
 8005e76:	d1e0      	bne.n	8005e3a <_free_r+0x26>
 8005e78:	681c      	ldr	r4, [r3, #0]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	6053      	str	r3, [r2, #4]
 8005e7e:	4421      	add	r1, r4
 8005e80:	6011      	str	r1, [r2, #0]
 8005e82:	e7da      	b.n	8005e3a <_free_r+0x26>
 8005e84:	d902      	bls.n	8005e8c <_free_r+0x78>
 8005e86:	230c      	movs	r3, #12
 8005e88:	6003      	str	r3, [r0, #0]
 8005e8a:	e7d6      	b.n	8005e3a <_free_r+0x26>
 8005e8c:	6825      	ldr	r5, [r4, #0]
 8005e8e:	1961      	adds	r1, r4, r5
 8005e90:	428b      	cmp	r3, r1
 8005e92:	bf04      	itt	eq
 8005e94:	6819      	ldreq	r1, [r3, #0]
 8005e96:	685b      	ldreq	r3, [r3, #4]
 8005e98:	6063      	str	r3, [r4, #4]
 8005e9a:	bf04      	itt	eq
 8005e9c:	1949      	addeq	r1, r1, r5
 8005e9e:	6021      	streq	r1, [r4, #0]
 8005ea0:	6054      	str	r4, [r2, #4]
 8005ea2:	e7ca      	b.n	8005e3a <_free_r+0x26>
 8005ea4:	b003      	add	sp, #12
 8005ea6:	bd30      	pop	{r4, r5, pc}
 8005ea8:	2000041c 	.word	0x2000041c

08005eac <sbrk_aligned>:
 8005eac:	b570      	push	{r4, r5, r6, lr}
 8005eae:	4e0e      	ldr	r6, [pc, #56]	; (8005ee8 <sbrk_aligned+0x3c>)
 8005eb0:	460c      	mov	r4, r1
 8005eb2:	6831      	ldr	r1, [r6, #0]
 8005eb4:	4605      	mov	r5, r0
 8005eb6:	b911      	cbnz	r1, 8005ebe <sbrk_aligned+0x12>
 8005eb8:	f000 f8bc 	bl	8006034 <_sbrk_r>
 8005ebc:	6030      	str	r0, [r6, #0]
 8005ebe:	4621      	mov	r1, r4
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	f000 f8b7 	bl	8006034 <_sbrk_r>
 8005ec6:	1c43      	adds	r3, r0, #1
 8005ec8:	d00a      	beq.n	8005ee0 <sbrk_aligned+0x34>
 8005eca:	1cc4      	adds	r4, r0, #3
 8005ecc:	f024 0403 	bic.w	r4, r4, #3
 8005ed0:	42a0      	cmp	r0, r4
 8005ed2:	d007      	beq.n	8005ee4 <sbrk_aligned+0x38>
 8005ed4:	1a21      	subs	r1, r4, r0
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	f000 f8ac 	bl	8006034 <_sbrk_r>
 8005edc:	3001      	adds	r0, #1
 8005ede:	d101      	bne.n	8005ee4 <sbrk_aligned+0x38>
 8005ee0:	f04f 34ff 	mov.w	r4, #4294967295
 8005ee4:	4620      	mov	r0, r4
 8005ee6:	bd70      	pop	{r4, r5, r6, pc}
 8005ee8:	20000420 	.word	0x20000420

08005eec <_malloc_r>:
 8005eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ef0:	1ccd      	adds	r5, r1, #3
 8005ef2:	f025 0503 	bic.w	r5, r5, #3
 8005ef6:	3508      	adds	r5, #8
 8005ef8:	2d0c      	cmp	r5, #12
 8005efa:	bf38      	it	cc
 8005efc:	250c      	movcc	r5, #12
 8005efe:	2d00      	cmp	r5, #0
 8005f00:	4607      	mov	r7, r0
 8005f02:	db01      	blt.n	8005f08 <_malloc_r+0x1c>
 8005f04:	42a9      	cmp	r1, r5
 8005f06:	d905      	bls.n	8005f14 <_malloc_r+0x28>
 8005f08:	230c      	movs	r3, #12
 8005f0a:	603b      	str	r3, [r7, #0]
 8005f0c:	2600      	movs	r6, #0
 8005f0e:	4630      	mov	r0, r6
 8005f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f14:	4e2e      	ldr	r6, [pc, #184]	; (8005fd0 <_malloc_r+0xe4>)
 8005f16:	f000 f89d 	bl	8006054 <__malloc_lock>
 8005f1a:	6833      	ldr	r3, [r6, #0]
 8005f1c:	461c      	mov	r4, r3
 8005f1e:	bb34      	cbnz	r4, 8005f6e <_malloc_r+0x82>
 8005f20:	4629      	mov	r1, r5
 8005f22:	4638      	mov	r0, r7
 8005f24:	f7ff ffc2 	bl	8005eac <sbrk_aligned>
 8005f28:	1c43      	adds	r3, r0, #1
 8005f2a:	4604      	mov	r4, r0
 8005f2c:	d14d      	bne.n	8005fca <_malloc_r+0xde>
 8005f2e:	6834      	ldr	r4, [r6, #0]
 8005f30:	4626      	mov	r6, r4
 8005f32:	2e00      	cmp	r6, #0
 8005f34:	d140      	bne.n	8005fb8 <_malloc_r+0xcc>
 8005f36:	6823      	ldr	r3, [r4, #0]
 8005f38:	4631      	mov	r1, r6
 8005f3a:	4638      	mov	r0, r7
 8005f3c:	eb04 0803 	add.w	r8, r4, r3
 8005f40:	f000 f878 	bl	8006034 <_sbrk_r>
 8005f44:	4580      	cmp	r8, r0
 8005f46:	d13a      	bne.n	8005fbe <_malloc_r+0xd2>
 8005f48:	6821      	ldr	r1, [r4, #0]
 8005f4a:	3503      	adds	r5, #3
 8005f4c:	1a6d      	subs	r5, r5, r1
 8005f4e:	f025 0503 	bic.w	r5, r5, #3
 8005f52:	3508      	adds	r5, #8
 8005f54:	2d0c      	cmp	r5, #12
 8005f56:	bf38      	it	cc
 8005f58:	250c      	movcc	r5, #12
 8005f5a:	4629      	mov	r1, r5
 8005f5c:	4638      	mov	r0, r7
 8005f5e:	f7ff ffa5 	bl	8005eac <sbrk_aligned>
 8005f62:	3001      	adds	r0, #1
 8005f64:	d02b      	beq.n	8005fbe <_malloc_r+0xd2>
 8005f66:	6823      	ldr	r3, [r4, #0]
 8005f68:	442b      	add	r3, r5
 8005f6a:	6023      	str	r3, [r4, #0]
 8005f6c:	e00e      	b.n	8005f8c <_malloc_r+0xa0>
 8005f6e:	6822      	ldr	r2, [r4, #0]
 8005f70:	1b52      	subs	r2, r2, r5
 8005f72:	d41e      	bmi.n	8005fb2 <_malloc_r+0xc6>
 8005f74:	2a0b      	cmp	r2, #11
 8005f76:	d916      	bls.n	8005fa6 <_malloc_r+0xba>
 8005f78:	1961      	adds	r1, r4, r5
 8005f7a:	42a3      	cmp	r3, r4
 8005f7c:	6025      	str	r5, [r4, #0]
 8005f7e:	bf18      	it	ne
 8005f80:	6059      	strne	r1, [r3, #4]
 8005f82:	6863      	ldr	r3, [r4, #4]
 8005f84:	bf08      	it	eq
 8005f86:	6031      	streq	r1, [r6, #0]
 8005f88:	5162      	str	r2, [r4, r5]
 8005f8a:	604b      	str	r3, [r1, #4]
 8005f8c:	4638      	mov	r0, r7
 8005f8e:	f104 060b 	add.w	r6, r4, #11
 8005f92:	f000 f865 	bl	8006060 <__malloc_unlock>
 8005f96:	f026 0607 	bic.w	r6, r6, #7
 8005f9a:	1d23      	adds	r3, r4, #4
 8005f9c:	1af2      	subs	r2, r6, r3
 8005f9e:	d0b6      	beq.n	8005f0e <_malloc_r+0x22>
 8005fa0:	1b9b      	subs	r3, r3, r6
 8005fa2:	50a3      	str	r3, [r4, r2]
 8005fa4:	e7b3      	b.n	8005f0e <_malloc_r+0x22>
 8005fa6:	6862      	ldr	r2, [r4, #4]
 8005fa8:	42a3      	cmp	r3, r4
 8005faa:	bf0c      	ite	eq
 8005fac:	6032      	streq	r2, [r6, #0]
 8005fae:	605a      	strne	r2, [r3, #4]
 8005fb0:	e7ec      	b.n	8005f8c <_malloc_r+0xa0>
 8005fb2:	4623      	mov	r3, r4
 8005fb4:	6864      	ldr	r4, [r4, #4]
 8005fb6:	e7b2      	b.n	8005f1e <_malloc_r+0x32>
 8005fb8:	4634      	mov	r4, r6
 8005fba:	6876      	ldr	r6, [r6, #4]
 8005fbc:	e7b9      	b.n	8005f32 <_malloc_r+0x46>
 8005fbe:	230c      	movs	r3, #12
 8005fc0:	603b      	str	r3, [r7, #0]
 8005fc2:	4638      	mov	r0, r7
 8005fc4:	f000 f84c 	bl	8006060 <__malloc_unlock>
 8005fc8:	e7a1      	b.n	8005f0e <_malloc_r+0x22>
 8005fca:	6025      	str	r5, [r4, #0]
 8005fcc:	e7de      	b.n	8005f8c <_malloc_r+0xa0>
 8005fce:	bf00      	nop
 8005fd0:	2000041c 	.word	0x2000041c

08005fd4 <_realloc_r>:
 8005fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fd8:	4680      	mov	r8, r0
 8005fda:	4614      	mov	r4, r2
 8005fdc:	460e      	mov	r6, r1
 8005fde:	b921      	cbnz	r1, 8005fea <_realloc_r+0x16>
 8005fe0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fe4:	4611      	mov	r1, r2
 8005fe6:	f7ff bf81 	b.w	8005eec <_malloc_r>
 8005fea:	b92a      	cbnz	r2, 8005ff8 <_realloc_r+0x24>
 8005fec:	f7ff ff12 	bl	8005e14 <_free_r>
 8005ff0:	4625      	mov	r5, r4
 8005ff2:	4628      	mov	r0, r5
 8005ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ff8:	f000 f838 	bl	800606c <_malloc_usable_size_r>
 8005ffc:	4284      	cmp	r4, r0
 8005ffe:	4607      	mov	r7, r0
 8006000:	d802      	bhi.n	8006008 <_realloc_r+0x34>
 8006002:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006006:	d812      	bhi.n	800602e <_realloc_r+0x5a>
 8006008:	4621      	mov	r1, r4
 800600a:	4640      	mov	r0, r8
 800600c:	f7ff ff6e 	bl	8005eec <_malloc_r>
 8006010:	4605      	mov	r5, r0
 8006012:	2800      	cmp	r0, #0
 8006014:	d0ed      	beq.n	8005ff2 <_realloc_r+0x1e>
 8006016:	42bc      	cmp	r4, r7
 8006018:	4622      	mov	r2, r4
 800601a:	4631      	mov	r1, r6
 800601c:	bf28      	it	cs
 800601e:	463a      	movcs	r2, r7
 8006020:	f7ff fed0 	bl	8005dc4 <memcpy>
 8006024:	4631      	mov	r1, r6
 8006026:	4640      	mov	r0, r8
 8006028:	f7ff fef4 	bl	8005e14 <_free_r>
 800602c:	e7e1      	b.n	8005ff2 <_realloc_r+0x1e>
 800602e:	4635      	mov	r5, r6
 8006030:	e7df      	b.n	8005ff2 <_realloc_r+0x1e>
	...

08006034 <_sbrk_r>:
 8006034:	b538      	push	{r3, r4, r5, lr}
 8006036:	4d06      	ldr	r5, [pc, #24]	; (8006050 <_sbrk_r+0x1c>)
 8006038:	2300      	movs	r3, #0
 800603a:	4604      	mov	r4, r0
 800603c:	4608      	mov	r0, r1
 800603e:	602b      	str	r3, [r5, #0]
 8006040:	f7fb fe5e 	bl	8001d00 <_sbrk>
 8006044:	1c43      	adds	r3, r0, #1
 8006046:	d102      	bne.n	800604e <_sbrk_r+0x1a>
 8006048:	682b      	ldr	r3, [r5, #0]
 800604a:	b103      	cbz	r3, 800604e <_sbrk_r+0x1a>
 800604c:	6023      	str	r3, [r4, #0]
 800604e:	bd38      	pop	{r3, r4, r5, pc}
 8006050:	20000424 	.word	0x20000424

08006054 <__malloc_lock>:
 8006054:	4801      	ldr	r0, [pc, #4]	; (800605c <__malloc_lock+0x8>)
 8006056:	f000 b811 	b.w	800607c <__retarget_lock_acquire_recursive>
 800605a:	bf00      	nop
 800605c:	20000428 	.word	0x20000428

08006060 <__malloc_unlock>:
 8006060:	4801      	ldr	r0, [pc, #4]	; (8006068 <__malloc_unlock+0x8>)
 8006062:	f000 b80c 	b.w	800607e <__retarget_lock_release_recursive>
 8006066:	bf00      	nop
 8006068:	20000428 	.word	0x20000428

0800606c <_malloc_usable_size_r>:
 800606c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006070:	1f18      	subs	r0, r3, #4
 8006072:	2b00      	cmp	r3, #0
 8006074:	bfbc      	itt	lt
 8006076:	580b      	ldrlt	r3, [r1, r0]
 8006078:	18c0      	addlt	r0, r0, r3
 800607a:	4770      	bx	lr

0800607c <__retarget_lock_acquire_recursive>:
 800607c:	4770      	bx	lr

0800607e <__retarget_lock_release_recursive>:
 800607e:	4770      	bx	lr

08006080 <_init>:
 8006080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006082:	bf00      	nop
 8006084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006086:	bc08      	pop	{r3}
 8006088:	469e      	mov	lr, r3
 800608a:	4770      	bx	lr

0800608c <_fini>:
 800608c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800608e:	bf00      	nop
 8006090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006092:	bc08      	pop	{r3}
 8006094:	469e      	mov	lr, r3
 8006096:	4770      	bx	lr
