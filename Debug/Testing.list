
Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006634  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ea0  080067c4  080067c4  000167c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007664  08007664  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007664  08007664  00017664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800766c  0800766c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800766c  0800766c  0001766c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007670  08007670  00017670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000334  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003ac  200003ac  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013946  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000280a  00000000  00000000  000339ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001178  00000000  00000000  000361f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001068  00000000  00000000  00037370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003285  00000000  00000000  000383d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012e5b  00000000  00000000  0003b65d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5b78  00000000  00000000  0004e4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00114030  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004de8  00000000  00000000  00114080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080067ac 	.word	0x080067ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080067ac 	.word	0x080067ac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <spi1_communication>:

uint8_t chRetry = 0;
uint8_t chTemp = 0;

void spi1_communication(uint8_t send_char)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY_TX) {
 800057e:	e005      	b.n	800058c <spi1_communication+0x18>
		if (++ chRetry > 200) {
 8000580:	4b1b      	ldr	r3, [pc, #108]	; (80005f0 <spi1_communication+0x7c>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	3301      	adds	r3, #1
 8000586:	b2da      	uxtb	r2, r3
 8000588:	4b19      	ldr	r3, [pc, #100]	; (80005f0 <spi1_communication+0x7c>)
 800058a:	701a      	strb	r2, [r3, #0]
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY_TX) {
 800058c:	4819      	ldr	r0, [pc, #100]	; (80005f4 <spi1_communication+0x80>)
 800058e:	f003 ff99 	bl	80044c4 <HAL_SPI_GetState>
 8000592:	4603      	mov	r3, r0
 8000594:	2b03      	cmp	r3, #3
 8000596:	d0f3      	beq.n	8000580 <spi1_communication+0xc>

		}
	}

	//SPI_I2S_SendData(SPI1, send_char);
	HAL_SPI_Transmit(&hspi1, &send_char, 1, 100);
 8000598:	1df9      	adds	r1, r7, #7
 800059a:	2364      	movs	r3, #100	; 0x64
 800059c:	2201      	movs	r2, #1
 800059e:	4815      	ldr	r0, [pc, #84]	; (80005f4 <spi1_communication+0x80>)
 80005a0:	f003 fba1 	bl	8003ce6 <HAL_SPI_Transmit>

	chRetry=0;
 80005a4:	4b12      	ldr	r3, [pc, #72]	; (80005f0 <spi1_communication+0x7c>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	701a      	strb	r2, [r3, #0]
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY_RX){
 80005aa:	e005      	b.n	80005b8 <spi1_communication+0x44>
		if (++ chRetry > 200) {
 80005ac:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <spi1_communication+0x7c>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	3301      	adds	r3, #1
 80005b2:	b2da      	uxtb	r2, r3
 80005b4:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <spi1_communication+0x7c>)
 80005b6:	701a      	strb	r2, [r3, #0]
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY_RX){
 80005b8:	480e      	ldr	r0, [pc, #56]	; (80005f4 <spi1_communication+0x80>)
 80005ba:	f003 ff83 	bl	80044c4 <HAL_SPI_GetState>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b04      	cmp	r3, #4
 80005c2:	d0f3      	beq.n	80005ac <spi1_communication+0x38>

		}
	}

	chTemp = HAL_SPI_Receive(&hspi1, &send_char, 1, 100);
 80005c4:	1df9      	adds	r1, r7, #7
 80005c6:	2364      	movs	r3, #100	; 0x64
 80005c8:	2201      	movs	r2, #1
 80005ca:	480a      	ldr	r0, [pc, #40]	; (80005f4 <spi1_communication+0x80>)
 80005cc:	f003 fcc7 	bl	8003f5e <HAL_SPI_Receive>
 80005d0:	4603      	mov	r3, r0
 80005d2:	461a      	mov	r2, r3
 80005d4:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <spi1_communication+0x84>)
 80005d6:	701a      	strb	r2, [r3, #0]

	/* Wait until the BSY flag is set */
	while(HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY);
 80005d8:	bf00      	nop
 80005da:	4806      	ldr	r0, [pc, #24]	; (80005f4 <spi1_communication+0x80>)
 80005dc:	f003 ff72 	bl	80044c4 <HAL_SPI_GetState>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b02      	cmp	r3, #2
 80005e4:	d0f9      	beq.n	80005da <spi1_communication+0x66>
}
 80005e6:	bf00      	nop
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000094 	.word	0x20000094
 80005f4:	200000e8 	.word	0x200000e8
 80005f8:	20000095 	.word	0x20000095

080005fc <lcd_write_byte>:

void lcd_write_byte(uint8_t chByte, uint8_t chCmd)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	460a      	mov	r2, r1
 8000606:	71fb      	strb	r3, [r7, #7]
 8000608:	4613      	mov	r3, r2
 800060a:	71bb      	strb	r3, [r7, #6]
    if(chCmd) {
 800060c:	79bb      	ldrb	r3, [r7, #6]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d006      	beq.n	8000620 <lcd_write_byte+0x24>
        LCD_DC_H();
 8000612:	2201      	movs	r2, #1
 8000614:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000618:	480d      	ldr	r0, [pc, #52]	; (8000650 <lcd_write_byte+0x54>)
 800061a:	f002 fe69 	bl	80032f0 <HAL_GPIO_WritePin>
 800061e:	e005      	b.n	800062c <lcd_write_byte+0x30>
    } else {
        LCD_DC_L();
 8000620:	2200      	movs	r2, #0
 8000622:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000626:	480a      	ldr	r0, [pc, #40]	; (8000650 <lcd_write_byte+0x54>)
 8000628:	f002 fe62 	bl	80032f0 <HAL_GPIO_WritePin>
    }

    LCD_CS_L();
 800062c:	2200      	movs	r2, #0
 800062e:	2180      	movs	r1, #128	; 0x80
 8000630:	4807      	ldr	r0, [pc, #28]	; (8000650 <lcd_write_byte+0x54>)
 8000632:	f002 fe5d 	bl	80032f0 <HAL_GPIO_WritePin>
    spi1_communication(chByte);
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff ff9b 	bl	8000574 <spi1_communication>
    LCD_CS_H();
 800063e:	2201      	movs	r2, #1
 8000640:	2180      	movs	r1, #128	; 0x80
 8000642:	4803      	ldr	r0, [pc, #12]	; (8000650 <lcd_write_byte+0x54>)
 8000644:	f002 fe54 	bl	80032f0 <HAL_GPIO_WritePin>
}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40020400 	.word	0x40020400

08000654 <lcd_write_command>:

void lcd_write_command(uint8_t chRegister, uint8_t chValue)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	460a      	mov	r2, r1
 800065e:	71fb      	strb	r3, [r7, #7]
 8000660:	4613      	mov	r3, r2
 8000662:	71bb      	strb	r3, [r7, #6]
	lcd_write_byte(chRegister, LCD_CMD);
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ffc7 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 800066e:	79bb      	ldrb	r3, [r7, #6]
 8000670:	2101      	movs	r1, #1
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff ffc2 	bl	80005fc <lcd_write_byte>
}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <lcd_clear_screen>:
	lcd_write_byte(hwYpos&0xff,LCD_DATA);
#endif
}

void lcd_clear_screen(uint16_t hwColor)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	80fb      	strh	r3, [r7, #6]
	uint32_t i, wCount = LCD_WIDTH;
 800068a:	23f0      	movs	r3, #240	; 0xf0
 800068c:	60bb      	str	r3, [r7, #8]
	wCount *= LCD_HEIGHT;
 800068e:	68ba      	ldr	r2, [r7, #8]
 8000690:	4613      	mov	r3, r2
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	4413      	add	r3, r2
 8000696:	019b      	lsls	r3, r3, #6
 8000698:	60bb      	str	r3, [r7, #8]

#ifdef HX8347D_DEVICE
	lcd_set_cursor(0, 0);
	lcd_write_byte(0x22, LCD_CMD);
#elif defined ST7789_DEVICE
	lcd_write_byte(0x2A,LCD_CMD);
 800069a:	2100      	movs	r1, #0
 800069c:	202a      	movs	r0, #42	; 0x2a
 800069e:	f7ff ffad 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 80006a2:	2101      	movs	r1, #1
 80006a4:	2000      	movs	r0, #0
 80006a6:	f7ff ffa9 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 80006aa:	2101      	movs	r1, #1
 80006ac:	2000      	movs	r0, #0
 80006ae:	f7ff ffa5 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 80006b2:	2101      	movs	r1, #1
 80006b4:	2000      	movs	r0, #0
 80006b6:	f7ff ffa1 	bl	80005fc <lcd_write_byte>
	lcd_write_byte((LCD_WIDTH-1)&0xff,LCD_DATA);
 80006ba:	2101      	movs	r1, #1
 80006bc:	20ef      	movs	r0, #239	; 0xef
 80006be:	f7ff ff9d 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x2B,LCD_CMD);
 80006c2:	2100      	movs	r1, #0
 80006c4:	202b      	movs	r0, #43	; 0x2b
 80006c6:	f7ff ff99 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 80006ca:	2101      	movs	r1, #1
 80006cc:	2000      	movs	r0, #0
 80006ce:	f7ff ff95 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 80006d2:	2101      	movs	r1, #1
 80006d4:	2000      	movs	r0, #0
 80006d6:	f7ff ff91 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(((LCD_HEIGHT-1)>>8)&0xff,LCD_DATA);
 80006da:	2101      	movs	r1, #1
 80006dc:	2001      	movs	r0, #1
 80006de:	f7ff ff8d 	bl	80005fc <lcd_write_byte>
	lcd_write_byte((LCD_HEIGHT-1)&0xff,LCD_DATA);
 80006e2:	2101      	movs	r1, #1
 80006e4:	203f      	movs	r0, #63	; 0x3f
 80006e6:	f7ff ff89 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x2C,LCD_CMD);
 80006ea:	2100      	movs	r1, #0
 80006ec:	202c      	movs	r0, #44	; 0x2c
 80006ee:	f7ff ff85 	bl	80005fc <lcd_write_byte>
#endif
	LCD_CS_L();
 80006f2:	2200      	movs	r2, #0
 80006f4:	2180      	movs	r1, #128	; 0x80
 80006f6:	4814      	ldr	r0, [pc, #80]	; (8000748 <lcd_clear_screen+0xc8>)
 80006f8:	f002 fdfa 	bl	80032f0 <HAL_GPIO_WritePin>
	LCD_DC_H();
 80006fc:	2201      	movs	r2, #1
 80006fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000702:	4811      	ldr	r0, [pc, #68]	; (8000748 <lcd_clear_screen+0xc8>)
 8000704:	f002 fdf4 	bl	80032f0 <HAL_GPIO_WritePin>
	for(i=0;i<wCount;i++){
 8000708:	2300      	movs	r3, #0
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	e00e      	b.n	800072c <lcd_clear_screen+0xac>
		spi1_communication(hwColor>>8);

//		spi1_communication(hwColor>>8);
//		spi1_communication((uint8_t)(hwColor&0xff));
#elif defined ST7789_DEVICE
		spi1_communication(hwColor>>8);
 800070e:	88fb      	ldrh	r3, [r7, #6]
 8000710:	0a1b      	lsrs	r3, r3, #8
 8000712:	b29b      	uxth	r3, r3
 8000714:	b2db      	uxtb	r3, r3
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff ff2c 	bl	8000574 <spi1_communication>
		spi1_communication((uint8_t)(hwColor&0xff));
 800071c:	88fb      	ldrh	r3, [r7, #6]
 800071e:	b2db      	uxtb	r3, r3
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff ff27 	bl	8000574 <spi1_communication>
	for(i=0;i<wCount;i++){
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	3301      	adds	r3, #1
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fa      	ldr	r2, [r7, #12]
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	429a      	cmp	r2, r3
 8000732:	d3ec      	bcc.n	800070e <lcd_clear_screen+0x8e>
#endif
	}
	LCD_CS_H();
 8000734:	2201      	movs	r2, #1
 8000736:	2180      	movs	r1, #128	; 0x80
 8000738:	4803      	ldr	r0, [pc, #12]	; (8000748 <lcd_clear_screen+0xc8>)
 800073a:	f002 fdd9 	bl	80032f0 <HAL_GPIO_WritePin>
}
 800073e:	bf00      	nop
 8000740:	3710      	adds	r7, #16
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40020400 	.word	0x40020400

0800074c <lcd_init>:

void lcd_init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	//lcd_ctrl_port_init();
	LCD_RST_H();
 8000750:	2201      	movs	r2, #1
 8000752:	2104      	movs	r1, #4
 8000754:	4881      	ldr	r0, [pc, #516]	; (800095c <lcd_init+0x210>)
 8000756:	f002 fdcb 	bl	80032f0 <HAL_GPIO_WritePin>
	//spi_init();

	LCD_CS_H();
 800075a:	2201      	movs	r2, #1
 800075c:	2180      	movs	r1, #128	; 0x80
 800075e:	487f      	ldr	r0, [pc, #508]	; (800095c <lcd_init+0x210>)
 8000760:	f002 fdc6 	bl	80032f0 <HAL_GPIO_WritePin>
	LCD_BKL_H();
 8000764:	2201      	movs	r2, #1
 8000766:	2140      	movs	r1, #64	; 0x40
 8000768:	487c      	ldr	r0, [pc, #496]	; (800095c <lcd_init+0x210>)
 800076a:	f002 fdc1 	bl	80032f0 <HAL_GPIO_WritePin>
#ifdef 	ST7789_DEVICE
	LCD_RST_H();
 800076e:	2201      	movs	r2, #1
 8000770:	2104      	movs	r1, #4
 8000772:	487a      	ldr	r0, [pc, #488]	; (800095c <lcd_init+0x210>)
 8000774:	f002 fdbc 	bl	80032f0 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000778:	2005      	movs	r0, #5
 800077a:	f001 fbfd 	bl	8001f78 <HAL_Delay>
	LCD_RST_L();
 800077e:	2200      	movs	r2, #0
 8000780:	2104      	movs	r1, #4
 8000782:	4876      	ldr	r0, [pc, #472]	; (800095c <lcd_init+0x210>)
 8000784:	f002 fdb4 	bl	80032f0 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000788:	2005      	movs	r0, #5
 800078a:	f001 fbf5 	bl	8001f78 <HAL_Delay>
	LCD_RST_H();
 800078e:	2201      	movs	r2, #1
 8000790:	2104      	movs	r1, #4
 8000792:	4872      	ldr	r0, [pc, #456]	; (800095c <lcd_init+0x210>)
 8000794:	f002 fdac 	bl	80032f0 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000798:	2005      	movs	r0, #5
 800079a:	f001 fbed 	bl	8001f78 <HAL_Delay>
	LCD_CS_H();
 800079e:	2201      	movs	r2, #1
 80007a0:	2180      	movs	r1, #128	; 0x80
 80007a2:	486e      	ldr	r0, [pc, #440]	; (800095c <lcd_init+0x210>)
 80007a4:	f002 fda4 	bl	80032f0 <HAL_GPIO_WritePin>
	lcd_write_command(0x07,0x00);
	lcd_write_command(0x08,0x01);
	lcd_write_command(0x09,0x3F);

#elif defined ST7789_DEVICE
	lcd_write_byte(0x11,LCD_CMD);
 80007a8:	2100      	movs	r1, #0
 80007aa:	2011      	movs	r0, #17
 80007ac:	f7ff ff26 	bl	80005fc <lcd_write_byte>
	HAL_Delay(10);
 80007b0:	200a      	movs	r0, #10
 80007b2:	f001 fbe1 	bl	8001f78 <HAL_Delay>
	lcd_write_command(0x36,0x00);
 80007b6:	2100      	movs	r1, #0
 80007b8:	2036      	movs	r0, #54	; 0x36
 80007ba:	f7ff ff4b 	bl	8000654 <lcd_write_command>
	lcd_write_command(0x3a,0x05);
 80007be:	2105      	movs	r1, #5
 80007c0:	203a      	movs	r0, #58	; 0x3a
 80007c2:	f7ff ff47 	bl	8000654 <lcd_write_command>
	lcd_write_byte(0xb2,LCD_CMD);
 80007c6:	2100      	movs	r1, #0
 80007c8:	20b2      	movs	r0, #178	; 0xb2
 80007ca:	f7ff ff17 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x0c,LCD_DATA);
 80007ce:	2101      	movs	r1, #1
 80007d0:	200c      	movs	r0, #12
 80007d2:	f7ff ff13 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x0c,LCD_DATA);
 80007d6:	2101      	movs	r1, #1
 80007d8:	200c      	movs	r0, #12
 80007da:	f7ff ff0f 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 80007de:	2101      	movs	r1, #1
 80007e0:	2000      	movs	r0, #0
 80007e2:	f7ff ff0b 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x33,LCD_DATA);
 80007e6:	2101      	movs	r1, #1
 80007e8:	2033      	movs	r0, #51	; 0x33
 80007ea:	f7ff ff07 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x33,LCD_DATA);
 80007ee:	2101      	movs	r1, #1
 80007f0:	2033      	movs	r0, #51	; 0x33
 80007f2:	f7ff ff03 	bl	80005fc <lcd_write_byte>
	lcd_write_command(0xb7,0x35);
 80007f6:	2135      	movs	r1, #53	; 0x35
 80007f8:	20b7      	movs	r0, #183	; 0xb7
 80007fa:	f7ff ff2b 	bl	8000654 <lcd_write_command>
	lcd_write_command(0xbb,0x28);
 80007fe:	2128      	movs	r1, #40	; 0x28
 8000800:	20bb      	movs	r0, #187	; 0xbb
 8000802:	f7ff ff27 	bl	8000654 <lcd_write_command>
	lcd_write_command(0xc0,0x3c);
 8000806:	213c      	movs	r1, #60	; 0x3c
 8000808:	20c0      	movs	r0, #192	; 0xc0
 800080a:	f7ff ff23 	bl	8000654 <lcd_write_command>
	lcd_write_command(0xc2,0x01);
 800080e:	2101      	movs	r1, #1
 8000810:	20c2      	movs	r0, #194	; 0xc2
 8000812:	f7ff ff1f 	bl	8000654 <lcd_write_command>
	lcd_write_command(0xc3,0x0b);
 8000816:	210b      	movs	r1, #11
 8000818:	20c3      	movs	r0, #195	; 0xc3
 800081a:	f7ff ff1b 	bl	8000654 <lcd_write_command>
	lcd_write_command(0xc4,0x20);
 800081e:	2120      	movs	r1, #32
 8000820:	20c4      	movs	r0, #196	; 0xc4
 8000822:	f7ff ff17 	bl	8000654 <lcd_write_command>
	lcd_write_command(0xc6,0x0f);
 8000826:	210f      	movs	r1, #15
 8000828:	20c6      	movs	r0, #198	; 0xc6
 800082a:	f7ff ff13 	bl	8000654 <lcd_write_command>
	lcd_write_byte(0xD0,LCD_CMD);
 800082e:	2100      	movs	r1, #0
 8000830:	20d0      	movs	r0, #208	; 0xd0
 8000832:	f7ff fee3 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0xa4,LCD_DATA);
 8000836:	2101      	movs	r1, #1
 8000838:	20a4      	movs	r0, #164	; 0xa4
 800083a:	f7ff fedf 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0xa1,LCD_DATA);
 800083e:	2101      	movs	r1, #1
 8000840:	20a1      	movs	r0, #161	; 0xa1
 8000842:	f7ff fedb 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0xe0,LCD_CMD);
 8000846:	2100      	movs	r1, #0
 8000848:	20e0      	movs	r0, #224	; 0xe0
 800084a:	f7ff fed7 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0xd0,LCD_DATA);
 800084e:	2101      	movs	r1, #1
 8000850:	20d0      	movs	r0, #208	; 0xd0
 8000852:	f7ff fed3 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x01,LCD_DATA);
 8000856:	2101      	movs	r1, #1
 8000858:	2001      	movs	r0, #1
 800085a:	f7ff fecf 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x08,LCD_DATA);
 800085e:	2101      	movs	r1, #1
 8000860:	2008      	movs	r0, #8
 8000862:	f7ff fecb 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x0f,LCD_DATA);
 8000866:	2101      	movs	r1, #1
 8000868:	200f      	movs	r0, #15
 800086a:	f7ff fec7 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x11,LCD_DATA);
 800086e:	2101      	movs	r1, #1
 8000870:	2011      	movs	r0, #17
 8000872:	f7ff fec3 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x2a,LCD_DATA);
 8000876:	2101      	movs	r1, #1
 8000878:	202a      	movs	r0, #42	; 0x2a
 800087a:	f7ff febf 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x36,LCD_DATA);
 800087e:	2101      	movs	r1, #1
 8000880:	2036      	movs	r0, #54	; 0x36
 8000882:	f7ff febb 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x55,LCD_DATA);
 8000886:	2101      	movs	r1, #1
 8000888:	2055      	movs	r0, #85	; 0x55
 800088a:	f7ff feb7 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x44,LCD_DATA);
 800088e:	2101      	movs	r1, #1
 8000890:	2044      	movs	r0, #68	; 0x44
 8000892:	f7ff feb3 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x3a,LCD_DATA);
 8000896:	2101      	movs	r1, #1
 8000898:	203a      	movs	r0, #58	; 0x3a
 800089a:	f7ff feaf 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x0b,LCD_DATA);
 800089e:	2101      	movs	r1, #1
 80008a0:	200b      	movs	r0, #11
 80008a2:	f7ff feab 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x06,LCD_DATA);
 80008a6:	2101      	movs	r1, #1
 80008a8:	2006      	movs	r0, #6
 80008aa:	f7ff fea7 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x11,LCD_DATA);
 80008ae:	2101      	movs	r1, #1
 80008b0:	2011      	movs	r0, #17
 80008b2:	f7ff fea3 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x20,LCD_DATA);
 80008b6:	2101      	movs	r1, #1
 80008b8:	2020      	movs	r0, #32
 80008ba:	f7ff fe9f 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0xe1,LCD_CMD);
 80008be:	2100      	movs	r1, #0
 80008c0:	20e1      	movs	r0, #225	; 0xe1
 80008c2:	f7ff fe9b 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0xd0,LCD_DATA);
 80008c6:	2101      	movs	r1, #1
 80008c8:	20d0      	movs	r0, #208	; 0xd0
 80008ca:	f7ff fe97 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x02,LCD_DATA);
 80008ce:	2101      	movs	r1, #1
 80008d0:	2002      	movs	r0, #2
 80008d2:	f7ff fe93 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x07,LCD_DATA);
 80008d6:	2101      	movs	r1, #1
 80008d8:	2007      	movs	r0, #7
 80008da:	f7ff fe8f 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x0a,LCD_DATA);
 80008de:	2101      	movs	r1, #1
 80008e0:	200a      	movs	r0, #10
 80008e2:	f7ff fe8b 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x0b,LCD_DATA);
 80008e6:	2101      	movs	r1, #1
 80008e8:	200b      	movs	r0, #11
 80008ea:	f7ff fe87 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x18,LCD_DATA);
 80008ee:	2101      	movs	r1, #1
 80008f0:	2018      	movs	r0, #24
 80008f2:	f7ff fe83 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x34,LCD_DATA);
 80008f6:	2101      	movs	r1, #1
 80008f8:	2034      	movs	r0, #52	; 0x34
 80008fa:	f7ff fe7f 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x43,LCD_DATA);
 80008fe:	2101      	movs	r1, #1
 8000900:	2043      	movs	r0, #67	; 0x43
 8000902:	f7ff fe7b 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x4a,LCD_DATA);
 8000906:	2101      	movs	r1, #1
 8000908:	204a      	movs	r0, #74	; 0x4a
 800090a:	f7ff fe77 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x2b,LCD_DATA);
 800090e:	2101      	movs	r1, #1
 8000910:	202b      	movs	r0, #43	; 0x2b
 8000912:	f7ff fe73 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x1b,LCD_DATA);
 8000916:	2101      	movs	r1, #1
 8000918:	201b      	movs	r0, #27
 800091a:	f7ff fe6f 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x1c,LCD_DATA);
 800091e:	2101      	movs	r1, #1
 8000920:	201c      	movs	r0, #28
 8000922:	f7ff fe6b 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x22,LCD_DATA);
 8000926:	2101      	movs	r1, #1
 8000928:	2022      	movs	r0, #34	; 0x22
 800092a:	f7ff fe67 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x1f,LCD_DATA);
 800092e:	2101      	movs	r1, #1
 8000930:	201f      	movs	r0, #31
 8000932:	f7ff fe63 	bl	80005fc <lcd_write_byte>
	lcd_write_byte(0x29,LCD_CMD);
 8000936:	2100      	movs	r1, #0
 8000938:	2029      	movs	r0, #41	; 0x29
 800093a:	f7ff fe5f 	bl	80005fc <lcd_write_byte>
	lcd_write_command(0x51,0xff);
 800093e:	21ff      	movs	r1, #255	; 0xff
 8000940:	2051      	movs	r0, #81	; 0x51
 8000942:	f7ff fe87 	bl	8000654 <lcd_write_command>
	lcd_write_command(0x55,0xB0);
 8000946:	21b0      	movs	r1, #176	; 0xb0
 8000948:	2055      	movs	r0, #85	; 0x55
 800094a:	f7ff fe83 	bl	8000654 <lcd_write_command>
#endif

	lcd_clear_screen(WHITE);
 800094e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000952:	f7ff fe95 	bl	8000680 <lcd_clear_screen>
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40020400 	.word	0x40020400

08000960 <CAN1_filter_init>:
static void MX_CAN2_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM2_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */
void CAN1_filter_init(){
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
	canfil1.FilterBank = 10;
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <CAN1_filter_init+0x50>)
 8000966:	220a      	movs	r2, #10
 8000968:	615a      	str	r2, [r3, #20]
	canfil1.FilterMode = CAN_FILTERMODE_IDMASK;
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <CAN1_filter_init+0x50>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
	canfil1.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <CAN1_filter_init+0x50>)
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]
	canfil1.FilterIdHigh = 0x0A2 << 5;
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <CAN1_filter_init+0x50>)
 8000978:	f44f 52a2 	mov.w	r2, #5184	; 0x1440
 800097c:	601a      	str	r2, [r3, #0]
	canfil1.FilterIdLow = 0;
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <CAN1_filter_init+0x50>)
 8000980:	2200      	movs	r2, #0
 8000982:	605a      	str	r2, [r3, #4]
	canfil1.FilterMaskIdHigh = 0x0A2 << 5;
 8000984:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <CAN1_filter_init+0x50>)
 8000986:	f44f 52a2 	mov.w	r2, #5184	; 0x1440
 800098a:	609a      	str	r2, [r3, #8]
	canfil1.FilterMaskIdLow = 0;
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <CAN1_filter_init+0x50>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
	canfil1.FilterScale = CAN_FILTERSCALE_32BIT;
 8000992:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <CAN1_filter_init+0x50>)
 8000994:	2201      	movs	r2, #1
 8000996:	61da      	str	r2, [r3, #28]
	canfil1.FilterActivation = ENABLE;
 8000998:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <CAN1_filter_init+0x50>)
 800099a:	2201      	movs	r2, #1
 800099c:	621a      	str	r2, [r3, #32]
	canfil1.SlaveStartFilterBank = 14;
 800099e:	4b04      	ldr	r3, [pc, #16]	; (80009b0 <CAN1_filter_init+0x50>)
 80009a0:	220e      	movs	r2, #14
 80009a2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	20000234 	.word	0x20000234

080009b4 <CAN2_filter_init>:

void CAN2_filter_init(){
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
	canfil2.FilterBank = 20;
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <CAN2_filter_init+0x50>)
 80009ba:	2214      	movs	r2, #20
 80009bc:	615a      	str	r2, [r3, #20]
	canfil2.FilterMode = CAN_FILTERMODE_IDMASK;
 80009be:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <CAN2_filter_init+0x50>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
	canfil2.FilterFIFOAssignment = CAN_RX_FIFO1;
 80009c4:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <CAN2_filter_init+0x50>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	611a      	str	r2, [r3, #16]
	canfil2.FilterIdHigh = 0x012 << 5;
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <CAN2_filter_init+0x50>)
 80009cc:	f44f 7210 	mov.w	r2, #576	; 0x240
 80009d0:	601a      	str	r2, [r3, #0]
	canfil2.FilterIdLow = 0;
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <CAN2_filter_init+0x50>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	605a      	str	r2, [r3, #4]
	canfil2.FilterMaskIdHigh = 0x012 << 5;
 80009d8:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <CAN2_filter_init+0x50>)
 80009da:	f44f 7210 	mov.w	r2, #576	; 0x240
 80009de:	609a      	str	r2, [r3, #8]
	canfil2.FilterMaskIdLow = 0;
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <CAN2_filter_init+0x50>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
	canfil2.FilterScale = CAN_FILTERSCALE_32BIT;
 80009e6:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <CAN2_filter_init+0x50>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	61da      	str	r2, [r3, #28]
	canfil2.FilterActivation = ENABLE;
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <CAN2_filter_init+0x50>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	621a      	str	r2, [r3, #32]
	canfil2.SlaveStartFilterBank = 14;
 80009f2:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <CAN2_filter_init+0x50>)
 80009f4:	220e      	movs	r2, #14
 80009f6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	2000025c 	.word	0x2000025c

08000a08 <calculate_crc_sae_j1850>:

uint8_t calculate_crc_sae_j1850(uint8_t *data, int length){
 8000a08:	b480      	push	{r7}
 8000a0a:	b087      	sub	sp, #28
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	6039      	str	r1, [r7, #0]
	 uint8_t polynomial = 0x1D; // Generator polynomial for CRC-8 SAE J1850
 8000a12:	231d      	movs	r3, #29
 8000a14:	72fb      	strb	r3, [r7, #11]
	 uint8_t remainder = 0xFF;
 8000a16:	23ff      	movs	r3, #255	; 0xff
 8000a18:	75fb      	strb	r3, [r7, #23]

	    for (int i = 0; i < length; i++) {
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	613b      	str	r3, [r7, #16]
 8000a1e:	e022      	b.n	8000a66 <calculate_crc_sae_j1850+0x5e>
	        remainder ^= data[i];
 8000a20:	693b      	ldr	r3, [r7, #16]
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	4413      	add	r3, r2
 8000a26:	781a      	ldrb	r2, [r3, #0]
 8000a28:	7dfb      	ldrb	r3, [r7, #23]
 8000a2a:	4053      	eors	r3, r2
 8000a2c:	75fb      	strb	r3, [r7, #23]
	        for (int bit = 0; bit < 8; bit++) {
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	e012      	b.n	8000a5a <calculate_crc_sae_j1850+0x52>
	            if (remainder & 0x80) {
 8000a34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	da08      	bge.n	8000a4e <calculate_crc_sae_j1850+0x46>
	                remainder = (remainder << 1) ^ polynomial;
 8000a3c:	7dfb      	ldrb	r3, [r7, #23]
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	b25a      	sxtb	r2, r3
 8000a42:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000a46:	4053      	eors	r3, r2
 8000a48:	b25b      	sxtb	r3, r3
 8000a4a:	75fb      	strb	r3, [r7, #23]
 8000a4c:	e002      	b.n	8000a54 <calculate_crc_sae_j1850+0x4c>
	            } else {
	                remainder <<= 1;
 8000a4e:	7dfb      	ldrb	r3, [r7, #23]
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	75fb      	strb	r3, [r7, #23]
	        for (int bit = 0; bit < 8; bit++) {
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	3301      	adds	r3, #1
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	2b07      	cmp	r3, #7
 8000a5e:	dde9      	ble.n	8000a34 <calculate_crc_sae_j1850+0x2c>
	    for (int i = 0; i < length; i++) {
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	3301      	adds	r3, #1
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	dbd8      	blt.n	8000a20 <calculate_crc_sae_j1850+0x18>
	            }
	        }
	    }

	    return remainder ^ 0xFF; // Invert the bits
 8000a6e:	7dfb      	ldrb	r3, [r7, #23]
 8000a70:	43db      	mvns	r3, r3
 8000a72:	b2db      	uxtb	r3, r3
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	371c      	adds	r7, #28
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <Tx1_message_define>:

void Tx1_message_define(){
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
	tx1Header.DLC = 8;
 8000a84:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <Tx1_message_define+0x34>)
 8000a86:	2208      	movs	r2, #8
 8000a88:	611a      	str	r2, [r3, #16]
	tx1Header.IDE = CAN_ID_STD;
 8000a8a:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <Tx1_message_define+0x34>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
	tx1Header.RTR = CAN_RTR_DATA;
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <Tx1_message_define+0x34>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	60da      	str	r2, [r3, #12]
	tx1Header.StdId = 0x012;
 8000a96:	4b07      	ldr	r3, [pc, #28]	; (8000ab4 <Tx1_message_define+0x34>)
 8000a98:	2212      	movs	r2, #18
 8000a9a:	601a      	str	r2, [r3, #0]
	tx1Header.ExtId = 0x02;
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <Tx1_message_define+0x34>)
 8000a9e:	2202      	movs	r2, #2
 8000aa0:	605a      	str	r2, [r3, #4]
	tx1Header.TransmitGlobalTime = DISABLE;
 8000aa2:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <Tx1_message_define+0x34>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	751a      	strb	r2, [r3, #20]
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	200001e8 	.word	0x200001e8

08000ab8 <Tx2_message_define>:

void Tx2_message_define(){
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
	tx2Header.DLC = 8;
 8000abc:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <Tx2_message_define+0x34>)
 8000abe:	2208      	movs	r2, #8
 8000ac0:	611a      	str	r2, [r3, #16]
	tx2Header.IDE = CAN_ID_STD;
 8000ac2:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <Tx2_message_define+0x34>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
	tx2Header.RTR = CAN_RTR_DATA;
 8000ac8:	4b08      	ldr	r3, [pc, #32]	; (8000aec <Tx2_message_define+0x34>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
	tx2Header.StdId = 0x0A2;
 8000ace:	4b07      	ldr	r3, [pc, #28]	; (8000aec <Tx2_message_define+0x34>)
 8000ad0:	22a2      	movs	r2, #162	; 0xa2
 8000ad2:	601a      	str	r2, [r3, #0]
	tx2Header.ExtId = 0x02;
 8000ad4:	4b05      	ldr	r3, [pc, #20]	; (8000aec <Tx2_message_define+0x34>)
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	605a      	str	r2, [r3, #4]
	tx2Header.TransmitGlobalTime = DISABLE;
 8000ada:	4b04      	ldr	r3, [pc, #16]	; (8000aec <Tx2_message_define+0x34>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	751a      	strb	r2, [r3, #20]
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	2000021c 	.word	0x2000021c

08000af0 <Tx2_data>:

void Tx2_data(){
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
	Tx2Data[0] = 0x22;
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <Tx2_data+0x1c>)
 8000af6:	2222      	movs	r2, #34	; 0x22
 8000af8:	701a      	strb	r2, [r3, #0]
	Tx2Data[1] = 0x12;
 8000afa:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <Tx2_data+0x1c>)
 8000afc:	2212      	movs	r2, #18
 8000afe:	705a      	strb	r2, [r3, #1]
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	20000290 	.word	0x20000290

08000b10 <Tx1_data>:

void Tx1_data(){
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
	Tx1Data[0] = Tx2Data[0];
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <Tx1_data+0x38>)
 8000b16:	781a      	ldrb	r2, [r3, #0]
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <Tx1_data+0x3c>)
 8000b1a:	701a      	strb	r2, [r3, #0]
	Tx1Data[1] = Tx2Data[1];
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <Tx1_data+0x38>)
 8000b1e:	785a      	ldrb	r2, [r3, #1]
 8000b20:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <Tx1_data+0x3c>)
 8000b22:	705a      	strb	r2, [r3, #1]
	Tx1Data[2] = Tx2Data[0] + Tx2Data[1];
 8000b24:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <Tx1_data+0x38>)
 8000b26:	781a      	ldrb	r2, [r3, #0]
 8000b28:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <Tx1_data+0x38>)
 8000b2a:	785b      	ldrb	r3, [r3, #1]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <Tx1_data+0x3c>)
 8000b32:	709a      	strb	r2, [r3, #2]
	Tx1Data[7] = calculate_crc_sae_j1850(&Tx1Data[0], 7);
 8000b34:	2107      	movs	r1, #7
 8000b36:	4805      	ldr	r0, [pc, #20]	; (8000b4c <Tx1_data+0x3c>)
 8000b38:	f7ff ff66 	bl	8000a08 <calculate_crc_sae_j1850>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	461a      	mov	r2, r3
 8000b40:	4b02      	ldr	r3, [pc, #8]	; (8000b4c <Tx1_data+0x3c>)
 8000b42:	71da      	strb	r2, [r3, #7]
}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000290 	.word	0x20000290
 8000b4c:	20000288 	.word	0x20000288

08000b50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b54:	f001 f99e 	bl	8001e94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b58:	f000 f862 	bl	8000c20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b5c:	f000 f9e0 	bl	8000f20 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000b60:	f000 f8c6 	bl	8000cf0 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000b64:	f000 f8fa 	bl	8000d5c <MX_CAN2_Init>
  MX_USART2_UART_Init();
 8000b68:	f000 f9b0 	bl	8000ecc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000b6c:	f000 f962 	bl	8000e34 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000b70:	f000 f92a 	bl	8000dc8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  CAN1_filter_init();
 8000b74:	f7ff fef4 	bl	8000960 <CAN1_filter_init>
  CAN2_filter_init();
 8000b78:	f7ff ff1c 	bl	80009b4 <CAN2_filter_init>

  Tx1_message_define();
 8000b7c:	f7ff ff80 	bl	8000a80 <Tx1_message_define>
  Tx2_message_define();
 8000b80:	f7ff ff9a 	bl	8000ab8 <Tx2_message_define>

  Tx2_data();
 8000b84:	f7ff ffb4 	bl	8000af0 <Tx2_data>
  Tx1_data();
 8000b88:	f7ff ffc2 	bl	8000b10 <Tx1_data>

  HAL_TIM_Base_Start_IT(&htim2);
 8000b8c:	481a      	ldr	r0, [pc, #104]	; (8000bf8 <main+0xa8>)
 8000b8e:	f003 fe27 	bl	80047e0 <HAL_TIM_Base_Start_IT>

  HAL_CAN_Start(&hcan1);
 8000b92:	481a      	ldr	r0, [pc, #104]	; (8000bfc <main+0xac>)
 8000b94:	f001 fbf0 	bl	8002378 <HAL_CAN_Start>
  HAL_CAN_Start(&hcan2);
 8000b98:	4819      	ldr	r0, [pc, #100]	; (8000c00 <main+0xb0>)
 8000b9a:	f001 fbed 	bl	8002378 <HAL_CAN_Start>
  HAL_CAN_ConfigFilter(&hcan1,&canfil1);
 8000b9e:	4919      	ldr	r1, [pc, #100]	; (8000c04 <main+0xb4>)
 8000ba0:	4816      	ldr	r0, [pc, #88]	; (8000bfc <main+0xac>)
 8000ba2:	f001 fb09 	bl	80021b8 <HAL_CAN_ConfigFilter>
  HAL_CAN_ConfigFilter(&hcan2,&canfil2);
 8000ba6:	4918      	ldr	r1, [pc, #96]	; (8000c08 <main+0xb8>)
 8000ba8:	4815      	ldr	r0, [pc, #84]	; (8000c00 <main+0xb0>)
 8000baa:	f001 fb05 	bl	80021b8 <HAL_CAN_ConfigFilter>

  HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING);
 8000bae:	2102      	movs	r1, #2
 8000bb0:	4812      	ldr	r0, [pc, #72]	; (8000bfc <main+0xac>)
 8000bb2:	f001 fe12 	bl	80027da <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan2,CAN_IT_RX_FIFO1_MSG_PENDING);
 8000bb6:	2110      	movs	r1, #16
 8000bb8:	4811      	ldr	r0, [pc, #68]	; (8000c00 <main+0xb0>)
 8000bba:	f001 fe0e 	bl	80027da <HAL_CAN_ActivateNotification>

  lcd_init();
 8000bbe:	f7ff fdc5 	bl	800074c <lcd_init>
  ST7789_Init();
 8000bc2:	f000 fc6d 	bl	80014a0 <ST7789_Init>

//  ST7789_WriteString(0, 0, "..............................................", Font_7x10, RED, WHITE);
  	setTimer1(10);
 8000bc6:	200a      	movs	r0, #10
 8000bc8:	f001 f86a 	bl	8001ca0 <setTimer1>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(timer1_flag){
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <main+0xbc>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d0fb      	beq.n	8000bcc <main+0x7c>
		  if(HAL_CAN_AddTxMessage(&hcan2,&tx2Header,Tx2Data,&canMailbox) == HAL_OK){
 8000bd4:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <main+0xc0>)
 8000bd6:	4a0f      	ldr	r2, [pc, #60]	; (8000c14 <main+0xc4>)
 8000bd8:	490f      	ldr	r1, [pc, #60]	; (8000c18 <main+0xc8>)
 8000bda:	4809      	ldr	r0, [pc, #36]	; (8000c00 <main+0xb0>)
 8000bdc:	f001 fc10 	bl	8002400 <HAL_CAN_AddTxMessage>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d104      	bne.n	8000bf0 <main+0xa0>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8000be6:	2201      	movs	r2, #1
 8000be8:	2102      	movs	r1, #2
 8000bea:	480c      	ldr	r0, [pc, #48]	; (8000c1c <main+0xcc>)
 8000bec:	f002 fb80 	bl	80032f0 <HAL_GPIO_WritePin>
		  }
		  setTimer1(100);
 8000bf0:	2064      	movs	r0, #100	; 0x64
 8000bf2:	f001 f855 	bl	8001ca0 <setTimer1>
	  if(timer1_flag){
 8000bf6:	e7e9      	b.n	8000bcc <main+0x7c>
 8000bf8:	20000140 	.word	0x20000140
 8000bfc:	20000098 	.word	0x20000098
 8000c00:	200000c0 	.word	0x200000c0
 8000c04:	20000234 	.word	0x20000234
 8000c08:	2000025c 	.word	0x2000025c
 8000c0c:	20000354 	.word	0x20000354
 8000c10:	20000284 	.word	0x20000284
 8000c14:	20000290 	.word	0x20000290
 8000c18:	2000021c 	.word	0x2000021c
 8000c1c:	40020400 	.word	0x40020400

08000c20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b094      	sub	sp, #80	; 0x50
 8000c24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c26:	f107 0320 	add.w	r3, r7, #32
 8000c2a:	2230      	movs	r2, #48	; 0x30
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f005 f946 	bl	8005ec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c34:	f107 030c 	add.w	r3, r7, #12
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c44:	2300      	movs	r3, #0
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	4b27      	ldr	r3, [pc, #156]	; (8000ce8 <SystemClock_Config+0xc8>)
 8000c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4c:	4a26      	ldr	r2, [pc, #152]	; (8000ce8 <SystemClock_Config+0xc8>)
 8000c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c52:	6413      	str	r3, [r2, #64]	; 0x40
 8000c54:	4b24      	ldr	r3, [pc, #144]	; (8000ce8 <SystemClock_Config+0xc8>)
 8000c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c60:	2300      	movs	r3, #0
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	4b21      	ldr	r3, [pc, #132]	; (8000cec <SystemClock_Config+0xcc>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a20      	ldr	r2, [pc, #128]	; (8000cec <SystemClock_Config+0xcc>)
 8000c6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c6e:	6013      	str	r3, [r2, #0]
 8000c70:	4b1e      	ldr	r3, [pc, #120]	; (8000cec <SystemClock_Config+0xcc>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c80:	2301      	movs	r3, #1
 8000c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c84:	2310      	movs	r3, #16
 8000c86:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c90:	2308      	movs	r3, #8
 8000c92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000c94:	2350      	movs	r3, #80	; 0x50
 8000c96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c9c:	2304      	movs	r3, #4
 8000c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca0:	f107 0320 	add.w	r3, r7, #32
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f002 fb3d 	bl	8003324 <HAL_RCC_OscConfig>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000cb0:	f000 fae8 	bl	8001284 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb4:	230f      	movs	r3, #15
 8000cb6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000cbc:	2380      	movs	r3, #128	; 0x80
 8000cbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000cc8:	f107 030c 	add.w	r3, r7, #12
 8000ccc:	2101      	movs	r1, #1
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f002 fda0 	bl	8003814 <HAL_RCC_ClockConfig>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000cda:	f000 fad3 	bl	8001284 <Error_Handler>
  }
}
 8000cde:	bf00      	nop
 8000ce0:	3750      	adds	r7, #80	; 0x50
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40007000 	.word	0x40007000

08000cf0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000cf4:	4b17      	ldr	r3, [pc, #92]	; (8000d54 <MX_CAN1_Init+0x64>)
 8000cf6:	4a18      	ldr	r2, [pc, #96]	; (8000d58 <MX_CAN1_Init+0x68>)
 8000cf8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 20;
 8000cfa:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <MX_CAN1_Init+0x64>)
 8000cfc:	2214      	movs	r2, #20
 8000cfe:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000d00:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <MX_CAN1_Init+0x64>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d06:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <MX_CAN1_Init+0x64>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000d0c:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <MX_CAN1_Init+0x64>)
 8000d0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d12:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000d14:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <MX_CAN1_Init+0x64>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <MX_CAN1_Init+0x64>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <MX_CAN1_Init+0x64>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <MX_CAN1_Init+0x64>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000d2c:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <MX_CAN1_Init+0x64>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000d32:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <MX_CAN1_Init+0x64>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <MX_CAN1_Init+0x64>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000d3e:	4805      	ldr	r0, [pc, #20]	; (8000d54 <MX_CAN1_Init+0x64>)
 8000d40:	f001 f93e 	bl	8001fc0 <HAL_CAN_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000d4a:	f000 fa9b 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000098 	.word	0x20000098
 8000d58:	40006400 	.word	0x40006400

08000d5c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000d60:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <MX_CAN2_Init+0x64>)
 8000d62:	4a18      	ldr	r2, [pc, #96]	; (8000dc4 <MX_CAN2_Init+0x68>)
 8000d64:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 20;
 8000d66:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <MX_CAN2_Init+0x64>)
 8000d68:	2214      	movs	r2, #20
 8000d6a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <MX_CAN2_Init+0x64>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d72:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <MX_CAN2_Init+0x64>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000d78:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <MX_CAN2_Init+0x64>)
 8000d7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d7e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000d80:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <MX_CAN2_Init+0x64>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <MX_CAN2_Init+0x64>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <MX_CAN2_Init+0x64>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000d92:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <MX_CAN2_Init+0x64>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000d98:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <MX_CAN2_Init+0x64>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000d9e:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <MX_CAN2_Init+0x64>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <MX_CAN2_Init+0x64>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000daa:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <MX_CAN2_Init+0x64>)
 8000dac:	f001 f908 	bl	8001fc0 <HAL_CAN_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8000db6:	f000 fa65 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	200000c0 	.word	0x200000c0
 8000dc4:	40006800 	.word	0x40006800

08000dc8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000dcc:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <MX_SPI1_Init+0x64>)
 8000dce:	4a18      	ldr	r2, [pc, #96]	; (8000e30 <MX_SPI1_Init+0x68>)
 8000dd0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dd2:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <MX_SPI1_Init+0x64>)
 8000dd4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000dd8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dda:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <MX_SPI1_Init+0x64>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <MX_SPI1_Init+0x64>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <MX_SPI1_Init+0x64>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dec:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <MX_SPI1_Init+0x64>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <MX_SPI1_Init+0x64>)
 8000df4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000df8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <MX_SPI1_Init+0x64>)
 8000dfc:	2218      	movs	r2, #24
 8000dfe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e00:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <MX_SPI1_Init+0x64>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e06:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <MX_SPI1_Init+0x64>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e0c:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <MX_SPI1_Init+0x64>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <MX_SPI1_Init+0x64>)
 8000e14:	220a      	movs	r2, #10
 8000e16:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e18:	4804      	ldr	r0, [pc, #16]	; (8000e2c <MX_SPI1_Init+0x64>)
 8000e1a:	f002 fedb 	bl	8003bd4 <HAL_SPI_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e24:	f000 fa2e 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	200000e8 	.word	0x200000e8
 8000e30:	40013000 	.word	0x40013000

08000e34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e3a:	f107 0308 	add.w	r3, r7, #8
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e48:	463b      	mov	r3, r7
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e50:	4b1d      	ldr	r3, [pc, #116]	; (8000ec8 <MX_TIM2_Init+0x94>)
 8000e52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 57142;
 8000e58:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <MX_TIM2_Init+0x94>)
 8000e5a:	f64d 7236 	movw	r2, #57142	; 0xdf36
 8000e5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e60:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <MX_TIM2_Init+0x94>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7;
 8000e66:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <MX_TIM2_Init+0x94>)
 8000e68:	2207      	movs	r2, #7
 8000e6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e6c:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <MX_TIM2_Init+0x94>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <MX_TIM2_Init+0x94>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e78:	4813      	ldr	r0, [pc, #76]	; (8000ec8 <MX_TIM2_Init+0x94>)
 8000e7a:	f003 fc61 	bl	8004740 <HAL_TIM_Base_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e84:	f000 f9fe 	bl	8001284 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e8e:	f107 0308 	add.w	r3, r7, #8
 8000e92:	4619      	mov	r1, r3
 8000e94:	480c      	ldr	r0, [pc, #48]	; (8000ec8 <MX_TIM2_Init+0x94>)
 8000e96:	f003 fe1b 	bl	8004ad0 <HAL_TIM_ConfigClockSource>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ea0:	f000 f9f0 	bl	8001284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000eac:	463b      	mov	r3, r7
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <MX_TIM2_Init+0x94>)
 8000eb2:	f004 f837 	bl	8004f24 <HAL_TIMEx_MasterConfigSynchronization>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ebc:	f000 f9e2 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ec0:	bf00      	nop
 8000ec2:	3718      	adds	r7, #24
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000140 	.word	0x20000140

08000ecc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ed0:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000ed2:	4a12      	ldr	r2, [pc, #72]	; (8000f1c <MX_USART2_UART_Init+0x50>)
 8000ed4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000ed6:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000ed8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000edc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eea:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ef0:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ef6:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f02:	4805      	ldr	r0, [pc, #20]	; (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000f04:	f004 f89e 	bl	8005044 <HAL_UART_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f0e:	f000 f9b9 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000188 	.word	0x20000188
 8000f1c:	40004400 	.word	0x40004400

08000f20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08a      	sub	sp, #40	; 0x28
 8000f24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
 8000f34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	613b      	str	r3, [r7, #16]
 8000f3a:	4b36      	ldr	r3, [pc, #216]	; (8001014 <MX_GPIO_Init+0xf4>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a35      	ldr	r2, [pc, #212]	; (8001014 <MX_GPIO_Init+0xf4>)
 8000f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b33      	ldr	r3, [pc, #204]	; (8001014 <MX_GPIO_Init+0xf4>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	4b2f      	ldr	r3, [pc, #188]	; (8001014 <MX_GPIO_Init+0xf4>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a2e      	ldr	r2, [pc, #184]	; (8001014 <MX_GPIO_Init+0xf4>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b2c      	ldr	r3, [pc, #176]	; (8001014 <MX_GPIO_Init+0xf4>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	4b28      	ldr	r3, [pc, #160]	; (8001014 <MX_GPIO_Init+0xf4>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a27      	ldr	r2, [pc, #156]	; (8001014 <MX_GPIO_Init+0xf4>)
 8000f78:	f043 0302 	orr.w	r3, r3, #2
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b25      	ldr	r3, [pc, #148]	; (8001014 <MX_GPIO_Init+0xf4>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	4b21      	ldr	r3, [pc, #132]	; (8001014 <MX_GPIO_Init+0xf4>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a20      	ldr	r2, [pc, #128]	; (8001014 <MX_GPIO_Init+0xf4>)
 8000f94:	f043 0304 	orr.w	r3, r3, #4
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <MX_GPIO_Init+0xf4>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0304 	and.w	r3, r3, #4
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|LCD_RESET_Pin|LCD_CS_Pin
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f240 1187 	movw	r1, #391	; 0x187
 8000fac:	481a      	ldr	r0, [pc, #104]	; (8001018 <MX_GPIO_Init+0xf8>)
 8000fae:	f002 f99f 	bl	80032f0 <HAL_GPIO_WritePin>
                          |LCD_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Pin */
  GPIO_InitStruct.Pin = USER_Pin;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_GPIO_Port, &GPIO_InitStruct);
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4815      	ldr	r0, [pc, #84]	; (800101c <MX_GPIO_Init+0xfc>)
 8000fc6:	f001 fff7 	bl	8002fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 LCD_RESET_Pin LCD_CS_Pin
                           LCD_DC_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LCD_RESET_Pin|LCD_CS_Pin
 8000fca:	f240 1387 	movw	r3, #391	; 0x187
 8000fce:	617b      	str	r3, [r7, #20]
                          |LCD_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	480d      	ldr	r0, [pc, #52]	; (8001018 <MX_GPIO_Init+0xf8>)
 8000fe4:	f001 ffe8 	bl	8002fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000fe8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000fec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ffa:	2307      	movs	r3, #7
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	4619      	mov	r1, r3
 8001004:	4806      	ldr	r0, [pc, #24]	; (8001020 <MX_GPIO_Init+0x100>)
 8001006:	f001 ffd7 	bl	8002fb8 <HAL_GPIO_Init>

}
 800100a:	bf00      	nop
 800100c:	3728      	adds	r7, #40	; 0x28
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40023800 	.word	0x40023800
 8001018:	40020400 	.word	0x40020400
 800101c:	40020000 	.word	0x40020000
 8001020:	40020800 	.word	0x40020800

08001024 <HAL_TIM_PeriodElapsedCallback>:
uint8_t Buffer4[20];
uint8_t Buffer5[20];
uint8_t Buffer6[20];
uint8_t Buffer7[20];

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	timerRun();
 800102c:	f000 fe4c 	bl	8001cc8 <timerRun>
	//getKeyInput();
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af04      	add	r7, sp, #16
 800103e:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rx1Header, Rx1Data) == HAL_OK){
 8001040:	4b30      	ldr	r3, [pc, #192]	; (8001104 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8001042:	4a31      	ldr	r2, [pc, #196]	; (8001108 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8001044:	2100      	movs	r1, #0
 8001046:	4831      	ldr	r0, [pc, #196]	; (800110c <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8001048:	f001 fab5 	bl	80025b6 <HAL_CAN_GetRxMessage>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d153      	bne.n	80010fa <HAL_CAN_RxFifo0MsgPendingCallback+0xc2>
		if(rx1Header.DLC == 8){
 8001052:	4b2d      	ldr	r3, [pc, #180]	; (8001108 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8001054:	691b      	ldr	r3, [r3, #16]
 8001056:	2b08      	cmp	r3, #8
 8001058:	d14f      	bne.n	80010fa <HAL_CAN_RxFifo0MsgPendingCallback+0xc2>
			sprintf(&Buffer[0], "IDCAN2:0x%03x", tx2Header.StdId);
 800105a:	4b2d      	ldr	r3, [pc, #180]	; (8001110 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	492c      	ldr	r1, [pc, #176]	; (8001114 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8001062:	482d      	ldr	r0, [pc, #180]	; (8001118 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8001064:	f004 ff34 	bl	8005ed0 <siprintf>
			sprintf(&Buffer1[0], "Data0:0x%02x", Rx1Data[0]);
 8001068:	4b26      	ldr	r3, [pc, #152]	; (8001104 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	461a      	mov	r2, r3
 800106e:	492b      	ldr	r1, [pc, #172]	; (800111c <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8001070:	482b      	ldr	r0, [pc, #172]	; (8001120 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 8001072:	f004 ff2d 	bl	8005ed0 <siprintf>
			sprintf(&Buffer2[0], "Data1:0x%02x", Rx1Data[1]);
 8001076:	4b23      	ldr	r3, [pc, #140]	; (8001104 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8001078:	785b      	ldrb	r3, [r3, #1]
 800107a:	461a      	mov	r2, r3
 800107c:	4929      	ldr	r1, [pc, #164]	; (8001124 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 800107e:	482a      	ldr	r0, [pc, #168]	; (8001128 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8001080:	f004 ff26 	bl	8005ed0 <siprintf>

			ST7789_WriteString(0, 0,&Buffer[0], Font_11x18, RED, WHITE);
 8001084:	4b29      	ldr	r3, [pc, #164]	; (800112c <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8001086:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800108a:	9202      	str	r2, [sp, #8]
 800108c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001090:	9201      	str	r2, [sp, #4]
 8001092:	685a      	ldr	r2, [r3, #4]
 8001094:	9200      	str	r2, [sp, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a1f      	ldr	r2, [pc, #124]	; (8001118 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 800109a:	2100      	movs	r1, #0
 800109c:	2000      	movs	r0, #0
 800109e:	f000 fb5b 	bl	8001758 <ST7789_WriteString>
			ST7789_WriteString(0, 19, &Buffer1[0], Font_11x18, RED, WHITE);
 80010a2:	4b22      	ldr	r3, [pc, #136]	; (800112c <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 80010a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010a8:	9202      	str	r2, [sp, #8]
 80010aa:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80010ae:	9201      	str	r2, [sp, #4]
 80010b0:	685a      	ldr	r2, [r3, #4]
 80010b2:	9200      	str	r2, [sp, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a1a      	ldr	r2, [pc, #104]	; (8001120 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 80010b8:	2113      	movs	r1, #19
 80010ba:	2000      	movs	r0, #0
 80010bc:	f000 fb4c 	bl	8001758 <ST7789_WriteString>
			ST7789_WriteString(0, 38, &Buffer2[0], Font_11x18, RED, WHITE);
 80010c0:	4b1a      	ldr	r3, [pc, #104]	; (800112c <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 80010c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010c6:	9202      	str	r2, [sp, #8]
 80010c8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80010cc:	9201      	str	r2, [sp, #4]
 80010ce:	685a      	ldr	r2, [r3, #4]
 80010d0:	9200      	str	r2, [sp, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a14      	ldr	r2, [pc, #80]	; (8001128 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 80010d6:	2126      	movs	r1, #38	; 0x26
 80010d8:	2000      	movs	r0, #0
 80010da:	f000 fb3d 	bl	8001758 <ST7789_WriteString>
			if(HAL_CAN_AddTxMessage(&hcan1,&tx1Header,Tx1Data,&canMailbox) == HAL_OK){
 80010de:	4b14      	ldr	r3, [pc, #80]	; (8001130 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 80010e0:	4a14      	ldr	r2, [pc, #80]	; (8001134 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>)
 80010e2:	4915      	ldr	r1, [pc, #84]	; (8001138 <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 80010e4:	4809      	ldr	r0, [pc, #36]	; (800110c <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 80010e6:	f001 f98b 	bl	8002400 <HAL_CAN_AddTxMessage>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d104      	bne.n	80010fa <HAL_CAN_RxFifo0MsgPendingCallback+0xc2>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 80010f0:	2201      	movs	r2, #1
 80010f2:	2101      	movs	r1, #1
 80010f4:	4811      	ldr	r0, [pc, #68]	; (800113c <HAL_CAN_RxFifo0MsgPendingCallback+0x104>)
 80010f6:	f002 f8fb 	bl	80032f0 <HAL_GPIO_WritePin>
			}
		}
	}

}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000298 	.word	0x20000298
 8001108:	200001cc 	.word	0x200001cc
 800110c:	20000098 	.word	0x20000098
 8001110:	2000021c 	.word	0x2000021c
 8001114:	080067c4 	.word	0x080067c4
 8001118:	200002a8 	.word	0x200002a8
 800111c:	080067d4 	.word	0x080067d4
 8001120:	200002bc 	.word	0x200002bc
 8001124:	080067e4 	.word	0x080067e4
 8001128:	200002d0 	.word	0x200002d0
 800112c:	20000000 	.word	0x20000000
 8001130:	20000284 	.word	0x20000284
 8001134:	20000288 	.word	0x20000288
 8001138:	200001e8 	.word	0x200001e8
 800113c:	40020400 	.word	0x40020400

08001140 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af04      	add	r7, sp, #16
 8001146:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO1, &rx2Header, Rx2Data) == HAL_OK){
 8001148:	4b3f      	ldr	r3, [pc, #252]	; (8001248 <HAL_CAN_RxFifo1MsgPendingCallback+0x108>)
 800114a:	4a40      	ldr	r2, [pc, #256]	; (800124c <HAL_CAN_RxFifo1MsgPendingCallback+0x10c>)
 800114c:	2101      	movs	r1, #1
 800114e:	4840      	ldr	r0, [pc, #256]	; (8001250 <HAL_CAN_RxFifo1MsgPendingCallback+0x110>)
 8001150:	f001 fa31 	bl	80025b6 <HAL_CAN_GetRxMessage>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d171      	bne.n	800123e <HAL_CAN_RxFifo1MsgPendingCallback+0xfe>
		if(rx2Header.DLC == 8){
 800115a:	4b3c      	ldr	r3, [pc, #240]	; (800124c <HAL_CAN_RxFifo1MsgPendingCallback+0x10c>)
 800115c:	691b      	ldr	r3, [r3, #16]
 800115e:	2b08      	cmp	r3, #8
 8001160:	d16d      	bne.n	800123e <HAL_CAN_RxFifo1MsgPendingCallback+0xfe>
			sprintf(&Buffer3[0], "IDCAN1:0x%03x", tx1Header.StdId);
 8001162:	4b3c      	ldr	r3, [pc, #240]	; (8001254 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	493b      	ldr	r1, [pc, #236]	; (8001258 <HAL_CAN_RxFifo1MsgPendingCallback+0x118>)
 800116a:	483c      	ldr	r0, [pc, #240]	; (800125c <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 800116c:	f004 feb0 	bl	8005ed0 <siprintf>
			sprintf(&Buffer4[0], "Data0:0x%02x", Rx2Data[0]);
 8001170:	4b35      	ldr	r3, [pc, #212]	; (8001248 <HAL_CAN_RxFifo1MsgPendingCallback+0x108>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	493a      	ldr	r1, [pc, #232]	; (8001260 <HAL_CAN_RxFifo1MsgPendingCallback+0x120>)
 8001178:	483a      	ldr	r0, [pc, #232]	; (8001264 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 800117a:	f004 fea9 	bl	8005ed0 <siprintf>
			sprintf(&Buffer5[0], "Data1:0x%02x", Rx2Data[1]);
 800117e:	4b32      	ldr	r3, [pc, #200]	; (8001248 <HAL_CAN_RxFifo1MsgPendingCallback+0x108>)
 8001180:	785b      	ldrb	r3, [r3, #1]
 8001182:	461a      	mov	r2, r3
 8001184:	4938      	ldr	r1, [pc, #224]	; (8001268 <HAL_CAN_RxFifo1MsgPendingCallback+0x128>)
 8001186:	4839      	ldr	r0, [pc, #228]	; (800126c <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 8001188:	f004 fea2 	bl	8005ed0 <siprintf>
			sprintf(&Buffer6[0], "Data2:0x%02x", Rx2Data[2]);
 800118c:	4b2e      	ldr	r3, [pc, #184]	; (8001248 <HAL_CAN_RxFifo1MsgPendingCallback+0x108>)
 800118e:	789b      	ldrb	r3, [r3, #2]
 8001190:	461a      	mov	r2, r3
 8001192:	4937      	ldr	r1, [pc, #220]	; (8001270 <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 8001194:	4837      	ldr	r0, [pc, #220]	; (8001274 <HAL_CAN_RxFifo1MsgPendingCallback+0x134>)
 8001196:	f004 fe9b 	bl	8005ed0 <siprintf>
			sprintf(&Buffer7[0], "Data7:0x%02x", Rx2Data[7]);
 800119a:	4b2b      	ldr	r3, [pc, #172]	; (8001248 <HAL_CAN_RxFifo1MsgPendingCallback+0x108>)
 800119c:	79db      	ldrb	r3, [r3, #7]
 800119e:	461a      	mov	r2, r3
 80011a0:	4935      	ldr	r1, [pc, #212]	; (8001278 <HAL_CAN_RxFifo1MsgPendingCallback+0x138>)
 80011a2:	4836      	ldr	r0, [pc, #216]	; (800127c <HAL_CAN_RxFifo1MsgPendingCallback+0x13c>)
 80011a4:	f004 fe94 	bl	8005ed0 <siprintf>

			ST7789_WriteString(0, 57, &Buffer3[0], Font_11x18, RED, WHITE);
 80011a8:	4b35      	ldr	r3, [pc, #212]	; (8001280 <HAL_CAN_RxFifo1MsgPendingCallback+0x140>)
 80011aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011ae:	9202      	str	r2, [sp, #8]
 80011b0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80011b4:	9201      	str	r2, [sp, #4]
 80011b6:	685a      	ldr	r2, [r3, #4]
 80011b8:	9200      	str	r2, [sp, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a27      	ldr	r2, [pc, #156]	; (800125c <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 80011be:	2139      	movs	r1, #57	; 0x39
 80011c0:	2000      	movs	r0, #0
 80011c2:	f000 fac9 	bl	8001758 <ST7789_WriteString>
			ST7789_WriteString(0, 76, &Buffer4[0], Font_11x18, RED, WHITE);
 80011c6:	4b2e      	ldr	r3, [pc, #184]	; (8001280 <HAL_CAN_RxFifo1MsgPendingCallback+0x140>)
 80011c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011cc:	9202      	str	r2, [sp, #8]
 80011ce:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80011d2:	9201      	str	r2, [sp, #4]
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	9200      	str	r2, [sp, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a22      	ldr	r2, [pc, #136]	; (8001264 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 80011dc:	214c      	movs	r1, #76	; 0x4c
 80011de:	2000      	movs	r0, #0
 80011e0:	f000 faba 	bl	8001758 <ST7789_WriteString>
			ST7789_WriteString(0, 95, &Buffer5[0], Font_11x18, RED, WHITE);
 80011e4:	4b26      	ldr	r3, [pc, #152]	; (8001280 <HAL_CAN_RxFifo1MsgPendingCallback+0x140>)
 80011e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011ea:	9202      	str	r2, [sp, #8]
 80011ec:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80011f0:	9201      	str	r2, [sp, #4]
 80011f2:	685a      	ldr	r2, [r3, #4]
 80011f4:	9200      	str	r2, [sp, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a1c      	ldr	r2, [pc, #112]	; (800126c <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 80011fa:	215f      	movs	r1, #95	; 0x5f
 80011fc:	2000      	movs	r0, #0
 80011fe:	f000 faab 	bl	8001758 <ST7789_WriteString>
			ST7789_WriteString(0, 114, &Buffer6[0], Font_11x18, RED, WHITE);
 8001202:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <HAL_CAN_RxFifo1MsgPendingCallback+0x140>)
 8001204:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001208:	9202      	str	r2, [sp, #8]
 800120a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800120e:	9201      	str	r2, [sp, #4]
 8001210:	685a      	ldr	r2, [r3, #4]
 8001212:	9200      	str	r2, [sp, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a17      	ldr	r2, [pc, #92]	; (8001274 <HAL_CAN_RxFifo1MsgPendingCallback+0x134>)
 8001218:	2172      	movs	r1, #114	; 0x72
 800121a:	2000      	movs	r0, #0
 800121c:	f000 fa9c 	bl	8001758 <ST7789_WriteString>
			ST7789_WriteString(0, 133, &Buffer7[0], Font_11x18, RED, WHITE);
 8001220:	4b17      	ldr	r3, [pc, #92]	; (8001280 <HAL_CAN_RxFifo1MsgPendingCallback+0x140>)
 8001222:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001226:	9202      	str	r2, [sp, #8]
 8001228:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800122c:	9201      	str	r2, [sp, #4]
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	9200      	str	r2, [sp, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a11      	ldr	r2, [pc, #68]	; (800127c <HAL_CAN_RxFifo1MsgPendingCallback+0x13c>)
 8001236:	2185      	movs	r1, #133	; 0x85
 8001238:	2000      	movs	r0, #0
 800123a:	f000 fa8d 	bl	8001758 <ST7789_WriteString>
		}

	}

}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	200002a0 	.word	0x200002a0
 800124c:	20000200 	.word	0x20000200
 8001250:	200000c0 	.word	0x200000c0
 8001254:	200001e8 	.word	0x200001e8
 8001258:	080067f4 	.word	0x080067f4
 800125c:	200002e4 	.word	0x200002e4
 8001260:	080067d4 	.word	0x080067d4
 8001264:	200002f8 	.word	0x200002f8
 8001268:	080067e4 	.word	0x080067e4
 800126c:	2000030c 	.word	0x2000030c
 8001270:	08006804 	.word	0x08006804
 8001274:	20000320 	.word	0x20000320
 8001278:	08006814 	.word	0x08006814
 800127c:	20000334 	.word	0x20000334
 8001280:	20000000 	.word	0x20000000

08001284 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001288:	b672      	cpsid	i
}
 800128a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800128c:	e7fe      	b.n	800128c <Error_Handler+0x8>
	...

08001290 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 800129a:	2200      	movs	r2, #0
 800129c:	2180      	movs	r1, #128	; 0x80
 800129e:	480c      	ldr	r0, [pc, #48]	; (80012d0 <ST7789_WriteCommand+0x40>)
 80012a0:	f002 f826 	bl	80032f0 <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 80012a4:	2200      	movs	r2, #0
 80012a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012aa:	4809      	ldr	r0, [pc, #36]	; (80012d0 <ST7789_WriteCommand+0x40>)
 80012ac:	f002 f820 	bl	80032f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80012b0:	1df9      	adds	r1, r7, #7
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295
 80012b6:	2201      	movs	r2, #1
 80012b8:	4806      	ldr	r0, [pc, #24]	; (80012d4 <ST7789_WriteCommand+0x44>)
 80012ba:	f002 fd14 	bl	8003ce6 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 80012be:	2201      	movs	r2, #1
 80012c0:	2180      	movs	r1, #128	; 0x80
 80012c2:	4803      	ldr	r0, [pc, #12]	; (80012d0 <ST7789_WriteCommand+0x40>)
 80012c4:	f002 f814 	bl	80032f0 <HAL_GPIO_WritePin>
}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40020400 	.word	0x40020400
 80012d4:	200000e8 	.word	0x200000e8

080012d8 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 80012e2:	2200      	movs	r2, #0
 80012e4:	2180      	movs	r1, #128	; 0x80
 80012e6:	4816      	ldr	r0, [pc, #88]	; (8001340 <ST7789_WriteData+0x68>)
 80012e8:	f002 f802 	bl	80032f0 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 80012ec:	2201      	movs	r2, #1
 80012ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012f2:	4813      	ldr	r0, [pc, #76]	; (8001340 <ST7789_WriteData+0x68>)
 80012f4:	f001 fffc 	bl	80032f0 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 80012f8:	e015      	b.n	8001326 <ST7789_WriteData+0x4e>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001300:	4293      	cmp	r3, r2
 8001302:	bf28      	it	cs
 8001304:	4613      	movcs	r3, r2
 8001306:	81fb      	strh	r3, [r7, #14]
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8001308:	89fa      	ldrh	r2, [r7, #14]
 800130a:	f04f 33ff 	mov.w	r3, #4294967295
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	480c      	ldr	r0, [pc, #48]	; (8001344 <ST7789_WriteData+0x6c>)
 8001312:	f002 fce8 	bl	8003ce6 <HAL_SPI_Transmit>
		#endif
		buff += chunk_size;
 8001316:	89fb      	ldrh	r3, [r7, #14]
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	4413      	add	r3, r2
 800131c:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 800131e:	89fb      	ldrh	r3, [r7, #14]
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1e6      	bne.n	80012fa <ST7789_WriteData+0x22>
	}

	ST7789_UnSelect();
 800132c:	2201      	movs	r2, #1
 800132e:	2180      	movs	r1, #128	; 0x80
 8001330:	4803      	ldr	r0, [pc, #12]	; (8001340 <ST7789_WriteData+0x68>)
 8001332:	f001 ffdd 	bl	80032f0 <HAL_GPIO_WritePin>
}
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40020400 	.word	0x40020400
 8001344:	200000e8 	.word	0x200000e8

08001348 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8001352:	2200      	movs	r2, #0
 8001354:	2180      	movs	r1, #128	; 0x80
 8001356:	480c      	ldr	r0, [pc, #48]	; (8001388 <ST7789_WriteSmallData+0x40>)
 8001358:	f001 ffca 	bl	80032f0 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 800135c:	2201      	movs	r2, #1
 800135e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001362:	4809      	ldr	r0, [pc, #36]	; (8001388 <ST7789_WriteSmallData+0x40>)
 8001364:	f001 ffc4 	bl	80032f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8001368:	1df9      	adds	r1, r7, #7
 800136a:	f04f 33ff 	mov.w	r3, #4294967295
 800136e:	2201      	movs	r2, #1
 8001370:	4806      	ldr	r0, [pc, #24]	; (800138c <ST7789_WriteSmallData+0x44>)
 8001372:	f002 fcb8 	bl	8003ce6 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8001376:	2201      	movs	r2, #1
 8001378:	2180      	movs	r1, #128	; 0x80
 800137a:	4803      	ldr	r0, [pc, #12]	; (8001388 <ST7789_WriteSmallData+0x40>)
 800137c:	f001 ffb8 	bl	80032f0 <HAL_GPIO_WritePin>
}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40020400 	.word	0x40020400
 800138c:	200000e8 	.word	0x200000e8

08001390 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 800139a:	2036      	movs	r0, #54	; 0x36
 800139c:	f7ff ff78 	bl	8001290 <ST7789_WriteCommand>
	switch (m) {
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	2b03      	cmp	r3, #3
 80013a4:	d81a      	bhi.n	80013dc <ST7789_SetRotation+0x4c>
 80013a6:	a201      	add	r2, pc, #4	; (adr r2, 80013ac <ST7789_SetRotation+0x1c>)
 80013a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ac:	080013bd 	.word	0x080013bd
 80013b0:	080013c5 	.word	0x080013c5
 80013b4:	080013cd 	.word	0x080013cd
 80013b8:	080013d5 	.word	0x080013d5
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 80013bc:	20c0      	movs	r0, #192	; 0xc0
 80013be:	f7ff ffc3 	bl	8001348 <ST7789_WriteSmallData>
		break;
 80013c2:	e00c      	b.n	80013de <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 80013c4:	20a0      	movs	r0, #160	; 0xa0
 80013c6:	f7ff ffbf 	bl	8001348 <ST7789_WriteSmallData>
		break;
 80013ca:	e008      	b.n	80013de <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 80013cc:	2000      	movs	r0, #0
 80013ce:	f7ff ffbb 	bl	8001348 <ST7789_WriteSmallData>
		break;
 80013d2:	e004      	b.n	80013de <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 80013d4:	2060      	movs	r0, #96	; 0x60
 80013d6:	f7ff ffb7 	bl	8001348 <ST7789_WriteSmallData>
		break;
 80013da:	e000      	b.n	80013de <ST7789_SetRotation+0x4e>
	default:
		break;
 80013dc:	bf00      	nop
	}
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop

080013e8 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80013e8:	b590      	push	{r4, r7, lr}
 80013ea:	b087      	sub	sp, #28
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4604      	mov	r4, r0
 80013f0:	4608      	mov	r0, r1
 80013f2:	4611      	mov	r1, r2
 80013f4:	461a      	mov	r2, r3
 80013f6:	4623      	mov	r3, r4
 80013f8:	80fb      	strh	r3, [r7, #6]
 80013fa:	4603      	mov	r3, r0
 80013fc:	80bb      	strh	r3, [r7, #4]
 80013fe:	460b      	mov	r3, r1
 8001400:	807b      	strh	r3, [r7, #2]
 8001402:	4613      	mov	r3, r2
 8001404:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8001406:	2200      	movs	r2, #0
 8001408:	2180      	movs	r1, #128	; 0x80
 800140a:	4824      	ldr	r0, [pc, #144]	; (800149c <ST7789_SetAddressWindow+0xb4>)
 800140c:	f001 ff70 	bl	80032f0 <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	82fb      	strh	r3, [r7, #22]
 8001414:	887b      	ldrh	r3, [r7, #2]
 8001416:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8001418:	88bb      	ldrh	r3, [r7, #4]
 800141a:	827b      	strh	r3, [r7, #18]
 800141c:	883b      	ldrh	r3, [r7, #0]
 800141e:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8001420:	202a      	movs	r0, #42	; 0x2a
 8001422:	f7ff ff35 	bl	8001290 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8001426:	8afb      	ldrh	r3, [r7, #22]
 8001428:	0a1b      	lsrs	r3, r3, #8
 800142a:	b29b      	uxth	r3, r3
 800142c:	b2db      	uxtb	r3, r3
 800142e:	733b      	strb	r3, [r7, #12]
 8001430:	8afb      	ldrh	r3, [r7, #22]
 8001432:	b2db      	uxtb	r3, r3
 8001434:	737b      	strb	r3, [r7, #13]
 8001436:	8abb      	ldrh	r3, [r7, #20]
 8001438:	0a1b      	lsrs	r3, r3, #8
 800143a:	b29b      	uxth	r3, r3
 800143c:	b2db      	uxtb	r3, r3
 800143e:	73bb      	strb	r3, [r7, #14]
 8001440:	8abb      	ldrh	r3, [r7, #20]
 8001442:	b2db      	uxtb	r3, r3
 8001444:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8001446:	f107 030c 	add.w	r3, r7, #12
 800144a:	2104      	movs	r1, #4
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ff43 	bl	80012d8 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8001452:	202b      	movs	r0, #43	; 0x2b
 8001454:	f7ff ff1c 	bl	8001290 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8001458:	8a7b      	ldrh	r3, [r7, #18]
 800145a:	0a1b      	lsrs	r3, r3, #8
 800145c:	b29b      	uxth	r3, r3
 800145e:	b2db      	uxtb	r3, r3
 8001460:	723b      	strb	r3, [r7, #8]
 8001462:	8a7b      	ldrh	r3, [r7, #18]
 8001464:	b2db      	uxtb	r3, r3
 8001466:	727b      	strb	r3, [r7, #9]
 8001468:	8a3b      	ldrh	r3, [r7, #16]
 800146a:	0a1b      	lsrs	r3, r3, #8
 800146c:	b29b      	uxth	r3, r3
 800146e:	b2db      	uxtb	r3, r3
 8001470:	72bb      	strb	r3, [r7, #10]
 8001472:	8a3b      	ldrh	r3, [r7, #16]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8001478:	f107 0308 	add.w	r3, r7, #8
 800147c:	2104      	movs	r1, #4
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff ff2a 	bl	80012d8 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8001484:	202c      	movs	r0, #44	; 0x2c
 8001486:	f7ff ff03 	bl	8001290 <ST7789_WriteCommand>
	ST7789_UnSelect();
 800148a:	2201      	movs	r2, #1
 800148c:	2180      	movs	r1, #128	; 0x80
 800148e:	4803      	ldr	r0, [pc, #12]	; (800149c <ST7789_SetAddressWindow+0xb4>)
 8001490:	f001 ff2e 	bl	80032f0 <HAL_GPIO_WritePin>
}
 8001494:	bf00      	nop
 8001496:	371c      	adds	r7, #28
 8001498:	46bd      	mov	sp, r7
 800149a:	bd90      	pop	{r4, r7, pc}
 800149c:	40020400 	.word	0x40020400

080014a0 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 80014a0:	b590      	push	{r4, r7, lr}
 80014a2:	b08b      	sub	sp, #44	; 0x2c
 80014a4:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
	#endif
	HAL_Delay(25);
 80014a6:	2019      	movs	r0, #25
 80014a8:	f000 fd66 	bl	8001f78 <HAL_Delay>
    ST7789_RST_Clr();
 80014ac:	2200      	movs	r2, #0
 80014ae:	2104      	movs	r1, #4
 80014b0:	4846      	ldr	r0, [pc, #280]	; (80015cc <ST7789_Init+0x12c>)
 80014b2:	f001 ff1d 	bl	80032f0 <HAL_GPIO_WritePin>
    HAL_Delay(25);
 80014b6:	2019      	movs	r0, #25
 80014b8:	f000 fd5e 	bl	8001f78 <HAL_Delay>
    ST7789_RST_Set();
 80014bc:	2201      	movs	r2, #1
 80014be:	2104      	movs	r1, #4
 80014c0:	4842      	ldr	r0, [pc, #264]	; (80015cc <ST7789_Init+0x12c>)
 80014c2:	f001 ff15 	bl	80032f0 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 80014c6:	2032      	movs	r0, #50	; 0x32
 80014c8:	f000 fd56 	bl	8001f78 <HAL_Delay>
		
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 80014cc:	203a      	movs	r0, #58	; 0x3a
 80014ce:	f7ff fedf 	bl	8001290 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 80014d2:	2055      	movs	r0, #85	; 0x55
 80014d4:	f7ff ff38 	bl	8001348 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 80014d8:	20b2      	movs	r0, #178	; 0xb2
 80014da:	f7ff fed9 	bl	8001290 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 80014de:	4a3c      	ldr	r2, [pc, #240]	; (80015d0 <ST7789_Init+0x130>)
 80014e0:	f107 0320 	add.w	r3, r7, #32
 80014e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014e8:	6018      	str	r0, [r3, #0]
 80014ea:	3304      	adds	r3, #4
 80014ec:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 80014ee:	f107 0320 	add.w	r3, r7, #32
 80014f2:	2105      	movs	r1, #5
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff feef 	bl	80012d8 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 80014fa:	2001      	movs	r0, #1
 80014fc:	f7ff ff48 	bl	8001390 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 8001500:	20b7      	movs	r0, #183	; 0xb7
 8001502:	f7ff fec5 	bl	8001290 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8001506:	2035      	movs	r0, #53	; 0x35
 8001508:	f7ff ff1e 	bl	8001348 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 800150c:	20bb      	movs	r0, #187	; 0xbb
 800150e:	f7ff febf 	bl	8001290 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8001512:	2019      	movs	r0, #25
 8001514:	f7ff ff18 	bl	8001348 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8001518:	20c0      	movs	r0, #192	; 0xc0
 800151a:	f7ff feb9 	bl	8001290 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 800151e:	202c      	movs	r0, #44	; 0x2c
 8001520:	f7ff ff12 	bl	8001348 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 8001524:	20c2      	movs	r0, #194	; 0xc2
 8001526:	f7ff feb3 	bl	8001290 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 800152a:	2001      	movs	r0, #1
 800152c:	f7ff ff0c 	bl	8001348 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 8001530:	20c3      	movs	r0, #195	; 0xc3
 8001532:	f7ff fead 	bl	8001290 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8001536:	2012      	movs	r0, #18
 8001538:	f7ff ff06 	bl	8001348 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 800153c:	20c4      	movs	r0, #196	; 0xc4
 800153e:	f7ff fea7 	bl	8001290 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 8001542:	2020      	movs	r0, #32
 8001544:	f7ff ff00 	bl	8001348 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 8001548:	20c6      	movs	r0, #198	; 0xc6
 800154a:	f7ff fea1 	bl	8001290 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 800154e:	200f      	movs	r0, #15
 8001550:	f7ff fefa 	bl	8001348 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8001554:	20d0      	movs	r0, #208	; 0xd0
 8001556:	f7ff fe9b 	bl	8001290 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 800155a:	20a4      	movs	r0, #164	; 0xa4
 800155c:	f7ff fef4 	bl	8001348 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8001560:	20a1      	movs	r0, #161	; 0xa1
 8001562:	f7ff fef1 	bl	8001348 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8001566:	20e0      	movs	r0, #224	; 0xe0
 8001568:	f7ff fe92 	bl	8001290 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 800156c:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <ST7789_Init+0x134>)
 800156e:	f107 0410 	add.w	r4, r7, #16
 8001572:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001574:	c407      	stmia	r4!, {r0, r1, r2}
 8001576:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8001578:	f107 0310 	add.w	r3, r7, #16
 800157c:	210e      	movs	r1, #14
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff feaa 	bl	80012d8 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8001584:	20e1      	movs	r0, #225	; 0xe1
 8001586:	f7ff fe83 	bl	8001290 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 800158a:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <ST7789_Init+0x138>)
 800158c:	463c      	mov	r4, r7
 800158e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001590:	c407      	stmia	r4!, {r0, r1, r2}
 8001592:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8001594:	463b      	mov	r3, r7
 8001596:	210e      	movs	r1, #14
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff fe9d 	bl	80012d8 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 800159e:	2021      	movs	r0, #33	; 0x21
 80015a0:	f7ff fe76 	bl	8001290 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 80015a4:	2011      	movs	r0, #17
 80015a6:	f7ff fe73 	bl	8001290 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 80015aa:	2013      	movs	r0, #19
 80015ac:	f7ff fe70 	bl	8001290 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 80015b0:	2029      	movs	r0, #41	; 0x29
 80015b2:	f7ff fe6d 	bl	8001290 <ST7789_WriteCommand>

	HAL_Delay(50);
 80015b6:	2032      	movs	r0, #50	; 0x32
 80015b8:	f000 fcde 	bl	8001f78 <HAL_Delay>
	ST7789_Fill_Color(WHITE);				//	Fill with WHITE.
 80015bc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80015c0:	f000 f80c 	bl	80015dc <ST7789_Fill_Color>
}
 80015c4:	bf00      	nop
 80015c6:	372c      	adds	r7, #44	; 0x2c
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd90      	pop	{r4, r7, pc}
 80015cc:	40020400 	.word	0x40020400
 80015d0:	08006824 	.word	0x08006824
 80015d4:	0800682c 	.word	0x0800682c
 80015d8:	0800683c 	.word	0x0800683c

080015dc <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 80015e6:	f240 133f 	movw	r3, #319	; 0x13f
 80015ea:	22ef      	movs	r2, #239	; 0xef
 80015ec:	2100      	movs	r1, #0
 80015ee:	2000      	movs	r0, #0
 80015f0:	f7ff fefa 	bl	80013e8 <ST7789_SetAddressWindow>
	ST7789_Select();
 80015f4:	2200      	movs	r2, #0
 80015f6:	2180      	movs	r1, #128	; 0x80
 80015f8:	4816      	ldr	r0, [pc, #88]	; (8001654 <ST7789_Fill_Color+0x78>)
 80015fa:	f001 fe79 	bl	80032f0 <HAL_GPIO_WritePin>
			memset(disp_buf, color, sizeof(disp_buf));
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
		}
	#else
		uint16_t j;
		for (i = 0; i < ST7789_WIDTH; i++)
 80015fe:	2300      	movs	r3, #0
 8001600:	81fb      	strh	r3, [r7, #14]
 8001602:	e01a      	b.n	800163a <ST7789_Fill_Color+0x5e>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 8001604:	2300      	movs	r3, #0
 8001606:	81bb      	strh	r3, [r7, #12]
 8001608:	e010      	b.n	800162c <ST7789_Fill_Color+0x50>
					uint8_t data[] = {color >> 8, color & 0xFF};
 800160a:	88fb      	ldrh	r3, [r7, #6]
 800160c:	0a1b      	lsrs	r3, r3, #8
 800160e:	b29b      	uxth	r3, r3
 8001610:	b2db      	uxtb	r3, r3
 8001612:	723b      	strb	r3, [r7, #8]
 8001614:	88fb      	ldrh	r3, [r7, #6]
 8001616:	b2db      	uxtb	r3, r3
 8001618:	727b      	strb	r3, [r7, #9]
					ST7789_WriteData(data, sizeof(data));
 800161a:	f107 0308 	add.w	r3, r7, #8
 800161e:	2102      	movs	r1, #2
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fe59 	bl	80012d8 <ST7789_WriteData>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 8001626:	89bb      	ldrh	r3, [r7, #12]
 8001628:	3301      	adds	r3, #1
 800162a:	81bb      	strh	r3, [r7, #12]
 800162c:	89bb      	ldrh	r3, [r7, #12]
 800162e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001632:	d3ea      	bcc.n	800160a <ST7789_Fill_Color+0x2e>
		for (i = 0; i < ST7789_WIDTH; i++)
 8001634:	89fb      	ldrh	r3, [r7, #14]
 8001636:	3301      	adds	r3, #1
 8001638:	81fb      	strh	r3, [r7, #14]
 800163a:	89fb      	ldrh	r3, [r7, #14]
 800163c:	2bef      	cmp	r3, #239	; 0xef
 800163e:	d9e1      	bls.n	8001604 <ST7789_Fill_Color+0x28>
				}
	#endif
	ST7789_UnSelect();
 8001640:	2201      	movs	r2, #1
 8001642:	2180      	movs	r1, #128	; 0x80
 8001644:	4803      	ldr	r0, [pc, #12]	; (8001654 <ST7789_Fill_Color+0x78>)
 8001646:	f001 fe53 	bl	80032f0 <HAL_GPIO_WritePin>
}
 800164a:	bf00      	nop
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40020400 	.word	0x40020400

08001658 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001658:	b082      	sub	sp, #8
 800165a:	b590      	push	{r4, r7, lr}
 800165c:	b089      	sub	sp, #36	; 0x24
 800165e:	af00      	add	r7, sp, #0
 8001660:	637b      	str	r3, [r7, #52]	; 0x34
 8001662:	4603      	mov	r3, r0
 8001664:	80fb      	strh	r3, [r7, #6]
 8001666:	460b      	mov	r3, r1
 8001668:	80bb      	strh	r3, [r7, #4]
 800166a:	4613      	mov	r3, r2
 800166c:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 800166e:	2200      	movs	r2, #0
 8001670:	2180      	movs	r1, #128	; 0x80
 8001672:	4838      	ldr	r0, [pc, #224]	; (8001754 <ST7789_WriteChar+0xfc>)
 8001674:	f001 fe3c 	bl	80032f0 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8001678:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800167c:	b29a      	uxth	r2, r3
 800167e:	88fb      	ldrh	r3, [r7, #6]
 8001680:	4413      	add	r3, r2
 8001682:	b29b      	uxth	r3, r3
 8001684:	3b01      	subs	r3, #1
 8001686:	b29c      	uxth	r4, r3
 8001688:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800168c:	b29a      	uxth	r2, r3
 800168e:	88bb      	ldrh	r3, [r7, #4]
 8001690:	4413      	add	r3, r2
 8001692:	b29b      	uxth	r3, r3
 8001694:	3b01      	subs	r3, #1
 8001696:	b29b      	uxth	r3, r3
 8001698:	88b9      	ldrh	r1, [r7, #4]
 800169a:	88f8      	ldrh	r0, [r7, #6]
 800169c:	4622      	mov	r2, r4
 800169e:	f7ff fea3 	bl	80013e8 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
 80016a6:	e043      	b.n	8001730 <ST7789_WriteChar+0xd8>
		b = font.data[(ch - 32) * font.height + i];
 80016a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80016aa:	78fb      	ldrb	r3, [r7, #3]
 80016ac:	3b20      	subs	r3, #32
 80016ae:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80016b2:	fb01 f303 	mul.w	r3, r1, r3
 80016b6:	4619      	mov	r1, r3
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	440b      	add	r3, r1
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	4413      	add	r3, r2
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 80016c4:	2300      	movs	r3, #0
 80016c6:	61bb      	str	r3, [r7, #24]
 80016c8:	e029      	b.n	800171e <ST7789_WriteChar+0xc6>
			if ((b << j) & 0x8000) {
 80016ca:	697a      	ldr	r2, [r7, #20]
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d00e      	beq.n	80016f8 <ST7789_WriteChar+0xa0>
				uint8_t data[] = {color >> 8, color & 0xFF};
 80016da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80016dc:	0a1b      	lsrs	r3, r3, #8
 80016de:	b29b      	uxth	r3, r3
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	743b      	strb	r3, [r7, #16]
 80016e4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 80016ea:	f107 0310 	add.w	r3, r7, #16
 80016ee:	2102      	movs	r1, #2
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fdf1 	bl	80012d8 <ST7789_WriteData>
 80016f6:	e00f      	b.n	8001718 <ST7789_WriteChar+0xc0>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 80016f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80016fc:	0a1b      	lsrs	r3, r3, #8
 80016fe:	b29b      	uxth	r3, r3
 8001700:	b2db      	uxtb	r3, r3
 8001702:	733b      	strb	r3, [r7, #12]
 8001704:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001708:	b2db      	uxtb	r3, r3
 800170a:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 800170c:	f107 030c 	add.w	r3, r7, #12
 8001710:	2102      	movs	r1, #2
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fde0 	bl	80012d8 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	3301      	adds	r3, #1
 800171c:	61bb      	str	r3, [r7, #24]
 800171e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001722:	461a      	mov	r2, r3
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	4293      	cmp	r3, r2
 8001728:	d3cf      	bcc.n	80016ca <ST7789_WriteChar+0x72>
	for (i = 0; i < font.height; i++) {
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	3301      	adds	r3, #1
 800172e:	61fb      	str	r3, [r7, #28]
 8001730:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001734:	461a      	mov	r2, r3
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	4293      	cmp	r3, r2
 800173a:	d3b5      	bcc.n	80016a8 <ST7789_WriteChar+0x50>
			}
		}
	}
	ST7789_UnSelect();
 800173c:	2201      	movs	r2, #1
 800173e:	2180      	movs	r1, #128	; 0x80
 8001740:	4804      	ldr	r0, [pc, #16]	; (8001754 <ST7789_WriteChar+0xfc>)
 8001742:	f001 fdd5 	bl	80032f0 <HAL_GPIO_WritePin>
}
 8001746:	bf00      	nop
 8001748:	3724      	adds	r7, #36	; 0x24
 800174a:	46bd      	mov	sp, r7
 800174c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001750:	b002      	add	sp, #8
 8001752:	4770      	bx	lr
 8001754:	40020400 	.word	0x40020400

08001758 <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001758:	b082      	sub	sp, #8
 800175a:	b580      	push	{r7, lr}
 800175c:	b086      	sub	sp, #24
 800175e:	af04      	add	r7, sp, #16
 8001760:	603a      	str	r2, [r7, #0]
 8001762:	617b      	str	r3, [r7, #20]
 8001764:	4603      	mov	r3, r0
 8001766:	80fb      	strh	r3, [r7, #6]
 8001768:	460b      	mov	r3, r1
 800176a:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 800176c:	2200      	movs	r2, #0
 800176e:	2180      	movs	r1, #128	; 0x80
 8001770:	4822      	ldr	r0, [pc, #136]	; (80017fc <ST7789_WriteString+0xa4>)
 8001772:	f001 fdbd 	bl	80032f0 <HAL_GPIO_WritePin>
	while (*str) {
 8001776:	e02e      	b.n	80017d6 <ST7789_WriteString+0x7e>
		if (x + font.width >= ST7789_WIDTH) {
 8001778:	88fb      	ldrh	r3, [r7, #6]
 800177a:	7d3a      	ldrb	r2, [r7, #20]
 800177c:	4413      	add	r3, r2
 800177e:	2bef      	cmp	r3, #239	; 0xef
 8001780:	dd14      	ble.n	80017ac <ST7789_WriteString+0x54>
			x = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8001786:	7d7b      	ldrb	r3, [r7, #21]
 8001788:	b29a      	uxth	r2, r3
 800178a:	88bb      	ldrh	r3, [r7, #4]
 800178c:	4413      	add	r3, r2
 800178e:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 8001790:	88bb      	ldrh	r3, [r7, #4]
 8001792:	7d7a      	ldrb	r2, [r7, #21]
 8001794:	4413      	add	r3, r2
 8001796:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800179a:	da21      	bge.n	80017e0 <ST7789_WriteString+0x88>
				break;
			}

			if (*str == ' ') {
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b20      	cmp	r3, #32
 80017a2:	d103      	bne.n	80017ac <ST7789_WriteString+0x54>
				// skip spaces in the beginning of the new line
				str++;
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	3301      	adds	r3, #1
 80017a8:	603b      	str	r3, [r7, #0]
				continue;
 80017aa:	e014      	b.n	80017d6 <ST7789_WriteString+0x7e>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	781a      	ldrb	r2, [r3, #0]
 80017b0:	88b9      	ldrh	r1, [r7, #4]
 80017b2:	88f8      	ldrh	r0, [r7, #6]
 80017b4:	8c3b      	ldrh	r3, [r7, #32]
 80017b6:	9302      	str	r3, [sp, #8]
 80017b8:	8bbb      	ldrh	r3, [r7, #28]
 80017ba:	9301      	str	r3, [sp, #4]
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	f7ff ff49 	bl	8001658 <ST7789_WriteChar>
		x += font.width;
 80017c6:	7d3b      	ldrb	r3, [r7, #20]
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	88fb      	ldrh	r3, [r7, #6]
 80017cc:	4413      	add	r3, r2
 80017ce:	80fb      	strh	r3, [r7, #6]
		str++;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	3301      	adds	r3, #1
 80017d4:	603b      	str	r3, [r7, #0]
	while (*str) {
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1cc      	bne.n	8001778 <ST7789_WriteString+0x20>
 80017de:	e000      	b.n	80017e2 <ST7789_WriteString+0x8a>
				break;
 80017e0:	bf00      	nop
	}
	ST7789_UnSelect();
 80017e2:	2201      	movs	r2, #1
 80017e4:	2180      	movs	r1, #128	; 0x80
 80017e6:	4805      	ldr	r0, [pc, #20]	; (80017fc <ST7789_WriteString+0xa4>)
 80017e8:	f001 fd82 	bl	80032f0 <HAL_GPIO_WritePin>
}
 80017ec:	bf00      	nop
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80017f6:	b002      	add	sp, #8
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	40020400 	.word	0x40020400

08001800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
 800180a:	4b10      	ldr	r3, [pc, #64]	; (800184c <HAL_MspInit+0x4c>)
 800180c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180e:	4a0f      	ldr	r2, [pc, #60]	; (800184c <HAL_MspInit+0x4c>)
 8001810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001814:	6453      	str	r3, [r2, #68]	; 0x44
 8001816:	4b0d      	ldr	r3, [pc, #52]	; (800184c <HAL_MspInit+0x4c>)
 8001818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800181e:	607b      	str	r3, [r7, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	603b      	str	r3, [r7, #0]
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <HAL_MspInit+0x4c>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	4a08      	ldr	r2, [pc, #32]	; (800184c <HAL_MspInit+0x4c>)
 800182c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001830:	6413      	str	r3, [r2, #64]	; 0x40
 8001832:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_MspInit+0x4c>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183a:	603b      	str	r3, [r7, #0]
 800183c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	40023800 	.word	0x40023800

08001850 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08c      	sub	sp, #48	; 0x30
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 031c 	add.w	r3, r7, #28
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a4a      	ldr	r2, [pc, #296]	; (8001998 <HAL_CAN_MspInit+0x148>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d13e      	bne.n	80018f0 <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001872:	4b4a      	ldr	r3, [pc, #296]	; (800199c <HAL_CAN_MspInit+0x14c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	3301      	adds	r3, #1
 8001878:	4a48      	ldr	r2, [pc, #288]	; (800199c <HAL_CAN_MspInit+0x14c>)
 800187a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800187c:	4b47      	ldr	r3, [pc, #284]	; (800199c <HAL_CAN_MspInit+0x14c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d10d      	bne.n	80018a0 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001884:	2300      	movs	r3, #0
 8001886:	61bb      	str	r3, [r7, #24]
 8001888:	4b45      	ldr	r3, [pc, #276]	; (80019a0 <HAL_CAN_MspInit+0x150>)
 800188a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188c:	4a44      	ldr	r2, [pc, #272]	; (80019a0 <HAL_CAN_MspInit+0x150>)
 800188e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001892:	6413      	str	r3, [r2, #64]	; 0x40
 8001894:	4b42      	ldr	r3, [pc, #264]	; (80019a0 <HAL_CAN_MspInit+0x150>)
 8001896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189c:	61bb      	str	r3, [r7, #24]
 800189e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]
 80018a4:	4b3e      	ldr	r3, [pc, #248]	; (80019a0 <HAL_CAN_MspInit+0x150>)
 80018a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a8:	4a3d      	ldr	r2, [pc, #244]	; (80019a0 <HAL_CAN_MspInit+0x150>)
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	6313      	str	r3, [r2, #48]	; 0x30
 80018b0:	4b3b      	ldr	r3, [pc, #236]	; (80019a0 <HAL_CAN_MspInit+0x150>)
 80018b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	617b      	str	r3, [r7, #20]
 80018ba:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80018bc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80018c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c2:	2302      	movs	r3, #2
 80018c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ca:	2303      	movs	r3, #3
 80018cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80018ce:	2309      	movs	r3, #9
 80018d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d2:	f107 031c 	add.w	r3, r7, #28
 80018d6:	4619      	mov	r1, r3
 80018d8:	4832      	ldr	r0, [pc, #200]	; (80019a4 <HAL_CAN_MspInit+0x154>)
 80018da:	f001 fb6d 	bl	8002fb8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80018de:	2200      	movs	r2, #0
 80018e0:	2100      	movs	r1, #0
 80018e2:	2014      	movs	r0, #20
 80018e4:	f001 fa9f 	bl	8002e26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80018e8:	2014      	movs	r0, #20
 80018ea:	f001 fab8 	bl	8002e5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80018ee:	e04f      	b.n	8001990 <HAL_CAN_MspInit+0x140>
  else if(hcan->Instance==CAN2)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a2c      	ldr	r2, [pc, #176]	; (80019a8 <HAL_CAN_MspInit+0x158>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d14a      	bne.n	8001990 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	4b28      	ldr	r3, [pc, #160]	; (80019a0 <HAL_CAN_MspInit+0x150>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	4a27      	ldr	r2, [pc, #156]	; (80019a0 <HAL_CAN_MspInit+0x150>)
 8001904:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001908:	6413      	str	r3, [r2, #64]	; 0x40
 800190a:	4b25      	ldr	r3, [pc, #148]	; (80019a0 <HAL_CAN_MspInit+0x150>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001916:	4b21      	ldr	r3, [pc, #132]	; (800199c <HAL_CAN_MspInit+0x14c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	3301      	adds	r3, #1
 800191c:	4a1f      	ldr	r2, [pc, #124]	; (800199c <HAL_CAN_MspInit+0x14c>)
 800191e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001920:	4b1e      	ldr	r3, [pc, #120]	; (800199c <HAL_CAN_MspInit+0x14c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d10d      	bne.n	8001944 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	4b1c      	ldr	r3, [pc, #112]	; (80019a0 <HAL_CAN_MspInit+0x150>)
 800192e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001930:	4a1b      	ldr	r2, [pc, #108]	; (80019a0 <HAL_CAN_MspInit+0x150>)
 8001932:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001936:	6413      	str	r3, [r2, #64]	; 0x40
 8001938:	4b19      	ldr	r3, [pc, #100]	; (80019a0 <HAL_CAN_MspInit+0x150>)
 800193a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001944:	2300      	movs	r3, #0
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <HAL_CAN_MspInit+0x150>)
 800194a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194c:	4a14      	ldr	r2, [pc, #80]	; (80019a0 <HAL_CAN_MspInit+0x150>)
 800194e:	f043 0302 	orr.w	r3, r3, #2
 8001952:	6313      	str	r3, [r2, #48]	; 0x30
 8001954:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <HAL_CAN_MspInit+0x150>)
 8001956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001960:	2360      	movs	r3, #96	; 0x60
 8001962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001964:	2302      	movs	r3, #2
 8001966:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196c:	2303      	movs	r3, #3
 800196e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001970:	2309      	movs	r3, #9
 8001972:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001974:	f107 031c 	add.w	r3, r7, #28
 8001978:	4619      	mov	r1, r3
 800197a:	480c      	ldr	r0, [pc, #48]	; (80019ac <HAL_CAN_MspInit+0x15c>)
 800197c:	f001 fb1c 	bl	8002fb8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8001980:	2200      	movs	r2, #0
 8001982:	2100      	movs	r1, #0
 8001984:	2041      	movs	r0, #65	; 0x41
 8001986:	f001 fa4e 	bl	8002e26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800198a:	2041      	movs	r0, #65	; 0x41
 800198c:	f001 fa67 	bl	8002e5e <HAL_NVIC_EnableIRQ>
}
 8001990:	bf00      	nop
 8001992:	3730      	adds	r7, #48	; 0x30
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40006400 	.word	0x40006400
 800199c:	20000348 	.word	0x20000348
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40020000 	.word	0x40020000
 80019a8:	40006800 	.word	0x40006800
 80019ac:	40020400 	.word	0x40020400

080019b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08a      	sub	sp, #40	; 0x28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a28      	ldr	r2, [pc, #160]	; (8001a70 <HAL_SPI_MspInit+0xc0>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d149      	bne.n	8001a66 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	4b27      	ldr	r3, [pc, #156]	; (8001a74 <HAL_SPI_MspInit+0xc4>)
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	4a26      	ldr	r2, [pc, #152]	; (8001a74 <HAL_SPI_MspInit+0xc4>)
 80019dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019e0:	6453      	str	r3, [r2, #68]	; 0x44
 80019e2:	4b24      	ldr	r3, [pc, #144]	; (8001a74 <HAL_SPI_MspInit+0xc4>)
 80019e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	4b20      	ldr	r3, [pc, #128]	; (8001a74 <HAL_SPI_MspInit+0xc4>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	4a1f      	ldr	r2, [pc, #124]	; (8001a74 <HAL_SPI_MspInit+0xc4>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	6313      	str	r3, [r2, #48]	; 0x30
 80019fe:	4b1d      	ldr	r3, [pc, #116]	; (8001a74 <HAL_SPI_MspInit+0xc4>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <HAL_SPI_MspInit+0xc4>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	4a18      	ldr	r2, [pc, #96]	; (8001a74 <HAL_SPI_MspInit+0xc4>)
 8001a14:	f043 0302 	orr.w	r3, r3, #2
 8001a18:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1a:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <HAL_SPI_MspInit+0xc4>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	60bb      	str	r3, [r7, #8]
 8001a24:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a26:	23c0      	movs	r3, #192	; 0xc0
 8001a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a32:	2303      	movs	r3, #3
 8001a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a36:	2305      	movs	r3, #5
 8001a38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3a:	f107 0314 	add.w	r3, r7, #20
 8001a3e:	4619      	mov	r1, r3
 8001a40:	480d      	ldr	r0, [pc, #52]	; (8001a78 <HAL_SPI_MspInit+0xc8>)
 8001a42:	f001 fab9 	bl	8002fb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a46:	2308      	movs	r3, #8
 8001a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a52:	2303      	movs	r3, #3
 8001a54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a56:	2305      	movs	r3, #5
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a5a:	f107 0314 	add.w	r3, r7, #20
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4806      	ldr	r0, [pc, #24]	; (8001a7c <HAL_SPI_MspInit+0xcc>)
 8001a62:	f001 faa9 	bl	8002fb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a66:	bf00      	nop
 8001a68:	3728      	adds	r7, #40	; 0x28
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40013000 	.word	0x40013000
 8001a74:	40023800 	.word	0x40023800
 8001a78:	40020000 	.word	0x40020000
 8001a7c:	40020400 	.word	0x40020400

08001a80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a90:	d115      	bne.n	8001abe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <HAL_TIM_Base_MspInit+0x48>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	4a0b      	ldr	r2, [pc, #44]	; (8001ac8 <HAL_TIM_Base_MspInit+0x48>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa2:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <HAL_TIM_Base_MspInit+0x48>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	201c      	movs	r0, #28
 8001ab4:	f001 f9b7 	bl	8002e26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ab8:	201c      	movs	r0, #28
 8001aba:	f001 f9d0 	bl	8002e5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001abe:	bf00      	nop
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40023800 	.word	0x40023800

08001acc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	; 0x28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a1d      	ldr	r2, [pc, #116]	; (8001b60 <HAL_UART_MspInit+0x94>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d133      	bne.n	8001b56 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	4b1c      	ldr	r3, [pc, #112]	; (8001b64 <HAL_UART_MspInit+0x98>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	4a1b      	ldr	r2, [pc, #108]	; (8001b64 <HAL_UART_MspInit+0x98>)
 8001af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001afc:	6413      	str	r3, [r2, #64]	; 0x40
 8001afe:	4b19      	ldr	r3, [pc, #100]	; (8001b64 <HAL_UART_MspInit+0x98>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b06:	613b      	str	r3, [r7, #16]
 8001b08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <HAL_UART_MspInit+0x98>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a14      	ldr	r2, [pc, #80]	; (8001b64 <HAL_UART_MspInit+0x98>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <HAL_UART_MspInit+0x98>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b26:	230c      	movs	r3, #12
 8001b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b32:	2303      	movs	r3, #3
 8001b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b36:	2307      	movs	r3, #7
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3a:	f107 0314 	add.w	r3, r7, #20
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4809      	ldr	r0, [pc, #36]	; (8001b68 <HAL_UART_MspInit+0x9c>)
 8001b42:	f001 fa39 	bl	8002fb8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b46:	2200      	movs	r2, #0
 8001b48:	2100      	movs	r1, #0
 8001b4a:	2026      	movs	r0, #38	; 0x26
 8001b4c:	f001 f96b 	bl	8002e26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b50:	2026      	movs	r0, #38	; 0x26
 8001b52:	f001 f984 	bl	8002e5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b56:	bf00      	nop
 8001b58:	3728      	adds	r7, #40	; 0x28
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40004400 	.word	0x40004400
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40020000 	.word	0x40020000

08001b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b70:	e7fe      	b.n	8001b70 <NMI_Handler+0x4>

08001b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b76:	e7fe      	b.n	8001b76 <HardFault_Handler+0x4>

08001b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b7c:	e7fe      	b.n	8001b7c <MemManage_Handler+0x4>

08001b7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b82:	e7fe      	b.n	8001b82 <BusFault_Handler+0x4>

08001b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b88:	e7fe      	b.n	8001b88 <UsageFault_Handler+0x4>

08001b8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bb8:	f000 f9be 	bl	8001f38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001bc4:	4802      	ldr	r0, [pc, #8]	; (8001bd0 <CAN1_RX0_IRQHandler+0x10>)
 8001bc6:	f000 fe2e 	bl	8002826 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000098 	.word	0x20000098

08001bd4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bd8:	4802      	ldr	r0, [pc, #8]	; (8001be4 <TIM2_IRQHandler+0x10>)
 8001bda:	f002 fe71 	bl	80048c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000140 	.word	0x20000140

08001be8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001bec:	4802      	ldr	r0, [pc, #8]	; (8001bf8 <USART2_IRQHandler+0x10>)
 8001bee:	f003 fa77 	bl	80050e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000188 	.word	0x20000188

08001bfc <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001c00:	4802      	ldr	r0, [pc, #8]	; (8001c0c <CAN2_RX1_IRQHandler+0x10>)
 8001c02:	f000 fe10 	bl	8002826 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	200000c0 	.word	0x200000c0

08001c10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c18:	4a14      	ldr	r2, [pc, #80]	; (8001c6c <_sbrk+0x5c>)
 8001c1a:	4b15      	ldr	r3, [pc, #84]	; (8001c70 <_sbrk+0x60>)
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c24:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <_sbrk+0x64>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d102      	bne.n	8001c32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c2c:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <_sbrk+0x64>)
 8001c2e:	4a12      	ldr	r2, [pc, #72]	; (8001c78 <_sbrk+0x68>)
 8001c30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c32:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <_sbrk+0x64>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4413      	add	r3, r2
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d207      	bcs.n	8001c50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c40:	f004 f914 	bl	8005e6c <__errno>
 8001c44:	4603      	mov	r3, r0
 8001c46:	220c      	movs	r2, #12
 8001c48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4e:	e009      	b.n	8001c64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c50:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <_sbrk+0x64>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c56:	4b07      	ldr	r3, [pc, #28]	; (8001c74 <_sbrk+0x64>)
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	4a05      	ldr	r2, [pc, #20]	; (8001c74 <_sbrk+0x64>)
 8001c60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c62:	68fb      	ldr	r3, [r7, #12]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	20020000 	.word	0x20020000
 8001c70:	00000400 	.word	0x00000400
 8001c74:	2000034c 	.word	0x2000034c
 8001c78:	200003b0 	.word	0x200003b0

08001c7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c80:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <SystemInit+0x20>)
 8001c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c86:	4a05      	ldr	r2, [pc, #20]	; (8001c9c <SystemInit+0x20>)
 8001c88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <setTimer1>:
int timer8_flag = 0;

int timer9_counter = 0;
int timer9_flag = 0;

void setTimer1(int duration){
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8001ca8:	4a05      	ldr	r2, [pc, #20]	; (8001cc0 <setTimer1+0x20>)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001cae:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <setTimer1+0x24>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	20000350 	.word	0x20000350
 8001cc4:	20000354 	.word	0x20000354

08001cc8 <timerRun>:
void setTimer9(int duration){
	timer9_counter = duration;
	timer9_flag = 0;
}

void timerRun(){
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8001ccc:	4b4a      	ldr	r3, [pc, #296]	; (8001df8 <timerRun+0x130>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	dd0b      	ble.n	8001cec <timerRun+0x24>
		timer1_counter--;
 8001cd4:	4b48      	ldr	r3, [pc, #288]	; (8001df8 <timerRun+0x130>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	4a47      	ldr	r2, [pc, #284]	; (8001df8 <timerRun+0x130>)
 8001cdc:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0) timer1_flag = 1;
 8001cde:	4b46      	ldr	r3, [pc, #280]	; (8001df8 <timerRun+0x130>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	dc02      	bgt.n	8001cec <timerRun+0x24>
 8001ce6:	4b45      	ldr	r3, [pc, #276]	; (8001dfc <timerRun+0x134>)
 8001ce8:	2201      	movs	r2, #1
 8001cea:	601a      	str	r2, [r3, #0]
	}

	if(timer2_counter > 0){
 8001cec:	4b44      	ldr	r3, [pc, #272]	; (8001e00 <timerRun+0x138>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	dd0b      	ble.n	8001d0c <timerRun+0x44>
		timer2_counter--;
 8001cf4:	4b42      	ldr	r3, [pc, #264]	; (8001e00 <timerRun+0x138>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	4a41      	ldr	r2, [pc, #260]	; (8001e00 <timerRun+0x138>)
 8001cfc:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0) timer2_flag = 1;
 8001cfe:	4b40      	ldr	r3, [pc, #256]	; (8001e00 <timerRun+0x138>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	dc02      	bgt.n	8001d0c <timerRun+0x44>
 8001d06:	4b3f      	ldr	r3, [pc, #252]	; (8001e04 <timerRun+0x13c>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]
	}

	if(timer3_counter > 0){
 8001d0c:	4b3e      	ldr	r3, [pc, #248]	; (8001e08 <timerRun+0x140>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	dd0b      	ble.n	8001d2c <timerRun+0x64>
		timer3_counter--;
 8001d14:	4b3c      	ldr	r3, [pc, #240]	; (8001e08 <timerRun+0x140>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	4a3b      	ldr	r2, [pc, #236]	; (8001e08 <timerRun+0x140>)
 8001d1c:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0) timer3_flag = 1;
 8001d1e:	4b3a      	ldr	r3, [pc, #232]	; (8001e08 <timerRun+0x140>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	dc02      	bgt.n	8001d2c <timerRun+0x64>
 8001d26:	4b39      	ldr	r3, [pc, #228]	; (8001e0c <timerRun+0x144>)
 8001d28:	2201      	movs	r2, #1
 8001d2a:	601a      	str	r2, [r3, #0]
	}

	if(timer4_counter > 0){
 8001d2c:	4b38      	ldr	r3, [pc, #224]	; (8001e10 <timerRun+0x148>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	dd0b      	ble.n	8001d4c <timerRun+0x84>
		timer4_counter--;
 8001d34:	4b36      	ldr	r3, [pc, #216]	; (8001e10 <timerRun+0x148>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	4a35      	ldr	r2, [pc, #212]	; (8001e10 <timerRun+0x148>)
 8001d3c:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0) timer4_flag = 1;
 8001d3e:	4b34      	ldr	r3, [pc, #208]	; (8001e10 <timerRun+0x148>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	dc02      	bgt.n	8001d4c <timerRun+0x84>
 8001d46:	4b33      	ldr	r3, [pc, #204]	; (8001e14 <timerRun+0x14c>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]
	}

	if(timer5_counter > 0){
 8001d4c:	4b32      	ldr	r3, [pc, #200]	; (8001e18 <timerRun+0x150>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	dd0b      	ble.n	8001d6c <timerRun+0xa4>
		timer5_counter--;
 8001d54:	4b30      	ldr	r3, [pc, #192]	; (8001e18 <timerRun+0x150>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	4a2f      	ldr	r2, [pc, #188]	; (8001e18 <timerRun+0x150>)
 8001d5c:	6013      	str	r3, [r2, #0]
		if(timer5_counter <= 0) timer5_flag = 1;
 8001d5e:	4b2e      	ldr	r3, [pc, #184]	; (8001e18 <timerRun+0x150>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	dc02      	bgt.n	8001d6c <timerRun+0xa4>
 8001d66:	4b2d      	ldr	r3, [pc, #180]	; (8001e1c <timerRun+0x154>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]
	}

	if(timer6_counter > 0){
 8001d6c:	4b2c      	ldr	r3, [pc, #176]	; (8001e20 <timerRun+0x158>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	dd0b      	ble.n	8001d8c <timerRun+0xc4>
		timer6_counter--;
 8001d74:	4b2a      	ldr	r3, [pc, #168]	; (8001e20 <timerRun+0x158>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	4a29      	ldr	r2, [pc, #164]	; (8001e20 <timerRun+0x158>)
 8001d7c:	6013      	str	r3, [r2, #0]
		if(timer6_counter <= 0) timer6_flag = 1;
 8001d7e:	4b28      	ldr	r3, [pc, #160]	; (8001e20 <timerRun+0x158>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	dc02      	bgt.n	8001d8c <timerRun+0xc4>
 8001d86:	4b27      	ldr	r3, [pc, #156]	; (8001e24 <timerRun+0x15c>)
 8001d88:	2201      	movs	r2, #1
 8001d8a:	601a      	str	r2, [r3, #0]
	}

	if(timer7_counter > 0){
 8001d8c:	4b26      	ldr	r3, [pc, #152]	; (8001e28 <timerRun+0x160>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	dd0b      	ble.n	8001dac <timerRun+0xe4>
		timer7_counter--;
 8001d94:	4b24      	ldr	r3, [pc, #144]	; (8001e28 <timerRun+0x160>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	4a23      	ldr	r2, [pc, #140]	; (8001e28 <timerRun+0x160>)
 8001d9c:	6013      	str	r3, [r2, #0]
		if(timer7_counter <= 0) timer7_flag = 1;
 8001d9e:	4b22      	ldr	r3, [pc, #136]	; (8001e28 <timerRun+0x160>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	dc02      	bgt.n	8001dac <timerRun+0xe4>
 8001da6:	4b21      	ldr	r3, [pc, #132]	; (8001e2c <timerRun+0x164>)
 8001da8:	2201      	movs	r2, #1
 8001daa:	601a      	str	r2, [r3, #0]
	}

	if(timer8_counter > 0){
 8001dac:	4b20      	ldr	r3, [pc, #128]	; (8001e30 <timerRun+0x168>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	dd0b      	ble.n	8001dcc <timerRun+0x104>
		timer8_counter--;
 8001db4:	4b1e      	ldr	r3, [pc, #120]	; (8001e30 <timerRun+0x168>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	3b01      	subs	r3, #1
 8001dba:	4a1d      	ldr	r2, [pc, #116]	; (8001e30 <timerRun+0x168>)
 8001dbc:	6013      	str	r3, [r2, #0]
		if(timer8_counter <= 0) timer8_flag = 1;
 8001dbe:	4b1c      	ldr	r3, [pc, #112]	; (8001e30 <timerRun+0x168>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	dc02      	bgt.n	8001dcc <timerRun+0x104>
 8001dc6:	4b1b      	ldr	r3, [pc, #108]	; (8001e34 <timerRun+0x16c>)
 8001dc8:	2201      	movs	r2, #1
 8001dca:	601a      	str	r2, [r3, #0]
	}

	if(timer9_counter > 0){
 8001dcc:	4b1a      	ldr	r3, [pc, #104]	; (8001e38 <timerRun+0x170>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	dd0b      	ble.n	8001dec <timerRun+0x124>
		timer9_counter--;
 8001dd4:	4b18      	ldr	r3, [pc, #96]	; (8001e38 <timerRun+0x170>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	4a17      	ldr	r2, [pc, #92]	; (8001e38 <timerRun+0x170>)
 8001ddc:	6013      	str	r3, [r2, #0]
		if(timer9_counter <= 0) timer9_flag = 1;
 8001dde:	4b16      	ldr	r3, [pc, #88]	; (8001e38 <timerRun+0x170>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	dc02      	bgt.n	8001dec <timerRun+0x124>
 8001de6:	4b15      	ldr	r3, [pc, #84]	; (8001e3c <timerRun+0x174>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	601a      	str	r2, [r3, #0]
	}
}
 8001dec:	bf00      	nop
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	20000350 	.word	0x20000350
 8001dfc:	20000354 	.word	0x20000354
 8001e00:	20000358 	.word	0x20000358
 8001e04:	2000035c 	.word	0x2000035c
 8001e08:	20000360 	.word	0x20000360
 8001e0c:	20000364 	.word	0x20000364
 8001e10:	20000368 	.word	0x20000368
 8001e14:	2000036c 	.word	0x2000036c
 8001e18:	20000370 	.word	0x20000370
 8001e1c:	20000374 	.word	0x20000374
 8001e20:	20000378 	.word	0x20000378
 8001e24:	2000037c 	.word	0x2000037c
 8001e28:	20000380 	.word	0x20000380
 8001e2c:	20000384 	.word	0x20000384
 8001e30:	20000388 	.word	0x20000388
 8001e34:	2000038c 	.word	0x2000038c
 8001e38:	20000390 	.word	0x20000390
 8001e3c:	20000394 	.word	0x20000394

08001e40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e44:	480d      	ldr	r0, [pc, #52]	; (8001e7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e46:	490e      	ldr	r1, [pc, #56]	; (8001e80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e48:	4a0e      	ldr	r2, [pc, #56]	; (8001e84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e4c:	e002      	b.n	8001e54 <LoopCopyDataInit>

08001e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e52:	3304      	adds	r3, #4

08001e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e58:	d3f9      	bcc.n	8001e4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e5a:	4a0b      	ldr	r2, [pc, #44]	; (8001e88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e5c:	4c0b      	ldr	r4, [pc, #44]	; (8001e8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e60:	e001      	b.n	8001e66 <LoopFillZerobss>

08001e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e64:	3204      	adds	r2, #4

08001e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e68:	d3fb      	bcc.n	8001e62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e6a:	f7ff ff07 	bl	8001c7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e6e:	f004 f803 	bl	8005e78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e72:	f7fe fe6d 	bl	8000b50 <main>
  bx  lr    
 8001e76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e80:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001e84:	08007674 	.word	0x08007674
  ldr r2, =_sbss
 8001e88:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001e8c:	200003ac 	.word	0x200003ac

08001e90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e90:	e7fe      	b.n	8001e90 <ADC_IRQHandler>
	...

08001e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e98:	4b0e      	ldr	r3, [pc, #56]	; (8001ed4 <HAL_Init+0x40>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a0d      	ldr	r2, [pc, #52]	; (8001ed4 <HAL_Init+0x40>)
 8001e9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ea2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ea4:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <HAL_Init+0x40>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a0a      	ldr	r2, [pc, #40]	; (8001ed4 <HAL_Init+0x40>)
 8001eaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001eb0:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <HAL_Init+0x40>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a07      	ldr	r2, [pc, #28]	; (8001ed4 <HAL_Init+0x40>)
 8001eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ebc:	2003      	movs	r0, #3
 8001ebe:	f000 ffa7 	bl	8002e10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ec2:	200f      	movs	r0, #15
 8001ec4:	f000 f808 	bl	8001ed8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ec8:	f7ff fc9a 	bl	8001800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40023c00 	.word	0x40023c00

08001ed8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ee0:	4b12      	ldr	r3, [pc, #72]	; (8001f2c <HAL_InitTick+0x54>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <HAL_InitTick+0x58>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	4619      	mov	r1, r3
 8001eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 ffbf 	bl	8002e7a <HAL_SYSTICK_Config>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e00e      	b.n	8001f24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b0f      	cmp	r3, #15
 8001f0a:	d80a      	bhi.n	8001f22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	f04f 30ff 	mov.w	r0, #4294967295
 8001f14:	f000 ff87 	bl	8002e26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f18:	4a06      	ldr	r2, [pc, #24]	; (8001f34 <HAL_InitTick+0x5c>)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	e000      	b.n	8001f24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	20000008 	.word	0x20000008
 8001f30:	20000010 	.word	0x20000010
 8001f34:	2000000c 	.word	0x2000000c

08001f38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f3c:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <HAL_IncTick+0x20>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	461a      	mov	r2, r3
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <HAL_IncTick+0x24>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4413      	add	r3, r2
 8001f48:	4a04      	ldr	r2, [pc, #16]	; (8001f5c <HAL_IncTick+0x24>)
 8001f4a:	6013      	str	r3, [r2, #0]
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	20000010 	.word	0x20000010
 8001f5c:	20000398 	.word	0x20000398

08001f60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return uwTick;
 8001f64:	4b03      	ldr	r3, [pc, #12]	; (8001f74 <HAL_GetTick+0x14>)
 8001f66:	681b      	ldr	r3, [r3, #0]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	20000398 	.word	0x20000398

08001f78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f80:	f7ff ffee 	bl	8001f60 <HAL_GetTick>
 8001f84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f90:	d005      	beq.n	8001f9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f92:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <HAL_Delay+0x44>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	461a      	mov	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f9e:	bf00      	nop
 8001fa0:	f7ff ffde 	bl	8001f60 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d8f7      	bhi.n	8001fa0 <HAL_Delay+0x28>
  {
  }
}
 8001fb0:	bf00      	nop
 8001fb2:	bf00      	nop
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000010 	.word	0x20000010

08001fc0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e0ed      	b.n	80021ae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d102      	bne.n	8001fe4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff fc36 	bl	8001850 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f042 0201 	orr.w	r2, r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ff4:	f7ff ffb4 	bl	8001f60 <HAL_GetTick>
 8001ff8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ffa:	e012      	b.n	8002022 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ffc:	f7ff ffb0 	bl	8001f60 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b0a      	cmp	r3, #10
 8002008:	d90b      	bls.n	8002022 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2205      	movs	r2, #5
 800201a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e0c5      	b.n	80021ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0e5      	beq.n	8001ffc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0202 	bic.w	r2, r2, #2
 800203e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002040:	f7ff ff8e 	bl	8001f60 <HAL_GetTick>
 8002044:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002046:	e012      	b.n	800206e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002048:	f7ff ff8a 	bl	8001f60 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b0a      	cmp	r3, #10
 8002054:	d90b      	bls.n	800206e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2205      	movs	r2, #5
 8002066:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e09f      	b.n	80021ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1e5      	bne.n	8002048 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	7e1b      	ldrb	r3, [r3, #24]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d108      	bne.n	8002096 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	e007      	b.n	80020a6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	7e5b      	ldrb	r3, [r3, #25]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d108      	bne.n	80020c0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	e007      	b.n	80020d0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	7e9b      	ldrb	r3, [r3, #26]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d108      	bne.n	80020ea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 0220 	orr.w	r2, r2, #32
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	e007      	b.n	80020fa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 0220 	bic.w	r2, r2, #32
 80020f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	7edb      	ldrb	r3, [r3, #27]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d108      	bne.n	8002114 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 0210 	bic.w	r2, r2, #16
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	e007      	b.n	8002124 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f042 0210 	orr.w	r2, r2, #16
 8002122:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	7f1b      	ldrb	r3, [r3, #28]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d108      	bne.n	800213e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f042 0208 	orr.w	r2, r2, #8
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	e007      	b.n	800214e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 0208 	bic.w	r2, r2, #8
 800214c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	7f5b      	ldrb	r3, [r3, #29]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d108      	bne.n	8002168 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f042 0204 	orr.w	r2, r2, #4
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	e007      	b.n	8002178 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0204 	bic.w	r2, r2, #4
 8002176:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	431a      	orrs	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	695b      	ldr	r3, [r3, #20]
 800218c:	ea42 0103 	orr.w	r1, r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	1e5a      	subs	r2, r3, #1
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	430a      	orrs	r2, r1
 800219c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b087      	sub	sp, #28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021ce:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80021d0:	7cfb      	ldrb	r3, [r7, #19]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d003      	beq.n	80021de <HAL_CAN_ConfigFilter+0x26>
 80021d6:	7cfb      	ldrb	r3, [r7, #19]
 80021d8:	2b02      	cmp	r3, #2
 80021da:	f040 80be 	bne.w	800235a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80021de:	4b65      	ldr	r3, [pc, #404]	; (8002374 <HAL_CAN_ConfigFilter+0x1bc>)
 80021e0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80021e8:	f043 0201 	orr.w	r2, r3, #1
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80021f8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220c:	021b      	lsls	r3, r3, #8
 800220e:	431a      	orrs	r2, r3
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	f003 031f 	and.w	r3, r3, #31
 800221e:	2201      	movs	r2, #1
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	43db      	mvns	r3, r3
 8002230:	401a      	ands	r2, r3
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	69db      	ldr	r3, [r3, #28]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d123      	bne.n	8002288 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	43db      	mvns	r3, r3
 800224a:	401a      	ands	r2, r3
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002262:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	3248      	adds	r2, #72	; 0x48
 8002268:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800227c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800227e:	6979      	ldr	r1, [r7, #20]
 8002280:	3348      	adds	r3, #72	; 0x48
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	440b      	add	r3, r1
 8002286:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d122      	bne.n	80022d6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	431a      	orrs	r2, r3
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80022b0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	3248      	adds	r2, #72	; 0x48
 80022b6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022ca:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022cc:	6979      	ldr	r1, [r7, #20]
 80022ce:	3348      	adds	r3, #72	; 0x48
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	440b      	add	r3, r1
 80022d4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d109      	bne.n	80022f2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	43db      	mvns	r3, r3
 80022e8:	401a      	ands	r2, r3
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80022f0:	e007      	b.n	8002302 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	431a      	orrs	r2, r3
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d109      	bne.n	800231e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	43db      	mvns	r3, r3
 8002314:	401a      	ands	r2, r3
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800231c:	e007      	b.n	800232e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	431a      	orrs	r2, r3
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d107      	bne.n	8002346 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	431a      	orrs	r2, r3
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800234c:	f023 0201 	bic.w	r2, r3, #1
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002356:	2300      	movs	r3, #0
 8002358:	e006      	b.n	8002368 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
  }
}
 8002368:	4618      	mov	r0, r3
 800236a:	371c      	adds	r7, #28
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	40006400 	.word	0x40006400

08002378 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b01      	cmp	r3, #1
 800238a:	d12e      	bne.n	80023ea <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2202      	movs	r2, #2
 8002390:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 0201 	bic.w	r2, r2, #1
 80023a2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80023a4:	f7ff fddc 	bl	8001f60 <HAL_GetTick>
 80023a8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80023aa:	e012      	b.n	80023d2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023ac:	f7ff fdd8 	bl	8001f60 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b0a      	cmp	r3, #10
 80023b8:	d90b      	bls.n	80023d2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2205      	movs	r2, #5
 80023ca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e012      	b.n	80023f8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1e5      	bne.n	80023ac <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80023e6:	2300      	movs	r3, #0
 80023e8:	e006      	b.n	80023f8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
  }
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002400:	b480      	push	{r7}
 8002402:	b089      	sub	sp, #36	; 0x24
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
 800240c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002414:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800241e:	7ffb      	ldrb	r3, [r7, #31]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d003      	beq.n	800242c <HAL_CAN_AddTxMessage+0x2c>
 8002424:	7ffb      	ldrb	r3, [r7, #31]
 8002426:	2b02      	cmp	r3, #2
 8002428:	f040 80b8 	bne.w	800259c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10a      	bne.n	800244c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800243c:	2b00      	cmp	r3, #0
 800243e:	d105      	bne.n	800244c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002446:	2b00      	cmp	r3, #0
 8002448:	f000 80a0 	beq.w	800258c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	0e1b      	lsrs	r3, r3, #24
 8002450:	f003 0303 	and.w	r3, r3, #3
 8002454:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	2b02      	cmp	r3, #2
 800245a:	d907      	bls.n	800246c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002460:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e09e      	b.n	80025aa <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800246c:	2201      	movs	r2, #1
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	409a      	lsls	r2, r3
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10d      	bne.n	800249a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002488:	68f9      	ldr	r1, [r7, #12]
 800248a:	6809      	ldr	r1, [r1, #0]
 800248c:	431a      	orrs	r2, r3
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	3318      	adds	r3, #24
 8002492:	011b      	lsls	r3, r3, #4
 8002494:	440b      	add	r3, r1
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	e00f      	b.n	80024ba <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024a4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024aa:	68f9      	ldr	r1, [r7, #12]
 80024ac:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80024ae:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	3318      	adds	r3, #24
 80024b4:	011b      	lsls	r3, r3, #4
 80024b6:	440b      	add	r3, r1
 80024b8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6819      	ldr	r1, [r3, #0]
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	691a      	ldr	r2, [r3, #16]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	3318      	adds	r3, #24
 80024c6:	011b      	lsls	r3, r3, #4
 80024c8:	440b      	add	r3, r1
 80024ca:	3304      	adds	r3, #4
 80024cc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	7d1b      	ldrb	r3, [r3, #20]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d111      	bne.n	80024fa <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	3318      	adds	r3, #24
 80024de:	011b      	lsls	r3, r3, #4
 80024e0:	4413      	add	r3, r2
 80024e2:	3304      	adds	r3, #4
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	6811      	ldr	r1, [r2, #0]
 80024ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	3318      	adds	r3, #24
 80024f2:	011b      	lsls	r3, r3, #4
 80024f4:	440b      	add	r3, r1
 80024f6:	3304      	adds	r3, #4
 80024f8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3307      	adds	r3, #7
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	061a      	lsls	r2, r3, #24
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	3306      	adds	r3, #6
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	041b      	lsls	r3, r3, #16
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3305      	adds	r3, #5
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	021b      	lsls	r3, r3, #8
 8002514:	4313      	orrs	r3, r2
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	3204      	adds	r2, #4
 800251a:	7812      	ldrb	r2, [r2, #0]
 800251c:	4610      	mov	r0, r2
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	6811      	ldr	r1, [r2, #0]
 8002522:	ea43 0200 	orr.w	r2, r3, r0
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	011b      	lsls	r3, r3, #4
 800252a:	440b      	add	r3, r1
 800252c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002530:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	3303      	adds	r3, #3
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	061a      	lsls	r2, r3, #24
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	3302      	adds	r3, #2
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	041b      	lsls	r3, r3, #16
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3301      	adds	r3, #1
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	021b      	lsls	r3, r3, #8
 800254c:	4313      	orrs	r3, r2
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	7812      	ldrb	r2, [r2, #0]
 8002552:	4610      	mov	r0, r2
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	6811      	ldr	r1, [r2, #0]
 8002558:	ea43 0200 	orr.w	r2, r3, r0
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	011b      	lsls	r3, r3, #4
 8002560:	440b      	add	r3, r1
 8002562:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002566:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	3318      	adds	r3, #24
 8002570:	011b      	lsls	r3, r3, #4
 8002572:	4413      	add	r3, r2
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	6811      	ldr	r1, [r2, #0]
 800257a:	f043 0201 	orr.w	r2, r3, #1
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	3318      	adds	r3, #24
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	440b      	add	r3, r1
 8002586:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002588:	2300      	movs	r3, #0
 800258a:	e00e      	b.n	80025aa <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002590:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e006      	b.n	80025aa <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
  }
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3724      	adds	r7, #36	; 0x24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr

080025b6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80025b6:	b480      	push	{r7}
 80025b8:	b087      	sub	sp, #28
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	60f8      	str	r0, [r7, #12]
 80025be:	60b9      	str	r1, [r7, #8]
 80025c0:	607a      	str	r2, [r7, #4]
 80025c2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025ca:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80025cc:	7dfb      	ldrb	r3, [r7, #23]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d003      	beq.n	80025da <HAL_CAN_GetRxMessage+0x24>
 80025d2:	7dfb      	ldrb	r3, [r7, #23]
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	f040 80f3 	bne.w	80027c0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10e      	bne.n	80025fe <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d116      	bne.n	800261c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e0e7      	b.n	80027ce <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	2b00      	cmp	r3, #0
 800260a:	d107      	bne.n	800261c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e0d8      	b.n	80027ce <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	331b      	adds	r3, #27
 8002624:	011b      	lsls	r3, r3, #4
 8002626:	4413      	add	r3, r2
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0204 	and.w	r2, r3, #4
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10c      	bne.n	8002654 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	331b      	adds	r3, #27
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	4413      	add	r3, r2
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	0d5b      	lsrs	r3, r3, #21
 800264a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	e00b      	b.n	800266c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	331b      	adds	r3, #27
 800265c:	011b      	lsls	r3, r3, #4
 800265e:	4413      	add	r3, r2
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	08db      	lsrs	r3, r3, #3
 8002664:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	331b      	adds	r3, #27
 8002674:	011b      	lsls	r3, r3, #4
 8002676:	4413      	add	r3, r2
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0202 	and.w	r2, r3, #2
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	331b      	adds	r3, #27
 800268a:	011b      	lsls	r3, r3, #4
 800268c:	4413      	add	r3, r2
 800268e:	3304      	adds	r3, #4
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 020f 	and.w	r2, r3, #15
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	331b      	adds	r3, #27
 80026a2:	011b      	lsls	r3, r3, #4
 80026a4:	4413      	add	r3, r2
 80026a6:	3304      	adds	r3, #4
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	0a1b      	lsrs	r3, r3, #8
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	331b      	adds	r3, #27
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	4413      	add	r3, r2
 80026be:	3304      	adds	r3, #4
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	0c1b      	lsrs	r3, r3, #16
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	011b      	lsls	r3, r3, #4
 80026d2:	4413      	add	r3, r2
 80026d4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	b2da      	uxtb	r2, r3
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	011b      	lsls	r3, r3, #4
 80026e8:	4413      	add	r3, r2
 80026ea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	0a1a      	lsrs	r2, r3, #8
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	3301      	adds	r3, #1
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	011b      	lsls	r3, r3, #4
 8002702:	4413      	add	r3, r2
 8002704:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	0c1a      	lsrs	r2, r3, #16
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	3302      	adds	r3, #2
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	4413      	add	r3, r2
 800271e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	0e1a      	lsrs	r2, r3, #24
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	3303      	adds	r3, #3
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	011b      	lsls	r3, r3, #4
 8002736:	4413      	add	r3, r2
 8002738:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	3304      	adds	r3, #4
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	011b      	lsls	r3, r3, #4
 800274e:	4413      	add	r3, r2
 8002750:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	0a1a      	lsrs	r2, r3, #8
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	3305      	adds	r3, #5
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	011b      	lsls	r3, r3, #4
 8002768:	4413      	add	r3, r2
 800276a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	0c1a      	lsrs	r2, r3, #16
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	3306      	adds	r3, #6
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	011b      	lsls	r3, r3, #4
 8002782:	4413      	add	r3, r2
 8002784:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	0e1a      	lsrs	r2, r3, #24
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	3307      	adds	r3, #7
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d108      	bne.n	80027ac <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68da      	ldr	r2, [r3, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f042 0220 	orr.w	r2, r2, #32
 80027a8:	60da      	str	r2, [r3, #12]
 80027aa:	e007      	b.n	80027bc <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	691a      	ldr	r2, [r3, #16]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f042 0220 	orr.w	r2, r2, #32
 80027ba:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80027bc:	2300      	movs	r3, #0
 80027be:	e006      	b.n	80027ce <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
  }
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	371c      	adds	r7, #28
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80027da:	b480      	push	{r7}
 80027dc:	b085      	sub	sp, #20
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027ea:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80027ec:	7bfb      	ldrb	r3, [r7, #15]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d002      	beq.n	80027f8 <HAL_CAN_ActivateNotification+0x1e>
 80027f2:	7bfb      	ldrb	r3, [r7, #15]
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d109      	bne.n	800280c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6959      	ldr	r1, [r3, #20]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	430a      	orrs	r2, r1
 8002806:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002808:	2300      	movs	r3, #0
 800280a:	e006      	b.n	800281a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
  }
}
 800281a:	4618      	mov	r0, r3
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b08a      	sub	sp, #40	; 0x28
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800282e:	2300      	movs	r3, #0
 8002830:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002862:	6a3b      	ldr	r3, [r7, #32]
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	2b00      	cmp	r3, #0
 800286a:	d07c      	beq.n	8002966 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	d023      	beq.n	80028be <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2201      	movs	r2, #1
 800287c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d003      	beq.n	8002890 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 f983 	bl	8002b94 <HAL_CAN_TxMailbox0CompleteCallback>
 800288e:	e016      	b.n	80028be <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	f003 0304 	and.w	r3, r3, #4
 8002896:	2b00      	cmp	r3, #0
 8002898:	d004      	beq.n	80028a4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24
 80028a2:	e00c      	b.n	80028be <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	f003 0308 	and.w	r3, r3, #8
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d004      	beq.n	80028b8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
 80028b6:	e002      	b.n	80028be <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 f989 	bl	8002bd0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d024      	beq.n	8002912 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028d0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d003      	beq.n	80028e4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 f963 	bl	8002ba8 <HAL_CAN_TxMailbox1CompleteCallback>
 80028e2:	e016      	b.n	8002912 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d004      	beq.n	80028f8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028f4:	627b      	str	r3, [r7, #36]	; 0x24
 80028f6:	e00c      	b.n	8002912 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d004      	beq.n	800290c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002908:	627b      	str	r3, [r7, #36]	; 0x24
 800290a:	e002      	b.n	8002912 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 f969 	bl	8002be4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d024      	beq.n	8002966 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002924:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f943 	bl	8002bbc <HAL_CAN_TxMailbox2CompleteCallback>
 8002936:	e016      	b.n	8002966 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d004      	beq.n	800294c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002948:	627b      	str	r3, [r7, #36]	; 0x24
 800294a:	e00c      	b.n	8002966 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d004      	beq.n	8002960 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
 800295e:	e002      	b.n	8002966 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 f949 	bl	8002bf8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002966:	6a3b      	ldr	r3, [r7, #32]
 8002968:	f003 0308 	and.w	r3, r3, #8
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00c      	beq.n	800298a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	f003 0310 	and.w	r3, r3, #16
 8002976:	2b00      	cmp	r3, #0
 8002978:	d007      	beq.n	800298a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002980:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2210      	movs	r2, #16
 8002988:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00b      	beq.n	80029ac <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	2b00      	cmp	r3, #0
 800299c:	d006      	beq.n	80029ac <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2208      	movs	r2, #8
 80029a4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f930 	bl	8002c0c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d009      	beq.n	80029ca <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	f003 0303 	and.w	r3, r3, #3
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d002      	beq.n	80029ca <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7fe fb37 	bl	8001038 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00c      	beq.n	80029ee <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	f003 0310 	and.w	r3, r3, #16
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d007      	beq.n	80029ee <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2210      	movs	r2, #16
 80029ec:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80029ee:	6a3b      	ldr	r3, [r7, #32]
 80029f0:	f003 0320 	and.w	r3, r3, #32
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00b      	beq.n	8002a10 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	f003 0308 	and.w	r3, r3, #8
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d006      	beq.n	8002a10 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2208      	movs	r2, #8
 8002a08:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 f908 	bl	8002c20 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002a10:	6a3b      	ldr	r3, [r7, #32]
 8002a12:	f003 0310 	and.w	r3, r3, #16
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d009      	beq.n	8002a2e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	f003 0303 	and.w	r3, r3, #3
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d002      	beq.n	8002a2e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f7fe fb89 	bl	8001140 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002a2e:	6a3b      	ldr	r3, [r7, #32]
 8002a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00b      	beq.n	8002a50 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	f003 0310 	and.w	r3, r3, #16
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d006      	beq.n	8002a50 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2210      	movs	r2, #16
 8002a48:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f8f2 	bl	8002c34 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002a50:	6a3b      	ldr	r3, [r7, #32]
 8002a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00b      	beq.n	8002a72 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	f003 0308 	and.w	r3, r3, #8
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d006      	beq.n	8002a72 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2208      	movs	r2, #8
 8002a6a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 f8eb 	bl	8002c48 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d07b      	beq.n	8002b74 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	f003 0304 	and.w	r3, r3, #4
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d072      	beq.n	8002b6c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d008      	beq.n	8002aa2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	f043 0301 	orr.w	r3, r3, #1
 8002aa0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002aa2:	6a3b      	ldr	r3, [r7, #32]
 8002aa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d008      	beq.n	8002abe <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	f043 0302 	orr.w	r3, r3, #2
 8002abc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002abe:	6a3b      	ldr	r3, [r7, #32]
 8002ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d008      	beq.n	8002ada <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	f043 0304 	orr.w	r3, r3, #4
 8002ad8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002ada:	6a3b      	ldr	r3, [r7, #32]
 8002adc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d043      	beq.n	8002b6c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d03e      	beq.n	8002b6c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002af4:	2b60      	cmp	r3, #96	; 0x60
 8002af6:	d02b      	beq.n	8002b50 <HAL_CAN_IRQHandler+0x32a>
 8002af8:	2b60      	cmp	r3, #96	; 0x60
 8002afa:	d82e      	bhi.n	8002b5a <HAL_CAN_IRQHandler+0x334>
 8002afc:	2b50      	cmp	r3, #80	; 0x50
 8002afe:	d022      	beq.n	8002b46 <HAL_CAN_IRQHandler+0x320>
 8002b00:	2b50      	cmp	r3, #80	; 0x50
 8002b02:	d82a      	bhi.n	8002b5a <HAL_CAN_IRQHandler+0x334>
 8002b04:	2b40      	cmp	r3, #64	; 0x40
 8002b06:	d019      	beq.n	8002b3c <HAL_CAN_IRQHandler+0x316>
 8002b08:	2b40      	cmp	r3, #64	; 0x40
 8002b0a:	d826      	bhi.n	8002b5a <HAL_CAN_IRQHandler+0x334>
 8002b0c:	2b30      	cmp	r3, #48	; 0x30
 8002b0e:	d010      	beq.n	8002b32 <HAL_CAN_IRQHandler+0x30c>
 8002b10:	2b30      	cmp	r3, #48	; 0x30
 8002b12:	d822      	bhi.n	8002b5a <HAL_CAN_IRQHandler+0x334>
 8002b14:	2b10      	cmp	r3, #16
 8002b16:	d002      	beq.n	8002b1e <HAL_CAN_IRQHandler+0x2f8>
 8002b18:	2b20      	cmp	r3, #32
 8002b1a:	d005      	beq.n	8002b28 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002b1c:	e01d      	b.n	8002b5a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	f043 0308 	orr.w	r3, r3, #8
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b26:	e019      	b.n	8002b5c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	f043 0310 	orr.w	r3, r3, #16
 8002b2e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b30:	e014      	b.n	8002b5c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	f043 0320 	orr.w	r3, r3, #32
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b3a:	e00f      	b.n	8002b5c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b42:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b44:	e00a      	b.n	8002b5c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b4e:	e005      	b.n	8002b5c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b58:	e000      	b.n	8002b5c <HAL_CAN_IRQHandler+0x336>
            break;
 8002b5a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	699a      	ldr	r2, [r3, #24]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002b6a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2204      	movs	r2, #4
 8002b72:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d008      	beq.n	8002b8c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b80:	431a      	orrs	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f868 	bl	8002c5c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002b8c:	bf00      	nop
 8002b8e:	3728      	adds	r7, #40	; 0x28
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c80:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ca2:	4a04      	ldr	r2, [pc, #16]	; (8002cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	60d3      	str	r3, [r2, #12]
}
 8002ca8:	bf00      	nop
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	e000ed00 	.word	0xe000ed00

08002cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cbc:	4b04      	ldr	r3, [pc, #16]	; (8002cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	0a1b      	lsrs	r3, r3, #8
 8002cc2:	f003 0307 	and.w	r3, r3, #7
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	e000ed00 	.word	0xe000ed00

08002cd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	db0b      	blt.n	8002cfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ce6:	79fb      	ldrb	r3, [r7, #7]
 8002ce8:	f003 021f 	and.w	r2, r3, #31
 8002cec:	4907      	ldr	r1, [pc, #28]	; (8002d0c <__NVIC_EnableIRQ+0x38>)
 8002cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf2:	095b      	lsrs	r3, r3, #5
 8002cf4:	2001      	movs	r0, #1
 8002cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8002cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	e000e100 	.word	0xe000e100

08002d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	4603      	mov	r3, r0
 8002d18:	6039      	str	r1, [r7, #0]
 8002d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	db0a      	blt.n	8002d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	490c      	ldr	r1, [pc, #48]	; (8002d5c <__NVIC_SetPriority+0x4c>)
 8002d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2e:	0112      	lsls	r2, r2, #4
 8002d30:	b2d2      	uxtb	r2, r2
 8002d32:	440b      	add	r3, r1
 8002d34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d38:	e00a      	b.n	8002d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	4908      	ldr	r1, [pc, #32]	; (8002d60 <__NVIC_SetPriority+0x50>)
 8002d40:	79fb      	ldrb	r3, [r7, #7]
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	3b04      	subs	r3, #4
 8002d48:	0112      	lsls	r2, r2, #4
 8002d4a:	b2d2      	uxtb	r2, r2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	761a      	strb	r2, [r3, #24]
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	e000e100 	.word	0xe000e100
 8002d60:	e000ed00 	.word	0xe000ed00

08002d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b089      	sub	sp, #36	; 0x24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	f1c3 0307 	rsb	r3, r3, #7
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	bf28      	it	cs
 8002d82:	2304      	movcs	r3, #4
 8002d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	3304      	adds	r3, #4
 8002d8a:	2b06      	cmp	r3, #6
 8002d8c:	d902      	bls.n	8002d94 <NVIC_EncodePriority+0x30>
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	3b03      	subs	r3, #3
 8002d92:	e000      	b.n	8002d96 <NVIC_EncodePriority+0x32>
 8002d94:	2300      	movs	r3, #0
 8002d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d98:	f04f 32ff 	mov.w	r2, #4294967295
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	43da      	mvns	r2, r3
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	401a      	ands	r2, r3
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dac:	f04f 31ff 	mov.w	r1, #4294967295
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	fa01 f303 	lsl.w	r3, r1, r3
 8002db6:	43d9      	mvns	r1, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dbc:	4313      	orrs	r3, r2
         );
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3724      	adds	r7, #36	; 0x24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
	...

08002dcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ddc:	d301      	bcc.n	8002de2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dde:	2301      	movs	r3, #1
 8002de0:	e00f      	b.n	8002e02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002de2:	4a0a      	ldr	r2, [pc, #40]	; (8002e0c <SysTick_Config+0x40>)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3b01      	subs	r3, #1
 8002de8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dea:	210f      	movs	r1, #15
 8002dec:	f04f 30ff 	mov.w	r0, #4294967295
 8002df0:	f7ff ff8e 	bl	8002d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002df4:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <SysTick_Config+0x40>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dfa:	4b04      	ldr	r3, [pc, #16]	; (8002e0c <SysTick_Config+0x40>)
 8002dfc:	2207      	movs	r2, #7
 8002dfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	e000e010 	.word	0xe000e010

08002e10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f7ff ff29 	bl	8002c70 <__NVIC_SetPriorityGrouping>
}
 8002e1e:	bf00      	nop
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b086      	sub	sp, #24
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	60b9      	str	r1, [r7, #8]
 8002e30:	607a      	str	r2, [r7, #4]
 8002e32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e38:	f7ff ff3e 	bl	8002cb8 <__NVIC_GetPriorityGrouping>
 8002e3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	68b9      	ldr	r1, [r7, #8]
 8002e42:	6978      	ldr	r0, [r7, #20]
 8002e44:	f7ff ff8e 	bl	8002d64 <NVIC_EncodePriority>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e4e:	4611      	mov	r1, r2
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff ff5d 	bl	8002d10 <__NVIC_SetPriority>
}
 8002e56:	bf00      	nop
 8002e58:	3718      	adds	r7, #24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b082      	sub	sp, #8
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	4603      	mov	r3, r0
 8002e66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff ff31 	bl	8002cd4 <__NVIC_EnableIRQ>
}
 8002e72:	bf00      	nop
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b082      	sub	sp, #8
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7ff ffa2 	bl	8002dcc <SysTick_Config>
 8002e88:	4603      	mov	r3, r0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b084      	sub	sp, #16
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ea0:	f7ff f85e 	bl	8001f60 <HAL_GetTick>
 8002ea4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d008      	beq.n	8002ec4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2280      	movs	r2, #128	; 0x80
 8002eb6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e052      	b.n	8002f6a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0216 	bic.w	r2, r2, #22
 8002ed2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	695a      	ldr	r2, [r3, #20]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ee2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d103      	bne.n	8002ef4 <HAL_DMA_Abort+0x62>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d007      	beq.n	8002f04 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0208 	bic.w	r2, r2, #8
 8002f02:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0201 	bic.w	r2, r2, #1
 8002f12:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f14:	e013      	b.n	8002f3e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f16:	f7ff f823 	bl	8001f60 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b05      	cmp	r3, #5
 8002f22:	d90c      	bls.n	8002f3e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2220      	movs	r2, #32
 8002f28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2203      	movs	r2, #3
 8002f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e015      	b.n	8002f6a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1e4      	bne.n	8002f16 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f50:	223f      	movs	r2, #63	; 0x3f
 8002f52:	409a      	lsls	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d004      	beq.n	8002f90 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2280      	movs	r2, #128	; 0x80
 8002f8a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e00c      	b.n	8002faa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2205      	movs	r2, #5
 8002f94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 0201 	bic.w	r2, r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
	...

08002fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b089      	sub	sp, #36	; 0x24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fce:	2300      	movs	r3, #0
 8002fd0:	61fb      	str	r3, [r7, #28]
 8002fd2:	e16b      	b.n	80032ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	f040 815a 	bne.w	80032a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f003 0303 	and.w	r3, r3, #3
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d005      	beq.n	800300a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003006:	2b02      	cmp	r3, #2
 8003008:	d130      	bne.n	800306c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	2203      	movs	r2, #3
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	43db      	mvns	r3, r3
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	4013      	ands	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	68da      	ldr	r2, [r3, #12]
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4313      	orrs	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003040:	2201      	movs	r2, #1
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4013      	ands	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	091b      	lsrs	r3, r3, #4
 8003056:	f003 0201 	and.w	r2, r3, #1
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4313      	orrs	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 0303 	and.w	r3, r3, #3
 8003074:	2b03      	cmp	r3, #3
 8003076:	d017      	beq.n	80030a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	2203      	movs	r2, #3
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	43db      	mvns	r3, r3
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4013      	ands	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4313      	orrs	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f003 0303 	and.w	r3, r3, #3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d123      	bne.n	80030fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	08da      	lsrs	r2, r3, #3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3208      	adds	r2, #8
 80030bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	220f      	movs	r2, #15
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	43db      	mvns	r3, r3
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	4013      	ands	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	08da      	lsrs	r2, r3, #3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	3208      	adds	r2, #8
 80030f6:	69b9      	ldr	r1, [r7, #24]
 80030f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	2203      	movs	r2, #3
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4013      	ands	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f003 0203 	and.w	r2, r3, #3
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4313      	orrs	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 80b4 	beq.w	80032a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800313e:	2300      	movs	r3, #0
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	4b60      	ldr	r3, [pc, #384]	; (80032c4 <HAL_GPIO_Init+0x30c>)
 8003144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003146:	4a5f      	ldr	r2, [pc, #380]	; (80032c4 <HAL_GPIO_Init+0x30c>)
 8003148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800314c:	6453      	str	r3, [r2, #68]	; 0x44
 800314e:	4b5d      	ldr	r3, [pc, #372]	; (80032c4 <HAL_GPIO_Init+0x30c>)
 8003150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800315a:	4a5b      	ldr	r2, [pc, #364]	; (80032c8 <HAL_GPIO_Init+0x310>)
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	089b      	lsrs	r3, r3, #2
 8003160:	3302      	adds	r3, #2
 8003162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003166:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	220f      	movs	r2, #15
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	43db      	mvns	r3, r3
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	4013      	ands	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a52      	ldr	r2, [pc, #328]	; (80032cc <HAL_GPIO_Init+0x314>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d02b      	beq.n	80031de <HAL_GPIO_Init+0x226>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a51      	ldr	r2, [pc, #324]	; (80032d0 <HAL_GPIO_Init+0x318>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d025      	beq.n	80031da <HAL_GPIO_Init+0x222>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a50      	ldr	r2, [pc, #320]	; (80032d4 <HAL_GPIO_Init+0x31c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d01f      	beq.n	80031d6 <HAL_GPIO_Init+0x21e>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a4f      	ldr	r2, [pc, #316]	; (80032d8 <HAL_GPIO_Init+0x320>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d019      	beq.n	80031d2 <HAL_GPIO_Init+0x21a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a4e      	ldr	r2, [pc, #312]	; (80032dc <HAL_GPIO_Init+0x324>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d013      	beq.n	80031ce <HAL_GPIO_Init+0x216>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a4d      	ldr	r2, [pc, #308]	; (80032e0 <HAL_GPIO_Init+0x328>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d00d      	beq.n	80031ca <HAL_GPIO_Init+0x212>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a4c      	ldr	r2, [pc, #304]	; (80032e4 <HAL_GPIO_Init+0x32c>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d007      	beq.n	80031c6 <HAL_GPIO_Init+0x20e>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a4b      	ldr	r2, [pc, #300]	; (80032e8 <HAL_GPIO_Init+0x330>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d101      	bne.n	80031c2 <HAL_GPIO_Init+0x20a>
 80031be:	2307      	movs	r3, #7
 80031c0:	e00e      	b.n	80031e0 <HAL_GPIO_Init+0x228>
 80031c2:	2308      	movs	r3, #8
 80031c4:	e00c      	b.n	80031e0 <HAL_GPIO_Init+0x228>
 80031c6:	2306      	movs	r3, #6
 80031c8:	e00a      	b.n	80031e0 <HAL_GPIO_Init+0x228>
 80031ca:	2305      	movs	r3, #5
 80031cc:	e008      	b.n	80031e0 <HAL_GPIO_Init+0x228>
 80031ce:	2304      	movs	r3, #4
 80031d0:	e006      	b.n	80031e0 <HAL_GPIO_Init+0x228>
 80031d2:	2303      	movs	r3, #3
 80031d4:	e004      	b.n	80031e0 <HAL_GPIO_Init+0x228>
 80031d6:	2302      	movs	r3, #2
 80031d8:	e002      	b.n	80031e0 <HAL_GPIO_Init+0x228>
 80031da:	2301      	movs	r3, #1
 80031dc:	e000      	b.n	80031e0 <HAL_GPIO_Init+0x228>
 80031de:	2300      	movs	r3, #0
 80031e0:	69fa      	ldr	r2, [r7, #28]
 80031e2:	f002 0203 	and.w	r2, r2, #3
 80031e6:	0092      	lsls	r2, r2, #2
 80031e8:	4093      	lsls	r3, r2
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031f0:	4935      	ldr	r1, [pc, #212]	; (80032c8 <HAL_GPIO_Init+0x310>)
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	089b      	lsrs	r3, r3, #2
 80031f6:	3302      	adds	r3, #2
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031fe:	4b3b      	ldr	r3, [pc, #236]	; (80032ec <HAL_GPIO_Init+0x334>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	43db      	mvns	r3, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4013      	ands	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	4313      	orrs	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003222:	4a32      	ldr	r2, [pc, #200]	; (80032ec <HAL_GPIO_Init+0x334>)
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003228:	4b30      	ldr	r3, [pc, #192]	; (80032ec <HAL_GPIO_Init+0x334>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	43db      	mvns	r3, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4013      	ands	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	4313      	orrs	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800324c:	4a27      	ldr	r2, [pc, #156]	; (80032ec <HAL_GPIO_Init+0x334>)
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003252:	4b26      	ldr	r3, [pc, #152]	; (80032ec <HAL_GPIO_Init+0x334>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	43db      	mvns	r3, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4013      	ands	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	4313      	orrs	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003276:	4a1d      	ldr	r2, [pc, #116]	; (80032ec <HAL_GPIO_Init+0x334>)
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800327c:	4b1b      	ldr	r3, [pc, #108]	; (80032ec <HAL_GPIO_Init+0x334>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	43db      	mvns	r3, r3
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4013      	ands	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	4313      	orrs	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032a0:	4a12      	ldr	r2, [pc, #72]	; (80032ec <HAL_GPIO_Init+0x334>)
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	3301      	adds	r3, #1
 80032aa:	61fb      	str	r3, [r7, #28]
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	2b0f      	cmp	r3, #15
 80032b0:	f67f ae90 	bls.w	8002fd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032b4:	bf00      	nop
 80032b6:	bf00      	nop
 80032b8:	3724      	adds	r7, #36	; 0x24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	40023800 	.word	0x40023800
 80032c8:	40013800 	.word	0x40013800
 80032cc:	40020000 	.word	0x40020000
 80032d0:	40020400 	.word	0x40020400
 80032d4:	40020800 	.word	0x40020800
 80032d8:	40020c00 	.word	0x40020c00
 80032dc:	40021000 	.word	0x40021000
 80032e0:	40021400 	.word	0x40021400
 80032e4:	40021800 	.word	0x40021800
 80032e8:	40021c00 	.word	0x40021c00
 80032ec:	40013c00 	.word	0x40013c00

080032f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	460b      	mov	r3, r1
 80032fa:	807b      	strh	r3, [r7, #2]
 80032fc:	4613      	mov	r3, r2
 80032fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003300:	787b      	ldrb	r3, [r7, #1]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003306:	887a      	ldrh	r2, [r7, #2]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800330c:	e003      	b.n	8003316 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800330e:	887b      	ldrh	r3, [r7, #2]
 8003310:	041a      	lsls	r2, r3, #16
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	619a      	str	r2, [r3, #24]
}
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
	...

08003324 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e267      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d075      	beq.n	800342e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003342:	4b88      	ldr	r3, [pc, #544]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 030c 	and.w	r3, r3, #12
 800334a:	2b04      	cmp	r3, #4
 800334c:	d00c      	beq.n	8003368 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800334e:	4b85      	ldr	r3, [pc, #532]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003356:	2b08      	cmp	r3, #8
 8003358:	d112      	bne.n	8003380 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800335a:	4b82      	ldr	r3, [pc, #520]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003362:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003366:	d10b      	bne.n	8003380 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003368:	4b7e      	ldr	r3, [pc, #504]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d05b      	beq.n	800342c <HAL_RCC_OscConfig+0x108>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d157      	bne.n	800342c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e242      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003388:	d106      	bne.n	8003398 <HAL_RCC_OscConfig+0x74>
 800338a:	4b76      	ldr	r3, [pc, #472]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a75      	ldr	r2, [pc, #468]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 8003390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003394:	6013      	str	r3, [r2, #0]
 8003396:	e01d      	b.n	80033d4 <HAL_RCC_OscConfig+0xb0>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033a0:	d10c      	bne.n	80033bc <HAL_RCC_OscConfig+0x98>
 80033a2:	4b70      	ldr	r3, [pc, #448]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a6f      	ldr	r2, [pc, #444]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 80033a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	4b6d      	ldr	r3, [pc, #436]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a6c      	ldr	r2, [pc, #432]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 80033b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	e00b      	b.n	80033d4 <HAL_RCC_OscConfig+0xb0>
 80033bc:	4b69      	ldr	r3, [pc, #420]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a68      	ldr	r2, [pc, #416]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 80033c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033c6:	6013      	str	r3, [r2, #0]
 80033c8:	4b66      	ldr	r3, [pc, #408]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a65      	ldr	r2, [pc, #404]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 80033ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d013      	beq.n	8003404 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033dc:	f7fe fdc0 	bl	8001f60 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033e4:	f7fe fdbc 	bl	8001f60 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b64      	cmp	r3, #100	; 0x64
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e207      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033f6:	4b5b      	ldr	r3, [pc, #364]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0f0      	beq.n	80033e4 <HAL_RCC_OscConfig+0xc0>
 8003402:	e014      	b.n	800342e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003404:	f7fe fdac 	bl	8001f60 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800340c:	f7fe fda8 	bl	8001f60 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b64      	cmp	r3, #100	; 0x64
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e1f3      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800341e:	4b51      	ldr	r3, [pc, #324]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1f0      	bne.n	800340c <HAL_RCC_OscConfig+0xe8>
 800342a:	e000      	b.n	800342e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800342c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d063      	beq.n	8003502 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800343a:	4b4a      	ldr	r3, [pc, #296]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 030c 	and.w	r3, r3, #12
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00b      	beq.n	800345e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003446:	4b47      	ldr	r3, [pc, #284]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800344e:	2b08      	cmp	r3, #8
 8003450:	d11c      	bne.n	800348c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003452:	4b44      	ldr	r3, [pc, #272]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d116      	bne.n	800348c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800345e:	4b41      	ldr	r3, [pc, #260]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d005      	beq.n	8003476 <HAL_RCC_OscConfig+0x152>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d001      	beq.n	8003476 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e1c7      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003476:	4b3b      	ldr	r3, [pc, #236]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	4937      	ldr	r1, [pc, #220]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 8003486:	4313      	orrs	r3, r2
 8003488:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800348a:	e03a      	b.n	8003502 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d020      	beq.n	80034d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003494:	4b34      	ldr	r3, [pc, #208]	; (8003568 <HAL_RCC_OscConfig+0x244>)
 8003496:	2201      	movs	r2, #1
 8003498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349a:	f7fe fd61 	bl	8001f60 <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a0:	e008      	b.n	80034b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034a2:	f7fe fd5d 	bl	8001f60 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e1a8      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b4:	4b2b      	ldr	r3, [pc, #172]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0f0      	beq.n	80034a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c0:	4b28      	ldr	r3, [pc, #160]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	4925      	ldr	r1, [pc, #148]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	600b      	str	r3, [r1, #0]
 80034d4:	e015      	b.n	8003502 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034d6:	4b24      	ldr	r3, [pc, #144]	; (8003568 <HAL_RCC_OscConfig+0x244>)
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034dc:	f7fe fd40 	bl	8001f60 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034e4:	f7fe fd3c 	bl	8001f60 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e187      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034f6:	4b1b      	ldr	r3, [pc, #108]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1f0      	bne.n	80034e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0308 	and.w	r3, r3, #8
 800350a:	2b00      	cmp	r3, #0
 800350c:	d036      	beq.n	800357c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d016      	beq.n	8003544 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003516:	4b15      	ldr	r3, [pc, #84]	; (800356c <HAL_RCC_OscConfig+0x248>)
 8003518:	2201      	movs	r2, #1
 800351a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800351c:	f7fe fd20 	bl	8001f60 <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003524:	f7fe fd1c 	bl	8001f60 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e167      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003536:	4b0b      	ldr	r3, [pc, #44]	; (8003564 <HAL_RCC_OscConfig+0x240>)
 8003538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0f0      	beq.n	8003524 <HAL_RCC_OscConfig+0x200>
 8003542:	e01b      	b.n	800357c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003544:	4b09      	ldr	r3, [pc, #36]	; (800356c <HAL_RCC_OscConfig+0x248>)
 8003546:	2200      	movs	r2, #0
 8003548:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800354a:	f7fe fd09 	bl	8001f60 <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003550:	e00e      	b.n	8003570 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003552:	f7fe fd05 	bl	8001f60 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d907      	bls.n	8003570 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e150      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
 8003564:	40023800 	.word	0x40023800
 8003568:	42470000 	.word	0x42470000
 800356c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003570:	4b88      	ldr	r3, [pc, #544]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 8003572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1ea      	bne.n	8003552 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 8097 	beq.w	80036b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800358a:	2300      	movs	r3, #0
 800358c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800358e:	4b81      	ldr	r3, [pc, #516]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10f      	bne.n	80035ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800359a:	2300      	movs	r3, #0
 800359c:	60bb      	str	r3, [r7, #8]
 800359e:	4b7d      	ldr	r3, [pc, #500]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	4a7c      	ldr	r2, [pc, #496]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 80035a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035a8:	6413      	str	r3, [r2, #64]	; 0x40
 80035aa:	4b7a      	ldr	r3, [pc, #488]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b2:	60bb      	str	r3, [r7, #8]
 80035b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035b6:	2301      	movs	r3, #1
 80035b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ba:	4b77      	ldr	r3, [pc, #476]	; (8003798 <HAL_RCC_OscConfig+0x474>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d118      	bne.n	80035f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035c6:	4b74      	ldr	r3, [pc, #464]	; (8003798 <HAL_RCC_OscConfig+0x474>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a73      	ldr	r2, [pc, #460]	; (8003798 <HAL_RCC_OscConfig+0x474>)
 80035cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035d2:	f7fe fcc5 	bl	8001f60 <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d8:	e008      	b.n	80035ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035da:	f7fe fcc1 	bl	8001f60 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e10c      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ec:	4b6a      	ldr	r3, [pc, #424]	; (8003798 <HAL_RCC_OscConfig+0x474>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0f0      	beq.n	80035da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d106      	bne.n	800360e <HAL_RCC_OscConfig+0x2ea>
 8003600:	4b64      	ldr	r3, [pc, #400]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 8003602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003604:	4a63      	ldr	r2, [pc, #396]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 8003606:	f043 0301 	orr.w	r3, r3, #1
 800360a:	6713      	str	r3, [r2, #112]	; 0x70
 800360c:	e01c      	b.n	8003648 <HAL_RCC_OscConfig+0x324>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	2b05      	cmp	r3, #5
 8003614:	d10c      	bne.n	8003630 <HAL_RCC_OscConfig+0x30c>
 8003616:	4b5f      	ldr	r3, [pc, #380]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 8003618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361a:	4a5e      	ldr	r2, [pc, #376]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 800361c:	f043 0304 	orr.w	r3, r3, #4
 8003620:	6713      	str	r3, [r2, #112]	; 0x70
 8003622:	4b5c      	ldr	r3, [pc, #368]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 8003624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003626:	4a5b      	ldr	r2, [pc, #364]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 8003628:	f043 0301 	orr.w	r3, r3, #1
 800362c:	6713      	str	r3, [r2, #112]	; 0x70
 800362e:	e00b      	b.n	8003648 <HAL_RCC_OscConfig+0x324>
 8003630:	4b58      	ldr	r3, [pc, #352]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 8003632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003634:	4a57      	ldr	r2, [pc, #348]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 8003636:	f023 0301 	bic.w	r3, r3, #1
 800363a:	6713      	str	r3, [r2, #112]	; 0x70
 800363c:	4b55      	ldr	r3, [pc, #340]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 800363e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003640:	4a54      	ldr	r2, [pc, #336]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 8003642:	f023 0304 	bic.w	r3, r3, #4
 8003646:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d015      	beq.n	800367c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003650:	f7fe fc86 	bl	8001f60 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003656:	e00a      	b.n	800366e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003658:	f7fe fc82 	bl	8001f60 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	f241 3288 	movw	r2, #5000	; 0x1388
 8003666:	4293      	cmp	r3, r2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e0cb      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800366e:	4b49      	ldr	r3, [pc, #292]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 8003670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0ee      	beq.n	8003658 <HAL_RCC_OscConfig+0x334>
 800367a:	e014      	b.n	80036a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800367c:	f7fe fc70 	bl	8001f60 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003682:	e00a      	b.n	800369a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003684:	f7fe fc6c 	bl	8001f60 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003692:	4293      	cmp	r3, r2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e0b5      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800369a:	4b3e      	ldr	r3, [pc, #248]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 800369c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1ee      	bne.n	8003684 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036a6:	7dfb      	ldrb	r3, [r7, #23]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d105      	bne.n	80036b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ac:	4b39      	ldr	r3, [pc, #228]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	4a38      	ldr	r2, [pc, #224]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 80036b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 80a1 	beq.w	8003804 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036c2:	4b34      	ldr	r3, [pc, #208]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 030c 	and.w	r3, r3, #12
 80036ca:	2b08      	cmp	r3, #8
 80036cc:	d05c      	beq.n	8003788 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d141      	bne.n	800375a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d6:	4b31      	ldr	r3, [pc, #196]	; (800379c <HAL_RCC_OscConfig+0x478>)
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036dc:	f7fe fc40 	bl	8001f60 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036e4:	f7fe fc3c 	bl	8001f60 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e087      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f6:	4b27      	ldr	r3, [pc, #156]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1f0      	bne.n	80036e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	69da      	ldr	r2, [r3, #28]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	431a      	orrs	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	019b      	lsls	r3, r3, #6
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003718:	085b      	lsrs	r3, r3, #1
 800371a:	3b01      	subs	r3, #1
 800371c:	041b      	lsls	r3, r3, #16
 800371e:	431a      	orrs	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003724:	061b      	lsls	r3, r3, #24
 8003726:	491b      	ldr	r1, [pc, #108]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 8003728:	4313      	orrs	r3, r2
 800372a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800372c:	4b1b      	ldr	r3, [pc, #108]	; (800379c <HAL_RCC_OscConfig+0x478>)
 800372e:	2201      	movs	r2, #1
 8003730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003732:	f7fe fc15 	bl	8001f60 <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003738:	e008      	b.n	800374c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800373a:	f7fe fc11 	bl	8001f60 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e05c      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800374c:	4b11      	ldr	r3, [pc, #68]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0f0      	beq.n	800373a <HAL_RCC_OscConfig+0x416>
 8003758:	e054      	b.n	8003804 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800375a:	4b10      	ldr	r3, [pc, #64]	; (800379c <HAL_RCC_OscConfig+0x478>)
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003760:	f7fe fbfe 	bl	8001f60 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003768:	f7fe fbfa 	bl	8001f60 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e045      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800377a:	4b06      	ldr	r3, [pc, #24]	; (8003794 <HAL_RCC_OscConfig+0x470>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f0      	bne.n	8003768 <HAL_RCC_OscConfig+0x444>
 8003786:	e03d      	b.n	8003804 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d107      	bne.n	80037a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e038      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
 8003794:	40023800 	.word	0x40023800
 8003798:	40007000 	.word	0x40007000
 800379c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037a0:	4b1b      	ldr	r3, [pc, #108]	; (8003810 <HAL_RCC_OscConfig+0x4ec>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d028      	beq.n	8003800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d121      	bne.n	8003800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d11a      	bne.n	8003800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037d0:	4013      	ands	r3, r2
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037d8:	4293      	cmp	r3, r2
 80037da:	d111      	bne.n	8003800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e6:	085b      	lsrs	r3, r3, #1
 80037e8:	3b01      	subs	r3, #1
 80037ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d107      	bne.n	8003800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d001      	beq.n	8003804 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e000      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3718      	adds	r7, #24
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	40023800 	.word	0x40023800

08003814 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d101      	bne.n	8003828 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e0cc      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003828:	4b68      	ldr	r3, [pc, #416]	; (80039cc <HAL_RCC_ClockConfig+0x1b8>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	429a      	cmp	r2, r3
 8003834:	d90c      	bls.n	8003850 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003836:	4b65      	ldr	r3, [pc, #404]	; (80039cc <HAL_RCC_ClockConfig+0x1b8>)
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800383e:	4b63      	ldr	r3, [pc, #396]	; (80039cc <HAL_RCC_ClockConfig+0x1b8>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0307 	and.w	r3, r3, #7
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	429a      	cmp	r2, r3
 800384a:	d001      	beq.n	8003850 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e0b8      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d020      	beq.n	800389e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	d005      	beq.n	8003874 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003868:	4b59      	ldr	r3, [pc, #356]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	4a58      	ldr	r2, [pc, #352]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 800386e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003872:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0308 	and.w	r3, r3, #8
 800387c:	2b00      	cmp	r3, #0
 800387e:	d005      	beq.n	800388c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003880:	4b53      	ldr	r3, [pc, #332]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	4a52      	ldr	r2, [pc, #328]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003886:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800388a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800388c:	4b50      	ldr	r3, [pc, #320]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	494d      	ldr	r1, [pc, #308]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 800389a:	4313      	orrs	r3, r2
 800389c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d044      	beq.n	8003934 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d107      	bne.n	80038c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038b2:	4b47      	ldr	r3, [pc, #284]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d119      	bne.n	80038f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e07f      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d003      	beq.n	80038d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038ce:	2b03      	cmp	r3, #3
 80038d0:	d107      	bne.n	80038e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038d2:	4b3f      	ldr	r3, [pc, #252]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d109      	bne.n	80038f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e06f      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e2:	4b3b      	ldr	r3, [pc, #236]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e067      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038f2:	4b37      	ldr	r3, [pc, #220]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f023 0203 	bic.w	r2, r3, #3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	4934      	ldr	r1, [pc, #208]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003900:	4313      	orrs	r3, r2
 8003902:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003904:	f7fe fb2c 	bl	8001f60 <HAL_GetTick>
 8003908:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800390a:	e00a      	b.n	8003922 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800390c:	f7fe fb28 	bl	8001f60 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	f241 3288 	movw	r2, #5000	; 0x1388
 800391a:	4293      	cmp	r3, r2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e04f      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003922:	4b2b      	ldr	r3, [pc, #172]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 020c 	and.w	r2, r3, #12
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	429a      	cmp	r2, r3
 8003932:	d1eb      	bne.n	800390c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003934:	4b25      	ldr	r3, [pc, #148]	; (80039cc <HAL_RCC_ClockConfig+0x1b8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	429a      	cmp	r2, r3
 8003940:	d20c      	bcs.n	800395c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003942:	4b22      	ldr	r3, [pc, #136]	; (80039cc <HAL_RCC_ClockConfig+0x1b8>)
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800394a:	4b20      	ldr	r3, [pc, #128]	; (80039cc <HAL_RCC_ClockConfig+0x1b8>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0307 	and.w	r3, r3, #7
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	429a      	cmp	r2, r3
 8003956:	d001      	beq.n	800395c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e032      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	d008      	beq.n	800397a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003968:	4b19      	ldr	r3, [pc, #100]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	4916      	ldr	r1, [pc, #88]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003976:	4313      	orrs	r3, r2
 8003978:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b00      	cmp	r3, #0
 8003984:	d009      	beq.n	800399a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003986:	4b12      	ldr	r3, [pc, #72]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	490e      	ldr	r1, [pc, #56]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003996:	4313      	orrs	r3, r2
 8003998:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800399a:	f000 f821 	bl	80039e0 <HAL_RCC_GetSysClockFreq>
 800399e:	4602      	mov	r2, r0
 80039a0:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	091b      	lsrs	r3, r3, #4
 80039a6:	f003 030f 	and.w	r3, r3, #15
 80039aa:	490a      	ldr	r1, [pc, #40]	; (80039d4 <HAL_RCC_ClockConfig+0x1c0>)
 80039ac:	5ccb      	ldrb	r3, [r1, r3]
 80039ae:	fa22 f303 	lsr.w	r3, r2, r3
 80039b2:	4a09      	ldr	r2, [pc, #36]	; (80039d8 <HAL_RCC_ClockConfig+0x1c4>)
 80039b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039b6:	4b09      	ldr	r3, [pc, #36]	; (80039dc <HAL_RCC_ClockConfig+0x1c8>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fe fa8c 	bl	8001ed8 <HAL_InitTick>

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	40023c00 	.word	0x40023c00
 80039d0:	40023800 	.word	0x40023800
 80039d4:	08007618 	.word	0x08007618
 80039d8:	20000008 	.word	0x20000008
 80039dc:	2000000c 	.word	0x2000000c

080039e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039e4:	b090      	sub	sp, #64	; 0x40
 80039e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	637b      	str	r3, [r7, #52]	; 0x34
 80039ec:	2300      	movs	r3, #0
 80039ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039f0:	2300      	movs	r3, #0
 80039f2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039f8:	4b59      	ldr	r3, [pc, #356]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x180>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f003 030c 	and.w	r3, r3, #12
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d00d      	beq.n	8003a20 <HAL_RCC_GetSysClockFreq+0x40>
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	f200 80a1 	bhi.w	8003b4c <HAL_RCC_GetSysClockFreq+0x16c>
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <HAL_RCC_GetSysClockFreq+0x34>
 8003a0e:	2b04      	cmp	r3, #4
 8003a10:	d003      	beq.n	8003a1a <HAL_RCC_GetSysClockFreq+0x3a>
 8003a12:	e09b      	b.n	8003b4c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a14:	4b53      	ldr	r3, [pc, #332]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a16:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003a18:	e09b      	b.n	8003b52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a1a:	4b53      	ldr	r3, [pc, #332]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a1c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a1e:	e098      	b.n	8003b52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a20:	4b4f      	ldr	r3, [pc, #316]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a28:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a2a:	4b4d      	ldr	r3, [pc, #308]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d028      	beq.n	8003a88 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a36:	4b4a      	ldr	r3, [pc, #296]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	099b      	lsrs	r3, r3, #6
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	623b      	str	r3, [r7, #32]
 8003a40:	627a      	str	r2, [r7, #36]	; 0x24
 8003a42:	6a3b      	ldr	r3, [r7, #32]
 8003a44:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a48:	2100      	movs	r1, #0
 8003a4a:	4b47      	ldr	r3, [pc, #284]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a4c:	fb03 f201 	mul.w	r2, r3, r1
 8003a50:	2300      	movs	r3, #0
 8003a52:	fb00 f303 	mul.w	r3, r0, r3
 8003a56:	4413      	add	r3, r2
 8003a58:	4a43      	ldr	r2, [pc, #268]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a5a:	fba0 1202 	umull	r1, r2, r0, r2
 8003a5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a60:	460a      	mov	r2, r1
 8003a62:	62ba      	str	r2, [r7, #40]	; 0x28
 8003a64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a66:	4413      	add	r3, r2
 8003a68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	61bb      	str	r3, [r7, #24]
 8003a70:	61fa      	str	r2, [r7, #28]
 8003a72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a76:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003a7a:	f7fc fbf9 	bl	8000270 <__aeabi_uldivmod>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	460b      	mov	r3, r1
 8003a82:	4613      	mov	r3, r2
 8003a84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a86:	e053      	b.n	8003b30 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a88:	4b35      	ldr	r3, [pc, #212]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	099b      	lsrs	r3, r3, #6
 8003a8e:	2200      	movs	r2, #0
 8003a90:	613b      	str	r3, [r7, #16]
 8003a92:	617a      	str	r2, [r7, #20]
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003a9a:	f04f 0b00 	mov.w	fp, #0
 8003a9e:	4652      	mov	r2, sl
 8003aa0:	465b      	mov	r3, fp
 8003aa2:	f04f 0000 	mov.w	r0, #0
 8003aa6:	f04f 0100 	mov.w	r1, #0
 8003aaa:	0159      	lsls	r1, r3, #5
 8003aac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ab0:	0150      	lsls	r0, r2, #5
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	ebb2 080a 	subs.w	r8, r2, sl
 8003aba:	eb63 090b 	sbc.w	r9, r3, fp
 8003abe:	f04f 0200 	mov.w	r2, #0
 8003ac2:	f04f 0300 	mov.w	r3, #0
 8003ac6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003aca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003ace:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003ad2:	ebb2 0408 	subs.w	r4, r2, r8
 8003ad6:	eb63 0509 	sbc.w	r5, r3, r9
 8003ada:	f04f 0200 	mov.w	r2, #0
 8003ade:	f04f 0300 	mov.w	r3, #0
 8003ae2:	00eb      	lsls	r3, r5, #3
 8003ae4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ae8:	00e2      	lsls	r2, r4, #3
 8003aea:	4614      	mov	r4, r2
 8003aec:	461d      	mov	r5, r3
 8003aee:	eb14 030a 	adds.w	r3, r4, sl
 8003af2:	603b      	str	r3, [r7, #0]
 8003af4:	eb45 030b 	adc.w	r3, r5, fp
 8003af8:	607b      	str	r3, [r7, #4]
 8003afa:	f04f 0200 	mov.w	r2, #0
 8003afe:	f04f 0300 	mov.w	r3, #0
 8003b02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b06:	4629      	mov	r1, r5
 8003b08:	028b      	lsls	r3, r1, #10
 8003b0a:	4621      	mov	r1, r4
 8003b0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b10:	4621      	mov	r1, r4
 8003b12:	028a      	lsls	r2, r1, #10
 8003b14:	4610      	mov	r0, r2
 8003b16:	4619      	mov	r1, r3
 8003b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	60bb      	str	r3, [r7, #8]
 8003b1e:	60fa      	str	r2, [r7, #12]
 8003b20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b24:	f7fc fba4 	bl	8000270 <__aeabi_uldivmod>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b30:	4b0b      	ldr	r3, [pc, #44]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	0c1b      	lsrs	r3, r3, #16
 8003b36:	f003 0303 	and.w	r3, r3, #3
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003b40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b48:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b4a:	e002      	b.n	8003b52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b4c:	4b05      	ldr	r3, [pc, #20]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b4e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3740      	adds	r7, #64	; 0x40
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b5e:	bf00      	nop
 8003b60:	40023800 	.word	0x40023800
 8003b64:	00f42400 	.word	0x00f42400
 8003b68:	017d7840 	.word	0x017d7840

08003b6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b70:	4b03      	ldr	r3, [pc, #12]	; (8003b80 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b72:	681b      	ldr	r3, [r3, #0]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	20000008 	.word	0x20000008

08003b84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b88:	f7ff fff0 	bl	8003b6c <HAL_RCC_GetHCLKFreq>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	4b05      	ldr	r3, [pc, #20]	; (8003ba4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	0a9b      	lsrs	r3, r3, #10
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	4903      	ldr	r1, [pc, #12]	; (8003ba8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b9a:	5ccb      	ldrb	r3, [r1, r3]
 8003b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	08007628 	.word	0x08007628

08003bac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bb0:	f7ff ffdc 	bl	8003b6c <HAL_RCC_GetHCLKFreq>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	4b05      	ldr	r3, [pc, #20]	; (8003bcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	0b5b      	lsrs	r3, r3, #13
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	4903      	ldr	r1, [pc, #12]	; (8003bd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bc2:	5ccb      	ldrb	r3, [r1, r3]
 8003bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	08007628 	.word	0x08007628

08003bd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e07b      	b.n	8003cde <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d108      	bne.n	8003c00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bf6:	d009      	beq.n	8003c0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	61da      	str	r2, [r3, #28]
 8003bfe:	e005      	b.n	8003c0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d106      	bne.n	8003c2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7fd fec2 	bl	80019b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c42:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c54:	431a      	orrs	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	431a      	orrs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c90:	ea42 0103 	orr.w	r1, r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c98:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	0c1b      	lsrs	r3, r3, #16
 8003caa:	f003 0104 	and.w	r1, r3, #4
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	f003 0210 	and.w	r2, r3, #16
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	69da      	ldr	r2, [r3, #28]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ccc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b088      	sub	sp, #32
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	60f8      	str	r0, [r7, #12]
 8003cee:	60b9      	str	r1, [r7, #8]
 8003cf0:	603b      	str	r3, [r7, #0]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d101      	bne.n	8003d08 <HAL_SPI_Transmit+0x22>
 8003d04:	2302      	movs	r3, #2
 8003d06:	e126      	b.n	8003f56 <HAL_SPI_Transmit+0x270>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d10:	f7fe f926 	bl	8001f60 <HAL_GetTick>
 8003d14:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d16:	88fb      	ldrh	r3, [r7, #6]
 8003d18:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d002      	beq.n	8003d2c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d26:	2302      	movs	r3, #2
 8003d28:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d2a:	e10b      	b.n	8003f44 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d002      	beq.n	8003d38 <HAL_SPI_Transmit+0x52>
 8003d32:	88fb      	ldrh	r3, [r7, #6]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d102      	bne.n	8003d3e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d3c:	e102      	b.n	8003f44 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2203      	movs	r2, #3
 8003d42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	88fa      	ldrh	r2, [r7, #6]
 8003d56:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	88fa      	ldrh	r2, [r7, #6]
 8003d5c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d84:	d10f      	bne.n	8003da6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003da4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db0:	2b40      	cmp	r3, #64	; 0x40
 8003db2:	d007      	beq.n	8003dc4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dc2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dcc:	d14b      	bne.n	8003e66 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d002      	beq.n	8003ddc <HAL_SPI_Transmit+0xf6>
 8003dd6:	8afb      	ldrh	r3, [r7, #22]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d13e      	bne.n	8003e5a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de0:	881a      	ldrh	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dec:	1c9a      	adds	r2, r3, #2
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e00:	e02b      	b.n	8003e5a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d112      	bne.n	8003e36 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e14:	881a      	ldrh	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e20:	1c9a      	adds	r2, r3, #2
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e34:	e011      	b.n	8003e5a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e36:	f7fe f893 	bl	8001f60 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d803      	bhi.n	8003e4e <HAL_SPI_Transmit+0x168>
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4c:	d102      	bne.n	8003e54 <HAL_SPI_Transmit+0x16e>
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d102      	bne.n	8003e5a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e58:	e074      	b.n	8003f44 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1ce      	bne.n	8003e02 <HAL_SPI_Transmit+0x11c>
 8003e64:	e04c      	b.n	8003f00 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <HAL_SPI_Transmit+0x18e>
 8003e6e:	8afb      	ldrh	r3, [r7, #22]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d140      	bne.n	8003ef6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	330c      	adds	r3, #12
 8003e7e:	7812      	ldrb	r2, [r2, #0]
 8003e80:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e86:	1c5a      	adds	r2, r3, #1
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	3b01      	subs	r3, #1
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003e9a:	e02c      	b.n	8003ef6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d113      	bne.n	8003ed2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	330c      	adds	r3, #12
 8003eb4:	7812      	ldrb	r2, [r2, #0]
 8003eb6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebc:	1c5a      	adds	r2, r3, #1
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ed0:	e011      	b.n	8003ef6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ed2:	f7fe f845 	bl	8001f60 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d803      	bhi.n	8003eea <HAL_SPI_Transmit+0x204>
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee8:	d102      	bne.n	8003ef0 <HAL_SPI_Transmit+0x20a>
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d102      	bne.n	8003ef6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ef4:	e026      	b.n	8003f44 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1cd      	bne.n	8003e9c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	6839      	ldr	r1, [r7, #0]
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 fbd9 	bl	80046bc <SPI_EndRxTxTransaction>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d002      	beq.n	8003f16 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2220      	movs	r2, #32
 8003f14:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10a      	bne.n	8003f34 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f1e:	2300      	movs	r3, #0
 8003f20:	613b      	str	r3, [r7, #16]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	613b      	str	r3, [r7, #16]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	613b      	str	r3, [r7, #16]
 8003f32:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d002      	beq.n	8003f42 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	77fb      	strb	r3, [r7, #31]
 8003f40:	e000      	b.n	8003f44 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003f42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f54:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3720      	adds	r7, #32
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b088      	sub	sp, #32
 8003f62:	af02      	add	r7, sp, #8
 8003f64:	60f8      	str	r0, [r7, #12]
 8003f66:	60b9      	str	r1, [r7, #8]
 8003f68:	603b      	str	r3, [r7, #0]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f7a:	d112      	bne.n	8003fa2 <HAL_SPI_Receive+0x44>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10e      	bne.n	8003fa2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2204      	movs	r2, #4
 8003f88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003f8c:	88fa      	ldrh	r2, [r7, #6]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	4613      	mov	r3, r2
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	68b9      	ldr	r1, [r7, #8]
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f000 f8f1 	bl	8004180 <HAL_SPI_TransmitReceive>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	e0ea      	b.n	8004178 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d101      	bne.n	8003fb0 <HAL_SPI_Receive+0x52>
 8003fac:	2302      	movs	r3, #2
 8003fae:	e0e3      	b.n	8004178 <HAL_SPI_Receive+0x21a>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fb8:	f7fd ffd2 	bl	8001f60 <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d002      	beq.n	8003fd0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003fca:	2302      	movs	r3, #2
 8003fcc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003fce:	e0ca      	b.n	8004166 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d002      	beq.n	8003fdc <HAL_SPI_Receive+0x7e>
 8003fd6:	88fb      	ldrh	r3, [r7, #6]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d102      	bne.n	8003fe2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003fe0:	e0c1      	b.n	8004166 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2204      	movs	r2, #4
 8003fe6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	68ba      	ldr	r2, [r7, #8]
 8003ff4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	88fa      	ldrh	r2, [r7, #6]
 8003ffa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	88fa      	ldrh	r2, [r7, #6]
 8004000:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004028:	d10f      	bne.n	800404a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004038:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004048:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004054:	2b40      	cmp	r3, #64	; 0x40
 8004056:	d007      	beq.n	8004068 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004066:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d162      	bne.n	8004136 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004070:	e02e      	b.n	80040d0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	2b01      	cmp	r3, #1
 800407e:	d115      	bne.n	80040ac <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f103 020c 	add.w	r2, r3, #12
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408c:	7812      	ldrb	r2, [r2, #0]
 800408e:	b2d2      	uxtb	r2, r2
 8004090:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004096:	1c5a      	adds	r2, r3, #1
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	3b01      	subs	r3, #1
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040aa:	e011      	b.n	80040d0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040ac:	f7fd ff58 	bl	8001f60 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d803      	bhi.n	80040c4 <HAL_SPI_Receive+0x166>
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c2:	d102      	bne.n	80040ca <HAL_SPI_Receive+0x16c>
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d102      	bne.n	80040d0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80040ce:	e04a      	b.n	8004166 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1cb      	bne.n	8004072 <HAL_SPI_Receive+0x114>
 80040da:	e031      	b.n	8004140 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d113      	bne.n	8004112 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68da      	ldr	r2, [r3, #12]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f4:	b292      	uxth	r2, r2
 80040f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fc:	1c9a      	adds	r2, r3, #2
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004106:	b29b      	uxth	r3, r3
 8004108:	3b01      	subs	r3, #1
 800410a:	b29a      	uxth	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004110:	e011      	b.n	8004136 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004112:	f7fd ff25 	bl	8001f60 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	429a      	cmp	r2, r3
 8004120:	d803      	bhi.n	800412a <HAL_SPI_Receive+0x1cc>
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004128:	d102      	bne.n	8004130 <HAL_SPI_Receive+0x1d2>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d102      	bne.n	8004136 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004134:	e017      	b.n	8004166 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800413a:	b29b      	uxth	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1cd      	bne.n	80040dc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	6839      	ldr	r1, [r7, #0]
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 fa53 	bl	80045f0 <SPI_EndRxTransaction>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d002      	beq.n	8004156 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2220      	movs	r2, #32
 8004154:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415a:	2b00      	cmp	r3, #0
 800415c:	d002      	beq.n	8004164 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	75fb      	strb	r3, [r7, #23]
 8004162:	e000      	b.n	8004166 <HAL_SPI_Receive+0x208>
  }

error :
 8004164:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004176:	7dfb      	ldrb	r3, [r7, #23]
}
 8004178:	4618      	mov	r0, r3
 800417a:	3718      	adds	r7, #24
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b08c      	sub	sp, #48	; 0x30
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
 800418c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800418e:	2301      	movs	r3, #1
 8004190:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004192:	2300      	movs	r3, #0
 8004194:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d101      	bne.n	80041a6 <HAL_SPI_TransmitReceive+0x26>
 80041a2:	2302      	movs	r3, #2
 80041a4:	e18a      	b.n	80044bc <HAL_SPI_TransmitReceive+0x33c>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041ae:	f7fd fed7 	bl	8001f60 <HAL_GetTick>
 80041b2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80041c4:	887b      	ldrh	r3, [r7, #2]
 80041c6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80041c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d00f      	beq.n	80041f0 <HAL_SPI_TransmitReceive+0x70>
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041d6:	d107      	bne.n	80041e8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d103      	bne.n	80041e8 <HAL_SPI_TransmitReceive+0x68>
 80041e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041e4:	2b04      	cmp	r3, #4
 80041e6:	d003      	beq.n	80041f0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80041e8:	2302      	movs	r3, #2
 80041ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80041ee:	e15b      	b.n	80044a8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d005      	beq.n	8004202 <HAL_SPI_TransmitReceive+0x82>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d002      	beq.n	8004202 <HAL_SPI_TransmitReceive+0x82>
 80041fc:	887b      	ldrh	r3, [r7, #2]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d103      	bne.n	800420a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004208:	e14e      	b.n	80044a8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b04      	cmp	r3, #4
 8004214:	d003      	beq.n	800421e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2205      	movs	r2, #5
 800421a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	887a      	ldrh	r2, [r7, #2]
 800422e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	887a      	ldrh	r2, [r7, #2]
 8004234:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	887a      	ldrh	r2, [r7, #2]
 8004240:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	887a      	ldrh	r2, [r7, #2]
 8004246:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425e:	2b40      	cmp	r3, #64	; 0x40
 8004260:	d007      	beq.n	8004272 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004270:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800427a:	d178      	bne.n	800436e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d002      	beq.n	800428a <HAL_SPI_TransmitReceive+0x10a>
 8004284:	8b7b      	ldrh	r3, [r7, #26]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d166      	bne.n	8004358 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428e:	881a      	ldrh	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429a:	1c9a      	adds	r2, r3, #2
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	3b01      	subs	r3, #1
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042ae:	e053      	b.n	8004358 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d11b      	bne.n	80042f6 <HAL_SPI_TransmitReceive+0x176>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d016      	beq.n	80042f6 <HAL_SPI_TransmitReceive+0x176>
 80042c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d113      	bne.n	80042f6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d2:	881a      	ldrh	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042de:	1c9a      	adds	r2, r3, #2
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	3b01      	subs	r3, #1
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042f2:	2300      	movs	r3, #0
 80042f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	2b01      	cmp	r3, #1
 8004302:	d119      	bne.n	8004338 <HAL_SPI_TransmitReceive+0x1b8>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004308:	b29b      	uxth	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d014      	beq.n	8004338 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68da      	ldr	r2, [r3, #12]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004318:	b292      	uxth	r2, r2
 800431a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004320:	1c9a      	adds	r2, r3, #2
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800432a:	b29b      	uxth	r3, r3
 800432c:	3b01      	subs	r3, #1
 800432e:	b29a      	uxth	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004334:	2301      	movs	r3, #1
 8004336:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004338:	f7fd fe12 	bl	8001f60 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004344:	429a      	cmp	r2, r3
 8004346:	d807      	bhi.n	8004358 <HAL_SPI_TransmitReceive+0x1d8>
 8004348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800434e:	d003      	beq.n	8004358 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004356:	e0a7      	b.n	80044a8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800435c:	b29b      	uxth	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1a6      	bne.n	80042b0 <HAL_SPI_TransmitReceive+0x130>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004366:	b29b      	uxth	r3, r3
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1a1      	bne.n	80042b0 <HAL_SPI_TransmitReceive+0x130>
 800436c:	e07c      	b.n	8004468 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d002      	beq.n	800437c <HAL_SPI_TransmitReceive+0x1fc>
 8004376:	8b7b      	ldrh	r3, [r7, #26]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d16b      	bne.n	8004454 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	330c      	adds	r3, #12
 8004386:	7812      	ldrb	r2, [r2, #0]
 8004388:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438e:	1c5a      	adds	r2, r3, #1
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004398:	b29b      	uxth	r3, r3
 800439a:	3b01      	subs	r3, #1
 800439c:	b29a      	uxth	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043a2:	e057      	b.n	8004454 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d11c      	bne.n	80043ec <HAL_SPI_TransmitReceive+0x26c>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d017      	beq.n	80043ec <HAL_SPI_TransmitReceive+0x26c>
 80043bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d114      	bne.n	80043ec <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	330c      	adds	r3, #12
 80043cc:	7812      	ldrb	r2, [r2, #0]
 80043ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d4:	1c5a      	adds	r2, r3, #1
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043de:	b29b      	uxth	r3, r3
 80043e0:	3b01      	subs	r3, #1
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d119      	bne.n	800442e <HAL_SPI_TransmitReceive+0x2ae>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043fe:	b29b      	uxth	r3, r3
 8004400:	2b00      	cmp	r3, #0
 8004402:	d014      	beq.n	800442e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68da      	ldr	r2, [r3, #12]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440e:	b2d2      	uxtb	r2, r2
 8004410:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004416:	1c5a      	adds	r2, r3, #1
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004420:	b29b      	uxth	r3, r3
 8004422:	3b01      	subs	r3, #1
 8004424:	b29a      	uxth	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800442a:	2301      	movs	r3, #1
 800442c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800442e:	f7fd fd97 	bl	8001f60 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800443a:	429a      	cmp	r2, r3
 800443c:	d803      	bhi.n	8004446 <HAL_SPI_TransmitReceive+0x2c6>
 800443e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004444:	d102      	bne.n	800444c <HAL_SPI_TransmitReceive+0x2cc>
 8004446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004448:	2b00      	cmp	r3, #0
 800444a:	d103      	bne.n	8004454 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004452:	e029      	b.n	80044a8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004458:	b29b      	uxth	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1a2      	bne.n	80043a4 <HAL_SPI_TransmitReceive+0x224>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004462:	b29b      	uxth	r3, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	d19d      	bne.n	80043a4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800446a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f000 f925 	bl	80046bc <SPI_EndRxTxTransaction>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d006      	beq.n	8004486 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2220      	movs	r2, #32
 8004482:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004484:	e010      	b.n	80044a8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10b      	bne.n	80044a6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800448e:	2300      	movs	r3, #0
 8004490:	617b      	str	r3, [r7, #20]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	617b      	str	r3, [r7, #20]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	617b      	str	r3, [r7, #20]
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	e000      	b.n	80044a8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80044a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80044b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3730      	adds	r7, #48	; 0x30
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044d2:	b2db      	uxtb	r3, r3
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b088      	sub	sp, #32
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	603b      	str	r3, [r7, #0]
 80044ec:	4613      	mov	r3, r2
 80044ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80044f0:	f7fd fd36 	bl	8001f60 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f8:	1a9b      	subs	r3, r3, r2
 80044fa:	683a      	ldr	r2, [r7, #0]
 80044fc:	4413      	add	r3, r2
 80044fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004500:	f7fd fd2e 	bl	8001f60 <HAL_GetTick>
 8004504:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004506:	4b39      	ldr	r3, [pc, #228]	; (80045ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	015b      	lsls	r3, r3, #5
 800450c:	0d1b      	lsrs	r3, r3, #20
 800450e:	69fa      	ldr	r2, [r7, #28]
 8004510:	fb02 f303 	mul.w	r3, r2, r3
 8004514:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004516:	e054      	b.n	80045c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800451e:	d050      	beq.n	80045c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004520:	f7fd fd1e 	bl	8001f60 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	69fa      	ldr	r2, [r7, #28]
 800452c:	429a      	cmp	r2, r3
 800452e:	d902      	bls.n	8004536 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d13d      	bne.n	80045b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004544:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800454e:	d111      	bne.n	8004574 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004558:	d004      	beq.n	8004564 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004562:	d107      	bne.n	8004574 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004572:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004578:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800457c:	d10f      	bne.n	800459e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800459c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e017      	b.n	80045e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d101      	bne.n	80045bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80045b8:	2300      	movs	r3, #0
 80045ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	3b01      	subs	r3, #1
 80045c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	4013      	ands	r3, r2
 80045cc:	68ba      	ldr	r2, [r7, #8]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	bf0c      	ite	eq
 80045d2:	2301      	moveq	r3, #1
 80045d4:	2300      	movne	r3, #0
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	461a      	mov	r2, r3
 80045da:	79fb      	ldrb	r3, [r7, #7]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d19b      	bne.n	8004518 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3720      	adds	r7, #32
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	20000008 	.word	0x20000008

080045f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af02      	add	r7, sp, #8
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004604:	d111      	bne.n	800462a <SPI_EndRxTransaction+0x3a>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800460e:	d004      	beq.n	800461a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004618:	d107      	bne.n	800462a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004628:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004632:	d12a      	bne.n	800468a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800463c:	d012      	beq.n	8004664 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	2200      	movs	r2, #0
 8004646:	2180      	movs	r1, #128	; 0x80
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f7ff ff49 	bl	80044e0 <SPI_WaitFlagStateUntilTimeout>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d02d      	beq.n	80046b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004658:	f043 0220 	orr.w	r2, r3, #32
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e026      	b.n	80046b2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	9300      	str	r3, [sp, #0]
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	2200      	movs	r2, #0
 800466c:	2101      	movs	r1, #1
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f7ff ff36 	bl	80044e0 <SPI_WaitFlagStateUntilTimeout>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d01a      	beq.n	80046b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467e:	f043 0220 	orr.w	r2, r3, #32
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e013      	b.n	80046b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	9300      	str	r3, [sp, #0]
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	2200      	movs	r2, #0
 8004692:	2101      	movs	r1, #1
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f7ff ff23 	bl	80044e0 <SPI_WaitFlagStateUntilTimeout>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d007      	beq.n	80046b0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a4:	f043 0220 	orr.w	r2, r3, #32
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e000      	b.n	80046b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
	...

080046bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b088      	sub	sp, #32
 80046c0:	af02      	add	r7, sp, #8
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80046c8:	4b1b      	ldr	r3, [pc, #108]	; (8004738 <SPI_EndRxTxTransaction+0x7c>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a1b      	ldr	r2, [pc, #108]	; (800473c <SPI_EndRxTxTransaction+0x80>)
 80046ce:	fba2 2303 	umull	r2, r3, r2, r3
 80046d2:	0d5b      	lsrs	r3, r3, #21
 80046d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80046d8:	fb02 f303 	mul.w	r3, r2, r3
 80046dc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046e6:	d112      	bne.n	800470e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	9300      	str	r3, [sp, #0]
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	2200      	movs	r2, #0
 80046f0:	2180      	movs	r1, #128	; 0x80
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f7ff fef4 	bl	80044e0 <SPI_WaitFlagStateUntilTimeout>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d016      	beq.n	800472c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004702:	f043 0220 	orr.w	r2, r3, #32
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e00f      	b.n	800472e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00a      	beq.n	800472a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	3b01      	subs	r3, #1
 8004718:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004724:	2b80      	cmp	r3, #128	; 0x80
 8004726:	d0f2      	beq.n	800470e <SPI_EndRxTxTransaction+0x52>
 8004728:	e000      	b.n	800472c <SPI_EndRxTxTransaction+0x70>
        break;
 800472a:	bf00      	nop
  }

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	20000008 	.word	0x20000008
 800473c:	165e9f81 	.word	0x165e9f81

08004740 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e041      	b.n	80047d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d106      	bne.n	800476c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f7fd f98a 	bl	8001a80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3304      	adds	r3, #4
 800477c:	4619      	mov	r1, r3
 800477e:	4610      	mov	r0, r2
 8004780:	f000 fa96 	bl	8004cb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
	...

080047e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d001      	beq.n	80047f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e04e      	b.n	8004896 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68da      	ldr	r2, [r3, #12]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f042 0201 	orr.w	r2, r2, #1
 800480e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a23      	ldr	r2, [pc, #140]	; (80048a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d022      	beq.n	8004860 <HAL_TIM_Base_Start_IT+0x80>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004822:	d01d      	beq.n	8004860 <HAL_TIM_Base_Start_IT+0x80>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a1f      	ldr	r2, [pc, #124]	; (80048a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d018      	beq.n	8004860 <HAL_TIM_Base_Start_IT+0x80>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a1e      	ldr	r2, [pc, #120]	; (80048ac <HAL_TIM_Base_Start_IT+0xcc>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d013      	beq.n	8004860 <HAL_TIM_Base_Start_IT+0x80>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a1c      	ldr	r2, [pc, #112]	; (80048b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d00e      	beq.n	8004860 <HAL_TIM_Base_Start_IT+0x80>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a1b      	ldr	r2, [pc, #108]	; (80048b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d009      	beq.n	8004860 <HAL_TIM_Base_Start_IT+0x80>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a19      	ldr	r2, [pc, #100]	; (80048b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d004      	beq.n	8004860 <HAL_TIM_Base_Start_IT+0x80>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a18      	ldr	r2, [pc, #96]	; (80048bc <HAL_TIM_Base_Start_IT+0xdc>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d111      	bne.n	8004884 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f003 0307 	and.w	r3, r3, #7
 800486a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2b06      	cmp	r3, #6
 8004870:	d010      	beq.n	8004894 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f042 0201 	orr.w	r2, r2, #1
 8004880:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004882:	e007      	b.n	8004894 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f042 0201 	orr.w	r2, r2, #1
 8004892:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3714      	adds	r7, #20
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	40010000 	.word	0x40010000
 80048a8:	40000400 	.word	0x40000400
 80048ac:	40000800 	.word	0x40000800
 80048b0:	40000c00 	.word	0x40000c00
 80048b4:	40010400 	.word	0x40010400
 80048b8:	40014000 	.word	0x40014000
 80048bc:	40001800 	.word	0x40001800

080048c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d122      	bne.n	800491c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d11b      	bne.n	800491c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f06f 0202 	mvn.w	r2, #2
 80048ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	f003 0303 	and.w	r3, r3, #3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f9b5 	bl	8004c72 <HAL_TIM_IC_CaptureCallback>
 8004908:	e005      	b.n	8004916 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f9a7 	bl	8004c5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 f9b8 	bl	8004c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	f003 0304 	and.w	r3, r3, #4
 8004926:	2b04      	cmp	r3, #4
 8004928:	d122      	bne.n	8004970 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b04      	cmp	r3, #4
 8004936:	d11b      	bne.n	8004970 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f06f 0204 	mvn.w	r2, #4
 8004940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2202      	movs	r2, #2
 8004946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f98b 	bl	8004c72 <HAL_TIM_IC_CaptureCallback>
 800495c:	e005      	b.n	800496a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f97d 	bl	8004c5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f98e 	bl	8004c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	f003 0308 	and.w	r3, r3, #8
 800497a:	2b08      	cmp	r3, #8
 800497c:	d122      	bne.n	80049c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	f003 0308 	and.w	r3, r3, #8
 8004988:	2b08      	cmp	r3, #8
 800498a:	d11b      	bne.n	80049c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f06f 0208 	mvn.w	r2, #8
 8004994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2204      	movs	r2, #4
 800499a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	f003 0303 	and.w	r3, r3, #3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 f961 	bl	8004c72 <HAL_TIM_IC_CaptureCallback>
 80049b0:	e005      	b.n	80049be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f953 	bl	8004c5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 f964 	bl	8004c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	f003 0310 	and.w	r3, r3, #16
 80049ce:	2b10      	cmp	r3, #16
 80049d0:	d122      	bne.n	8004a18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f003 0310 	and.w	r3, r3, #16
 80049dc:	2b10      	cmp	r3, #16
 80049de:	d11b      	bne.n	8004a18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f06f 0210 	mvn.w	r2, #16
 80049e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2208      	movs	r2, #8
 80049ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	69db      	ldr	r3, [r3, #28]
 80049f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d003      	beq.n	8004a06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f937 	bl	8004c72 <HAL_TIM_IC_CaptureCallback>
 8004a04:	e005      	b.n	8004a12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f929 	bl	8004c5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 f93a 	bl	8004c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d10e      	bne.n	8004a44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d107      	bne.n	8004a44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f06f 0201 	mvn.w	r2, #1
 8004a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7fc faf0 	bl	8001024 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a4e:	2b80      	cmp	r3, #128	; 0x80
 8004a50:	d10e      	bne.n	8004a70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a5c:	2b80      	cmp	r3, #128	; 0x80
 8004a5e:	d107      	bne.n	8004a70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 fae0 	bl	8005030 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7a:	2b40      	cmp	r3, #64	; 0x40
 8004a7c:	d10e      	bne.n	8004a9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a88:	2b40      	cmp	r3, #64	; 0x40
 8004a8a:	d107      	bne.n	8004a9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f8ff 	bl	8004c9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	f003 0320 	and.w	r3, r3, #32
 8004aa6:	2b20      	cmp	r3, #32
 8004aa8:	d10e      	bne.n	8004ac8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f003 0320 	and.w	r3, r3, #32
 8004ab4:	2b20      	cmp	r3, #32
 8004ab6:	d107      	bne.n	8004ac8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f06f 0220 	mvn.w	r2, #32
 8004ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 faaa 	bl	800501c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ac8:	bf00      	nop
 8004aca:	3708      	adds	r7, #8
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ada:	2300      	movs	r3, #0
 8004adc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d101      	bne.n	8004aec <HAL_TIM_ConfigClockSource+0x1c>
 8004ae8:	2302      	movs	r3, #2
 8004aea:	e0b4      	b.n	8004c56 <HAL_TIM_ConfigClockSource+0x186>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2202      	movs	r2, #2
 8004af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b24:	d03e      	beq.n	8004ba4 <HAL_TIM_ConfigClockSource+0xd4>
 8004b26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b2a:	f200 8087 	bhi.w	8004c3c <HAL_TIM_ConfigClockSource+0x16c>
 8004b2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b32:	f000 8086 	beq.w	8004c42 <HAL_TIM_ConfigClockSource+0x172>
 8004b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b3a:	d87f      	bhi.n	8004c3c <HAL_TIM_ConfigClockSource+0x16c>
 8004b3c:	2b70      	cmp	r3, #112	; 0x70
 8004b3e:	d01a      	beq.n	8004b76 <HAL_TIM_ConfigClockSource+0xa6>
 8004b40:	2b70      	cmp	r3, #112	; 0x70
 8004b42:	d87b      	bhi.n	8004c3c <HAL_TIM_ConfigClockSource+0x16c>
 8004b44:	2b60      	cmp	r3, #96	; 0x60
 8004b46:	d050      	beq.n	8004bea <HAL_TIM_ConfigClockSource+0x11a>
 8004b48:	2b60      	cmp	r3, #96	; 0x60
 8004b4a:	d877      	bhi.n	8004c3c <HAL_TIM_ConfigClockSource+0x16c>
 8004b4c:	2b50      	cmp	r3, #80	; 0x50
 8004b4e:	d03c      	beq.n	8004bca <HAL_TIM_ConfigClockSource+0xfa>
 8004b50:	2b50      	cmp	r3, #80	; 0x50
 8004b52:	d873      	bhi.n	8004c3c <HAL_TIM_ConfigClockSource+0x16c>
 8004b54:	2b40      	cmp	r3, #64	; 0x40
 8004b56:	d058      	beq.n	8004c0a <HAL_TIM_ConfigClockSource+0x13a>
 8004b58:	2b40      	cmp	r3, #64	; 0x40
 8004b5a:	d86f      	bhi.n	8004c3c <HAL_TIM_ConfigClockSource+0x16c>
 8004b5c:	2b30      	cmp	r3, #48	; 0x30
 8004b5e:	d064      	beq.n	8004c2a <HAL_TIM_ConfigClockSource+0x15a>
 8004b60:	2b30      	cmp	r3, #48	; 0x30
 8004b62:	d86b      	bhi.n	8004c3c <HAL_TIM_ConfigClockSource+0x16c>
 8004b64:	2b20      	cmp	r3, #32
 8004b66:	d060      	beq.n	8004c2a <HAL_TIM_ConfigClockSource+0x15a>
 8004b68:	2b20      	cmp	r3, #32
 8004b6a:	d867      	bhi.n	8004c3c <HAL_TIM_ConfigClockSource+0x16c>
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d05c      	beq.n	8004c2a <HAL_TIM_ConfigClockSource+0x15a>
 8004b70:	2b10      	cmp	r3, #16
 8004b72:	d05a      	beq.n	8004c2a <HAL_TIM_ConfigClockSource+0x15a>
 8004b74:	e062      	b.n	8004c3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6818      	ldr	r0, [r3, #0]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	6899      	ldr	r1, [r3, #8]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	685a      	ldr	r2, [r3, #4]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f000 f9ad 	bl	8004ee4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	609a      	str	r2, [r3, #8]
      break;
 8004ba2:	e04f      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6818      	ldr	r0, [r3, #0]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	6899      	ldr	r1, [r3, #8]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	f000 f996 	bl	8004ee4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689a      	ldr	r2, [r3, #8]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bc6:	609a      	str	r2, [r3, #8]
      break;
 8004bc8:	e03c      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6818      	ldr	r0, [r3, #0]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	6859      	ldr	r1, [r3, #4]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	f000 f90a 	bl	8004df0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2150      	movs	r1, #80	; 0x50
 8004be2:	4618      	mov	r0, r3
 8004be4:	f000 f963 	bl	8004eae <TIM_ITRx_SetConfig>
      break;
 8004be8:	e02c      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6818      	ldr	r0, [r3, #0]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	6859      	ldr	r1, [r3, #4]
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	f000 f929 	bl	8004e4e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2160      	movs	r1, #96	; 0x60
 8004c02:	4618      	mov	r0, r3
 8004c04:	f000 f953 	bl	8004eae <TIM_ITRx_SetConfig>
      break;
 8004c08:	e01c      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6818      	ldr	r0, [r3, #0]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	6859      	ldr	r1, [r3, #4]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	461a      	mov	r2, r3
 8004c18:	f000 f8ea 	bl	8004df0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2140      	movs	r1, #64	; 0x40
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 f943 	bl	8004eae <TIM_ITRx_SetConfig>
      break;
 8004c28:	e00c      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4619      	mov	r1, r3
 8004c34:	4610      	mov	r0, r2
 8004c36:	f000 f93a 	bl	8004eae <TIM_ITRx_SetConfig>
      break;
 8004c3a:	e003      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c40:	e000      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b083      	sub	sp, #12
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c66:	bf00      	nop
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b083      	sub	sp, #12
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c7a:	bf00      	nop
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c86:	b480      	push	{r7}
 8004c88:	b083      	sub	sp, #12
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c8e:	bf00      	nop
 8004c90:	370c      	adds	r7, #12
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr

08004c9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	b083      	sub	sp, #12
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ca2:	bf00      	nop
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
	...

08004cb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a40      	ldr	r2, [pc, #256]	; (8004dc4 <TIM_Base_SetConfig+0x114>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d013      	beq.n	8004cf0 <TIM_Base_SetConfig+0x40>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cce:	d00f      	beq.n	8004cf0 <TIM_Base_SetConfig+0x40>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a3d      	ldr	r2, [pc, #244]	; (8004dc8 <TIM_Base_SetConfig+0x118>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d00b      	beq.n	8004cf0 <TIM_Base_SetConfig+0x40>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a3c      	ldr	r2, [pc, #240]	; (8004dcc <TIM_Base_SetConfig+0x11c>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d007      	beq.n	8004cf0 <TIM_Base_SetConfig+0x40>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a3b      	ldr	r2, [pc, #236]	; (8004dd0 <TIM_Base_SetConfig+0x120>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d003      	beq.n	8004cf0 <TIM_Base_SetConfig+0x40>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a3a      	ldr	r2, [pc, #232]	; (8004dd4 <TIM_Base_SetConfig+0x124>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d108      	bne.n	8004d02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a2f      	ldr	r2, [pc, #188]	; (8004dc4 <TIM_Base_SetConfig+0x114>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d02b      	beq.n	8004d62 <TIM_Base_SetConfig+0xb2>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d10:	d027      	beq.n	8004d62 <TIM_Base_SetConfig+0xb2>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a2c      	ldr	r2, [pc, #176]	; (8004dc8 <TIM_Base_SetConfig+0x118>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d023      	beq.n	8004d62 <TIM_Base_SetConfig+0xb2>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a2b      	ldr	r2, [pc, #172]	; (8004dcc <TIM_Base_SetConfig+0x11c>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d01f      	beq.n	8004d62 <TIM_Base_SetConfig+0xb2>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a2a      	ldr	r2, [pc, #168]	; (8004dd0 <TIM_Base_SetConfig+0x120>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d01b      	beq.n	8004d62 <TIM_Base_SetConfig+0xb2>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a29      	ldr	r2, [pc, #164]	; (8004dd4 <TIM_Base_SetConfig+0x124>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d017      	beq.n	8004d62 <TIM_Base_SetConfig+0xb2>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a28      	ldr	r2, [pc, #160]	; (8004dd8 <TIM_Base_SetConfig+0x128>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d013      	beq.n	8004d62 <TIM_Base_SetConfig+0xb2>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a27      	ldr	r2, [pc, #156]	; (8004ddc <TIM_Base_SetConfig+0x12c>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d00f      	beq.n	8004d62 <TIM_Base_SetConfig+0xb2>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a26      	ldr	r2, [pc, #152]	; (8004de0 <TIM_Base_SetConfig+0x130>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d00b      	beq.n	8004d62 <TIM_Base_SetConfig+0xb2>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a25      	ldr	r2, [pc, #148]	; (8004de4 <TIM_Base_SetConfig+0x134>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d007      	beq.n	8004d62 <TIM_Base_SetConfig+0xb2>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a24      	ldr	r2, [pc, #144]	; (8004de8 <TIM_Base_SetConfig+0x138>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d003      	beq.n	8004d62 <TIM_Base_SetConfig+0xb2>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a23      	ldr	r2, [pc, #140]	; (8004dec <TIM_Base_SetConfig+0x13c>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d108      	bne.n	8004d74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	689a      	ldr	r2, [r3, #8]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a0a      	ldr	r2, [pc, #40]	; (8004dc4 <TIM_Base_SetConfig+0x114>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d003      	beq.n	8004da8 <TIM_Base_SetConfig+0xf8>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a0c      	ldr	r2, [pc, #48]	; (8004dd4 <TIM_Base_SetConfig+0x124>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d103      	bne.n	8004db0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	691a      	ldr	r2, [r3, #16]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	615a      	str	r2, [r3, #20]
}
 8004db6:	bf00      	nop
 8004db8:	3714      	adds	r7, #20
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	40010000 	.word	0x40010000
 8004dc8:	40000400 	.word	0x40000400
 8004dcc:	40000800 	.word	0x40000800
 8004dd0:	40000c00 	.word	0x40000c00
 8004dd4:	40010400 	.word	0x40010400
 8004dd8:	40014000 	.word	0x40014000
 8004ddc:	40014400 	.word	0x40014400
 8004de0:	40014800 	.word	0x40014800
 8004de4:	40001800 	.word	0x40001800
 8004de8:	40001c00 	.word	0x40001c00
 8004dec:	40002000 	.word	0x40002000

08004df0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b087      	sub	sp, #28
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	f023 0201 	bic.w	r2, r3, #1
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	011b      	lsls	r3, r3, #4
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f023 030a 	bic.w	r3, r3, #10
 8004e2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	621a      	str	r2, [r3, #32]
}
 8004e42:	bf00      	nop
 8004e44:	371c      	adds	r7, #28
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e4e:	b480      	push	{r7}
 8004e50:	b087      	sub	sp, #28
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	60f8      	str	r0, [r7, #12]
 8004e56:	60b9      	str	r1, [r7, #8]
 8004e58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	f023 0210 	bic.w	r2, r3, #16
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	031b      	lsls	r3, r3, #12
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	011b      	lsls	r3, r3, #4
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	621a      	str	r2, [r3, #32]
}
 8004ea2:	bf00      	nop
 8004ea4:	371c      	adds	r7, #28
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b085      	sub	sp, #20
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
 8004eb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	f043 0307 	orr.w	r3, r3, #7
 8004ed0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	609a      	str	r2, [r3, #8]
}
 8004ed8:	bf00      	nop
 8004eda:	3714      	adds	r7, #20
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b087      	sub	sp, #28
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
 8004ef0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004efe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	021a      	lsls	r2, r3, #8
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	431a      	orrs	r2, r3
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	609a      	str	r2, [r3, #8]
}
 8004f18:	bf00      	nop
 8004f1a:	371c      	adds	r7, #28
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d101      	bne.n	8004f3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f38:	2302      	movs	r3, #2
 8004f3a:	e05a      	b.n	8004ff2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2202      	movs	r2, #2
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a21      	ldr	r2, [pc, #132]	; (8005000 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d022      	beq.n	8004fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f88:	d01d      	beq.n	8004fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a1d      	ldr	r2, [pc, #116]	; (8005004 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d018      	beq.n	8004fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a1b      	ldr	r2, [pc, #108]	; (8005008 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d013      	beq.n	8004fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a1a      	ldr	r2, [pc, #104]	; (800500c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d00e      	beq.n	8004fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a18      	ldr	r2, [pc, #96]	; (8005010 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d009      	beq.n	8004fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a17      	ldr	r2, [pc, #92]	; (8005014 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d004      	beq.n	8004fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a15      	ldr	r2, [pc, #84]	; (8005018 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d10c      	bne.n	8004fe0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	40010000 	.word	0x40010000
 8005004:	40000400 	.word	0x40000400
 8005008:	40000800 	.word	0x40000800
 800500c:	40000c00 	.word	0x40000c00
 8005010:	40010400 	.word	0x40010400
 8005014:	40014000 	.word	0x40014000
 8005018:	40001800 	.word	0x40001800

0800501c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e03f      	b.n	80050d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d106      	bne.n	8005070 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f7fc fd2e 	bl	8001acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2224      	movs	r2, #36	; 0x24
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68da      	ldr	r2, [r3, #12]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005086:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 fc7b 	bl	8005984 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	691a      	ldr	r2, [r3, #16]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800509c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	695a      	ldr	r2, [r3, #20]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68da      	ldr	r2, [r3, #12]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2220      	movs	r2, #32
 80050c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2220      	movs	r2, #32
 80050d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
	...

080050e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b0ba      	sub	sp, #232	; 0xe8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005106:	2300      	movs	r3, #0
 8005108:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800510c:	2300      	movs	r3, #0
 800510e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005116:	f003 030f 	and.w	r3, r3, #15
 800511a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800511e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10f      	bne.n	8005146 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800512a:	f003 0320 	and.w	r3, r3, #32
 800512e:	2b00      	cmp	r3, #0
 8005130:	d009      	beq.n	8005146 <HAL_UART_IRQHandler+0x66>
 8005132:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005136:	f003 0320 	and.w	r3, r3, #32
 800513a:	2b00      	cmp	r3, #0
 800513c:	d003      	beq.n	8005146 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 fb65 	bl	800580e <UART_Receive_IT>
      return;
 8005144:	e256      	b.n	80055f4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005146:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800514a:	2b00      	cmp	r3, #0
 800514c:	f000 80de 	beq.w	800530c <HAL_UART_IRQHandler+0x22c>
 8005150:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	2b00      	cmp	r3, #0
 800515a:	d106      	bne.n	800516a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800515c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005160:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005164:	2b00      	cmp	r3, #0
 8005166:	f000 80d1 	beq.w	800530c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800516a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00b      	beq.n	800518e <HAL_UART_IRQHandler+0xae>
 8005176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800517a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800517e:	2b00      	cmp	r3, #0
 8005180:	d005      	beq.n	800518e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005186:	f043 0201 	orr.w	r2, r3, #1
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800518e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005192:	f003 0304 	and.w	r3, r3, #4
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00b      	beq.n	80051b2 <HAL_UART_IRQHandler+0xd2>
 800519a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d005      	beq.n	80051b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051aa:	f043 0202 	orr.w	r2, r3, #2
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00b      	beq.n	80051d6 <HAL_UART_IRQHandler+0xf6>
 80051be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d005      	beq.n	80051d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ce:	f043 0204 	orr.w	r2, r3, #4
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80051d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051da:	f003 0308 	and.w	r3, r3, #8
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d011      	beq.n	8005206 <HAL_UART_IRQHandler+0x126>
 80051e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051e6:	f003 0320 	and.w	r3, r3, #32
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d105      	bne.n	80051fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80051ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d005      	beq.n	8005206 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fe:	f043 0208 	orr.w	r2, r3, #8
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520a:	2b00      	cmp	r3, #0
 800520c:	f000 81ed 	beq.w	80055ea <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005214:	f003 0320 	and.w	r3, r3, #32
 8005218:	2b00      	cmp	r3, #0
 800521a:	d008      	beq.n	800522e <HAL_UART_IRQHandler+0x14e>
 800521c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005220:	f003 0320 	and.w	r3, r3, #32
 8005224:	2b00      	cmp	r3, #0
 8005226:	d002      	beq.n	800522e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 faf0 	bl	800580e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005238:	2b40      	cmp	r3, #64	; 0x40
 800523a:	bf0c      	ite	eq
 800523c:	2301      	moveq	r3, #1
 800523e:	2300      	movne	r3, #0
 8005240:	b2db      	uxtb	r3, r3
 8005242:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524a:	f003 0308 	and.w	r3, r3, #8
 800524e:	2b00      	cmp	r3, #0
 8005250:	d103      	bne.n	800525a <HAL_UART_IRQHandler+0x17a>
 8005252:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005256:	2b00      	cmp	r3, #0
 8005258:	d04f      	beq.n	80052fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f9f8 	bl	8005650 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800526a:	2b40      	cmp	r3, #64	; 0x40
 800526c:	d141      	bne.n	80052f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	3314      	adds	r3, #20
 8005274:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005278:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800527c:	e853 3f00 	ldrex	r3, [r3]
 8005280:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005284:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005288:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800528c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	3314      	adds	r3, #20
 8005296:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800529a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800529e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80052a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80052aa:	e841 2300 	strex	r3, r2, [r1]
 80052ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80052b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1d9      	bne.n	800526e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d013      	beq.n	80052ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c6:	4a7d      	ldr	r2, [pc, #500]	; (80054bc <HAL_UART_IRQHandler+0x3dc>)
 80052c8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7fd fe4f 	bl	8002f72 <HAL_DMA_Abort_IT>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d016      	beq.n	8005308 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80052e4:	4610      	mov	r0, r2
 80052e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052e8:	e00e      	b.n	8005308 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f99a 	bl	8005624 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052f0:	e00a      	b.n	8005308 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f996 	bl	8005624 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052f8:	e006      	b.n	8005308 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f992 	bl	8005624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005306:	e170      	b.n	80055ea <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005308:	bf00      	nop
    return;
 800530a:	e16e      	b.n	80055ea <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005310:	2b01      	cmp	r3, #1
 8005312:	f040 814a 	bne.w	80055aa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800531a:	f003 0310 	and.w	r3, r3, #16
 800531e:	2b00      	cmp	r3, #0
 8005320:	f000 8143 	beq.w	80055aa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005328:	f003 0310 	and.w	r3, r3, #16
 800532c:	2b00      	cmp	r3, #0
 800532e:	f000 813c 	beq.w	80055aa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005332:	2300      	movs	r3, #0
 8005334:	60bb      	str	r3, [r7, #8]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	60bb      	str	r3, [r7, #8]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	60bb      	str	r3, [r7, #8]
 8005346:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005352:	2b40      	cmp	r3, #64	; 0x40
 8005354:	f040 80b4 	bne.w	80054c0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005364:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005368:	2b00      	cmp	r3, #0
 800536a:	f000 8140 	beq.w	80055ee <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005372:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005376:	429a      	cmp	r2, r3
 8005378:	f080 8139 	bcs.w	80055ee <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005382:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800538e:	f000 8088 	beq.w	80054a2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	330c      	adds	r3, #12
 8005398:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053a0:	e853 3f00 	ldrex	r3, [r3]
 80053a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80053a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	330c      	adds	r3, #12
 80053ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80053be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80053c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80053ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80053ce:	e841 2300 	strex	r3, r2, [r1]
 80053d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80053d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1d9      	bne.n	8005392 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	3314      	adds	r3, #20
 80053e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053e8:	e853 3f00 	ldrex	r3, [r3]
 80053ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80053ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053f0:	f023 0301 	bic.w	r3, r3, #1
 80053f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	3314      	adds	r3, #20
 80053fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005402:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005406:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005408:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800540a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800540e:	e841 2300 	strex	r3, r2, [r1]
 8005412:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005414:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1e1      	bne.n	80053de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	3314      	adds	r3, #20
 8005420:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005422:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005424:	e853 3f00 	ldrex	r3, [r3]
 8005428:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800542a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800542c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005430:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	3314      	adds	r3, #20
 800543a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800543e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005440:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005442:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005444:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005446:	e841 2300 	strex	r3, r2, [r1]
 800544a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800544c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1e3      	bne.n	800541a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2220      	movs	r2, #32
 8005456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	330c      	adds	r3, #12
 8005466:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005468:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800546a:	e853 3f00 	ldrex	r3, [r3]
 800546e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005470:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005472:	f023 0310 	bic.w	r3, r3, #16
 8005476:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	330c      	adds	r3, #12
 8005480:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005484:	65ba      	str	r2, [r7, #88]	; 0x58
 8005486:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005488:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800548a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800548c:	e841 2300 	strex	r3, r2, [r1]
 8005490:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1e3      	bne.n	8005460 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549c:	4618      	mov	r0, r3
 800549e:	f7fd fcf8 	bl	8002e92 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	4619      	mov	r1, r3
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 f8c0 	bl	8005638 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80054b8:	e099      	b.n	80055ee <HAL_UART_IRQHandler+0x50e>
 80054ba:	bf00      	nop
 80054bc:	08005717 	.word	0x08005717
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f000 808b 	beq.w	80055f2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80054dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f000 8086 	beq.w	80055f2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	330c      	adds	r3, #12
 80054ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f0:	e853 3f00 	ldrex	r3, [r3]
 80054f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80054f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	330c      	adds	r3, #12
 8005506:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800550a:	647a      	str	r2, [r7, #68]	; 0x44
 800550c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005510:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005512:	e841 2300 	strex	r3, r2, [r1]
 8005516:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1e3      	bne.n	80054e6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	3314      	adds	r3, #20
 8005524:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	e853 3f00 	ldrex	r3, [r3]
 800552c:	623b      	str	r3, [r7, #32]
   return(result);
 800552e:	6a3b      	ldr	r3, [r7, #32]
 8005530:	f023 0301 	bic.w	r3, r3, #1
 8005534:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	3314      	adds	r3, #20
 800553e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005542:	633a      	str	r2, [r7, #48]	; 0x30
 8005544:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005546:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800554a:	e841 2300 	strex	r3, r2, [r1]
 800554e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1e3      	bne.n	800551e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2220      	movs	r2, #32
 800555a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	330c      	adds	r3, #12
 800556a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	e853 3f00 	ldrex	r3, [r3]
 8005572:	60fb      	str	r3, [r7, #12]
   return(result);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f023 0310 	bic.w	r3, r3, #16
 800557a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	330c      	adds	r3, #12
 8005584:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005588:	61fa      	str	r2, [r7, #28]
 800558a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558c:	69b9      	ldr	r1, [r7, #24]
 800558e:	69fa      	ldr	r2, [r7, #28]
 8005590:	e841 2300 	strex	r3, r2, [r1]
 8005594:	617b      	str	r3, [r7, #20]
   return(result);
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1e3      	bne.n	8005564 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800559c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80055a0:	4619      	mov	r1, r3
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f848 	bl	8005638 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80055a8:	e023      	b.n	80055f2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80055aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d009      	beq.n	80055ca <HAL_UART_IRQHandler+0x4ea>
 80055b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d003      	beq.n	80055ca <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f8bb 	bl	800573e <UART_Transmit_IT>
    return;
 80055c8:	e014      	b.n	80055f4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80055ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00e      	beq.n	80055f4 <HAL_UART_IRQHandler+0x514>
 80055d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d008      	beq.n	80055f4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f8fb 	bl	80057de <UART_EndTransmit_IT>
    return;
 80055e8:	e004      	b.n	80055f4 <HAL_UART_IRQHandler+0x514>
    return;
 80055ea:	bf00      	nop
 80055ec:	e002      	b.n	80055f4 <HAL_UART_IRQHandler+0x514>
      return;
 80055ee:	bf00      	nop
 80055f0:	e000      	b.n	80055f4 <HAL_UART_IRQHandler+0x514>
      return;
 80055f2:	bf00      	nop
  }
}
 80055f4:	37e8      	adds	r7, #232	; 0xe8
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop

080055fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	460b      	mov	r3, r1
 8005642:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005650:	b480      	push	{r7}
 8005652:	b095      	sub	sp, #84	; 0x54
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	330c      	adds	r3, #12
 800565e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005662:	e853 3f00 	ldrex	r3, [r3]
 8005666:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800566e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	330c      	adds	r3, #12
 8005676:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005678:	643a      	str	r2, [r7, #64]	; 0x40
 800567a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800567e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005680:	e841 2300 	strex	r3, r2, [r1]
 8005684:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005688:	2b00      	cmp	r3, #0
 800568a:	d1e5      	bne.n	8005658 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	3314      	adds	r3, #20
 8005692:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005694:	6a3b      	ldr	r3, [r7, #32]
 8005696:	e853 3f00 	ldrex	r3, [r3]
 800569a:	61fb      	str	r3, [r7, #28]
   return(result);
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	f023 0301 	bic.w	r3, r3, #1
 80056a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	3314      	adds	r3, #20
 80056aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056b4:	e841 2300 	strex	r3, r2, [r1]
 80056b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1e5      	bne.n	800568c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d119      	bne.n	80056fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	330c      	adds	r3, #12
 80056ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	e853 3f00 	ldrex	r3, [r3]
 80056d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	f023 0310 	bic.w	r3, r3, #16
 80056de:	647b      	str	r3, [r7, #68]	; 0x44
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	330c      	adds	r3, #12
 80056e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056e8:	61ba      	str	r2, [r7, #24]
 80056ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ec:	6979      	ldr	r1, [r7, #20]
 80056ee:	69ba      	ldr	r2, [r7, #24]
 80056f0:	e841 2300 	strex	r3, r2, [r1]
 80056f4:	613b      	str	r3, [r7, #16]
   return(result);
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1e5      	bne.n	80056c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2220      	movs	r2, #32
 8005700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	631a      	str	r2, [r3, #48]	; 0x30
}
 800570a:	bf00      	nop
 800570c:	3754      	adds	r7, #84	; 0x54
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b084      	sub	sp, #16
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005722:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	f7ff ff77 	bl	8005624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005736:	bf00      	nop
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800573e:	b480      	push	{r7}
 8005740:	b085      	sub	sp, #20
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b21      	cmp	r3, #33	; 0x21
 8005750:	d13e      	bne.n	80057d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800575a:	d114      	bne.n	8005786 <UART_Transmit_IT+0x48>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d110      	bne.n	8005786 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	881b      	ldrh	r3, [r3, #0]
 800576e:	461a      	mov	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005778:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	1c9a      	adds	r2, r3, #2
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	621a      	str	r2, [r3, #32]
 8005784:	e008      	b.n	8005798 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	1c59      	adds	r1, r3, #1
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	6211      	str	r1, [r2, #32]
 8005790:	781a      	ldrb	r2, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800579c:	b29b      	uxth	r3, r3
 800579e:	3b01      	subs	r3, #1
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	4619      	mov	r1, r3
 80057a6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d10f      	bne.n	80057cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68da      	ldr	r2, [r3, #12]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68da      	ldr	r2, [r3, #12]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80057cc:	2300      	movs	r3, #0
 80057ce:	e000      	b.n	80057d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80057d0:	2302      	movs	r3, #2
  }
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b082      	sub	sp, #8
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68da      	ldr	r2, [r3, #12]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2220      	movs	r2, #32
 80057fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f7ff fefc 	bl	80055fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3708      	adds	r7, #8
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800580e:	b580      	push	{r7, lr}
 8005810:	b08c      	sub	sp, #48	; 0x30
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800581c:	b2db      	uxtb	r3, r3
 800581e:	2b22      	cmp	r3, #34	; 0x22
 8005820:	f040 80ab 	bne.w	800597a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800582c:	d117      	bne.n	800585e <UART_Receive_IT+0x50>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d113      	bne.n	800585e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005836:	2300      	movs	r3, #0
 8005838:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	b29b      	uxth	r3, r3
 8005848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800584c:	b29a      	uxth	r2, r3
 800584e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005850:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005856:	1c9a      	adds	r2, r3, #2
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	629a      	str	r2, [r3, #40]	; 0x28
 800585c:	e026      	b.n	80058ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005862:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005864:	2300      	movs	r3, #0
 8005866:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005870:	d007      	beq.n	8005882 <UART_Receive_IT+0x74>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10a      	bne.n	8005890 <UART_Receive_IT+0x82>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d106      	bne.n	8005890 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	b2da      	uxtb	r2, r3
 800588a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800588c:	701a      	strb	r2, [r3, #0]
 800588e:	e008      	b.n	80058a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	b2db      	uxtb	r3, r3
 8005898:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800589c:	b2da      	uxtb	r2, r3
 800589e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a6:	1c5a      	adds	r2, r3, #1
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	3b01      	subs	r3, #1
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	4619      	mov	r1, r3
 80058ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d15a      	bne.n	8005976 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68da      	ldr	r2, [r3, #12]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f022 0220 	bic.w	r2, r2, #32
 80058ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68da      	ldr	r2, [r3, #12]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	695a      	ldr	r2, [r3, #20]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f022 0201 	bic.w	r2, r2, #1
 80058ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2220      	movs	r2, #32
 80058f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d135      	bne.n	800596c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	330c      	adds	r3, #12
 800590c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	e853 3f00 	ldrex	r3, [r3]
 8005914:	613b      	str	r3, [r7, #16]
   return(result);
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	f023 0310 	bic.w	r3, r3, #16
 800591c:	627b      	str	r3, [r7, #36]	; 0x24
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	330c      	adds	r3, #12
 8005924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005926:	623a      	str	r2, [r7, #32]
 8005928:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592a:	69f9      	ldr	r1, [r7, #28]
 800592c:	6a3a      	ldr	r2, [r7, #32]
 800592e:	e841 2300 	strex	r3, r2, [r1]
 8005932:	61bb      	str	r3, [r7, #24]
   return(result);
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1e5      	bne.n	8005906 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0310 	and.w	r3, r3, #16
 8005944:	2b10      	cmp	r3, #16
 8005946:	d10a      	bne.n	800595e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005948:	2300      	movs	r3, #0
 800594a:	60fb      	str	r3, [r7, #12]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	60fb      	str	r3, [r7, #12]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	60fb      	str	r3, [r7, #12]
 800595c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005962:	4619      	mov	r1, r3
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f7ff fe67 	bl	8005638 <HAL_UARTEx_RxEventCallback>
 800596a:	e002      	b.n	8005972 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f7ff fe4f 	bl	8005610 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005972:	2300      	movs	r3, #0
 8005974:	e002      	b.n	800597c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005976:	2300      	movs	r3, #0
 8005978:	e000      	b.n	800597c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800597a:	2302      	movs	r3, #2
  }
}
 800597c:	4618      	mov	r0, r3
 800597e:	3730      	adds	r7, #48	; 0x30
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005988:	b0c0      	sub	sp, #256	; 0x100
 800598a:	af00      	add	r7, sp, #0
 800598c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800599c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059a0:	68d9      	ldr	r1, [r3, #12]
 80059a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	ea40 0301 	orr.w	r3, r0, r1
 80059ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059b2:	689a      	ldr	r2, [r3, #8]
 80059b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	431a      	orrs	r2, r3
 80059bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	431a      	orrs	r2, r3
 80059c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80059d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80059dc:	f021 010c 	bic.w	r1, r1, #12
 80059e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80059ea:	430b      	orrs	r3, r1
 80059ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80059fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059fe:	6999      	ldr	r1, [r3, #24]
 8005a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	ea40 0301 	orr.w	r3, r0, r1
 8005a0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	4b8f      	ldr	r3, [pc, #572]	; (8005c50 <UART_SetConfig+0x2cc>)
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d005      	beq.n	8005a24 <UART_SetConfig+0xa0>
 8005a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	4b8d      	ldr	r3, [pc, #564]	; (8005c54 <UART_SetConfig+0x2d0>)
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d104      	bne.n	8005a2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a24:	f7fe f8c2 	bl	8003bac <HAL_RCC_GetPCLK2Freq>
 8005a28:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005a2c:	e003      	b.n	8005a36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a2e:	f7fe f8a9 	bl	8003b84 <HAL_RCC_GetPCLK1Freq>
 8005a32:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a3a:	69db      	ldr	r3, [r3, #28]
 8005a3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a40:	f040 810c 	bne.w	8005c5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a4e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005a52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005a56:	4622      	mov	r2, r4
 8005a58:	462b      	mov	r3, r5
 8005a5a:	1891      	adds	r1, r2, r2
 8005a5c:	65b9      	str	r1, [r7, #88]	; 0x58
 8005a5e:	415b      	adcs	r3, r3
 8005a60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005a66:	4621      	mov	r1, r4
 8005a68:	eb12 0801 	adds.w	r8, r2, r1
 8005a6c:	4629      	mov	r1, r5
 8005a6e:	eb43 0901 	adc.w	r9, r3, r1
 8005a72:	f04f 0200 	mov.w	r2, #0
 8005a76:	f04f 0300 	mov.w	r3, #0
 8005a7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a86:	4690      	mov	r8, r2
 8005a88:	4699      	mov	r9, r3
 8005a8a:	4623      	mov	r3, r4
 8005a8c:	eb18 0303 	adds.w	r3, r8, r3
 8005a90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005a94:	462b      	mov	r3, r5
 8005a96:	eb49 0303 	adc.w	r3, r9, r3
 8005a9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005aaa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005aae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	18db      	adds	r3, r3, r3
 8005ab6:	653b      	str	r3, [r7, #80]	; 0x50
 8005ab8:	4613      	mov	r3, r2
 8005aba:	eb42 0303 	adc.w	r3, r2, r3
 8005abe:	657b      	str	r3, [r7, #84]	; 0x54
 8005ac0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005ac4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005ac8:	f7fa fbd2 	bl	8000270 <__aeabi_uldivmod>
 8005acc:	4602      	mov	r2, r0
 8005ace:	460b      	mov	r3, r1
 8005ad0:	4b61      	ldr	r3, [pc, #388]	; (8005c58 <UART_SetConfig+0x2d4>)
 8005ad2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ad6:	095b      	lsrs	r3, r3, #5
 8005ad8:	011c      	lsls	r4, r3, #4
 8005ada:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ae4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005ae8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005aec:	4642      	mov	r2, r8
 8005aee:	464b      	mov	r3, r9
 8005af0:	1891      	adds	r1, r2, r2
 8005af2:	64b9      	str	r1, [r7, #72]	; 0x48
 8005af4:	415b      	adcs	r3, r3
 8005af6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005af8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005afc:	4641      	mov	r1, r8
 8005afe:	eb12 0a01 	adds.w	sl, r2, r1
 8005b02:	4649      	mov	r1, r9
 8005b04:	eb43 0b01 	adc.w	fp, r3, r1
 8005b08:	f04f 0200 	mov.w	r2, #0
 8005b0c:	f04f 0300 	mov.w	r3, #0
 8005b10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b1c:	4692      	mov	sl, r2
 8005b1e:	469b      	mov	fp, r3
 8005b20:	4643      	mov	r3, r8
 8005b22:	eb1a 0303 	adds.w	r3, sl, r3
 8005b26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b2a:	464b      	mov	r3, r9
 8005b2c:	eb4b 0303 	adc.w	r3, fp, r3
 8005b30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b40:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005b44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005b48:	460b      	mov	r3, r1
 8005b4a:	18db      	adds	r3, r3, r3
 8005b4c:	643b      	str	r3, [r7, #64]	; 0x40
 8005b4e:	4613      	mov	r3, r2
 8005b50:	eb42 0303 	adc.w	r3, r2, r3
 8005b54:	647b      	str	r3, [r7, #68]	; 0x44
 8005b56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005b5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005b5e:	f7fa fb87 	bl	8000270 <__aeabi_uldivmod>
 8005b62:	4602      	mov	r2, r0
 8005b64:	460b      	mov	r3, r1
 8005b66:	4611      	mov	r1, r2
 8005b68:	4b3b      	ldr	r3, [pc, #236]	; (8005c58 <UART_SetConfig+0x2d4>)
 8005b6a:	fba3 2301 	umull	r2, r3, r3, r1
 8005b6e:	095b      	lsrs	r3, r3, #5
 8005b70:	2264      	movs	r2, #100	; 0x64
 8005b72:	fb02 f303 	mul.w	r3, r2, r3
 8005b76:	1acb      	subs	r3, r1, r3
 8005b78:	00db      	lsls	r3, r3, #3
 8005b7a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005b7e:	4b36      	ldr	r3, [pc, #216]	; (8005c58 <UART_SetConfig+0x2d4>)
 8005b80:	fba3 2302 	umull	r2, r3, r3, r2
 8005b84:	095b      	lsrs	r3, r3, #5
 8005b86:	005b      	lsls	r3, r3, #1
 8005b88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b8c:	441c      	add	r4, r3
 8005b8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b92:	2200      	movs	r2, #0
 8005b94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b98:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005b9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005ba0:	4642      	mov	r2, r8
 8005ba2:	464b      	mov	r3, r9
 8005ba4:	1891      	adds	r1, r2, r2
 8005ba6:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ba8:	415b      	adcs	r3, r3
 8005baa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005bb0:	4641      	mov	r1, r8
 8005bb2:	1851      	adds	r1, r2, r1
 8005bb4:	6339      	str	r1, [r7, #48]	; 0x30
 8005bb6:	4649      	mov	r1, r9
 8005bb8:	414b      	adcs	r3, r1
 8005bba:	637b      	str	r3, [r7, #52]	; 0x34
 8005bbc:	f04f 0200 	mov.w	r2, #0
 8005bc0:	f04f 0300 	mov.w	r3, #0
 8005bc4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005bc8:	4659      	mov	r1, fp
 8005bca:	00cb      	lsls	r3, r1, #3
 8005bcc:	4651      	mov	r1, sl
 8005bce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bd2:	4651      	mov	r1, sl
 8005bd4:	00ca      	lsls	r2, r1, #3
 8005bd6:	4610      	mov	r0, r2
 8005bd8:	4619      	mov	r1, r3
 8005bda:	4603      	mov	r3, r0
 8005bdc:	4642      	mov	r2, r8
 8005bde:	189b      	adds	r3, r3, r2
 8005be0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005be4:	464b      	mov	r3, r9
 8005be6:	460a      	mov	r2, r1
 8005be8:	eb42 0303 	adc.w	r3, r2, r3
 8005bec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005bfc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005c00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005c04:	460b      	mov	r3, r1
 8005c06:	18db      	adds	r3, r3, r3
 8005c08:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	eb42 0303 	adc.w	r3, r2, r3
 8005c10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005c1a:	f7fa fb29 	bl	8000270 <__aeabi_uldivmod>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	460b      	mov	r3, r1
 8005c22:	4b0d      	ldr	r3, [pc, #52]	; (8005c58 <UART_SetConfig+0x2d4>)
 8005c24:	fba3 1302 	umull	r1, r3, r3, r2
 8005c28:	095b      	lsrs	r3, r3, #5
 8005c2a:	2164      	movs	r1, #100	; 0x64
 8005c2c:	fb01 f303 	mul.w	r3, r1, r3
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	00db      	lsls	r3, r3, #3
 8005c34:	3332      	adds	r3, #50	; 0x32
 8005c36:	4a08      	ldr	r2, [pc, #32]	; (8005c58 <UART_SetConfig+0x2d4>)
 8005c38:	fba2 2303 	umull	r2, r3, r2, r3
 8005c3c:	095b      	lsrs	r3, r3, #5
 8005c3e:	f003 0207 	and.w	r2, r3, #7
 8005c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4422      	add	r2, r4
 8005c4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c4c:	e105      	b.n	8005e5a <UART_SetConfig+0x4d6>
 8005c4e:	bf00      	nop
 8005c50:	40011000 	.word	0x40011000
 8005c54:	40011400 	.word	0x40011400
 8005c58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c60:	2200      	movs	r2, #0
 8005c62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c66:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005c6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005c6e:	4642      	mov	r2, r8
 8005c70:	464b      	mov	r3, r9
 8005c72:	1891      	adds	r1, r2, r2
 8005c74:	6239      	str	r1, [r7, #32]
 8005c76:	415b      	adcs	r3, r3
 8005c78:	627b      	str	r3, [r7, #36]	; 0x24
 8005c7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c7e:	4641      	mov	r1, r8
 8005c80:	1854      	adds	r4, r2, r1
 8005c82:	4649      	mov	r1, r9
 8005c84:	eb43 0501 	adc.w	r5, r3, r1
 8005c88:	f04f 0200 	mov.w	r2, #0
 8005c8c:	f04f 0300 	mov.w	r3, #0
 8005c90:	00eb      	lsls	r3, r5, #3
 8005c92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c96:	00e2      	lsls	r2, r4, #3
 8005c98:	4614      	mov	r4, r2
 8005c9a:	461d      	mov	r5, r3
 8005c9c:	4643      	mov	r3, r8
 8005c9e:	18e3      	adds	r3, r4, r3
 8005ca0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ca4:	464b      	mov	r3, r9
 8005ca6:	eb45 0303 	adc.w	r3, r5, r3
 8005caa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005cba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005cbe:	f04f 0200 	mov.w	r2, #0
 8005cc2:	f04f 0300 	mov.w	r3, #0
 8005cc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005cca:	4629      	mov	r1, r5
 8005ccc:	008b      	lsls	r3, r1, #2
 8005cce:	4621      	mov	r1, r4
 8005cd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cd4:	4621      	mov	r1, r4
 8005cd6:	008a      	lsls	r2, r1, #2
 8005cd8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005cdc:	f7fa fac8 	bl	8000270 <__aeabi_uldivmod>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	4b60      	ldr	r3, [pc, #384]	; (8005e68 <UART_SetConfig+0x4e4>)
 8005ce6:	fba3 2302 	umull	r2, r3, r3, r2
 8005cea:	095b      	lsrs	r3, r3, #5
 8005cec:	011c      	lsls	r4, r3, #4
 8005cee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005cf8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005cfc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005d00:	4642      	mov	r2, r8
 8005d02:	464b      	mov	r3, r9
 8005d04:	1891      	adds	r1, r2, r2
 8005d06:	61b9      	str	r1, [r7, #24]
 8005d08:	415b      	adcs	r3, r3
 8005d0a:	61fb      	str	r3, [r7, #28]
 8005d0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d10:	4641      	mov	r1, r8
 8005d12:	1851      	adds	r1, r2, r1
 8005d14:	6139      	str	r1, [r7, #16]
 8005d16:	4649      	mov	r1, r9
 8005d18:	414b      	adcs	r3, r1
 8005d1a:	617b      	str	r3, [r7, #20]
 8005d1c:	f04f 0200 	mov.w	r2, #0
 8005d20:	f04f 0300 	mov.w	r3, #0
 8005d24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d28:	4659      	mov	r1, fp
 8005d2a:	00cb      	lsls	r3, r1, #3
 8005d2c:	4651      	mov	r1, sl
 8005d2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d32:	4651      	mov	r1, sl
 8005d34:	00ca      	lsls	r2, r1, #3
 8005d36:	4610      	mov	r0, r2
 8005d38:	4619      	mov	r1, r3
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	4642      	mov	r2, r8
 8005d3e:	189b      	adds	r3, r3, r2
 8005d40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d44:	464b      	mov	r3, r9
 8005d46:	460a      	mov	r2, r1
 8005d48:	eb42 0303 	adc.w	r3, r2, r3
 8005d4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d5a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005d5c:	f04f 0200 	mov.w	r2, #0
 8005d60:	f04f 0300 	mov.w	r3, #0
 8005d64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005d68:	4649      	mov	r1, r9
 8005d6a:	008b      	lsls	r3, r1, #2
 8005d6c:	4641      	mov	r1, r8
 8005d6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d72:	4641      	mov	r1, r8
 8005d74:	008a      	lsls	r2, r1, #2
 8005d76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005d7a:	f7fa fa79 	bl	8000270 <__aeabi_uldivmod>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	460b      	mov	r3, r1
 8005d82:	4b39      	ldr	r3, [pc, #228]	; (8005e68 <UART_SetConfig+0x4e4>)
 8005d84:	fba3 1302 	umull	r1, r3, r3, r2
 8005d88:	095b      	lsrs	r3, r3, #5
 8005d8a:	2164      	movs	r1, #100	; 0x64
 8005d8c:	fb01 f303 	mul.w	r3, r1, r3
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	011b      	lsls	r3, r3, #4
 8005d94:	3332      	adds	r3, #50	; 0x32
 8005d96:	4a34      	ldr	r2, [pc, #208]	; (8005e68 <UART_SetConfig+0x4e4>)
 8005d98:	fba2 2303 	umull	r2, r3, r2, r3
 8005d9c:	095b      	lsrs	r3, r3, #5
 8005d9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005da2:	441c      	add	r4, r3
 8005da4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005da8:	2200      	movs	r2, #0
 8005daa:	673b      	str	r3, [r7, #112]	; 0x70
 8005dac:	677a      	str	r2, [r7, #116]	; 0x74
 8005dae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005db2:	4642      	mov	r2, r8
 8005db4:	464b      	mov	r3, r9
 8005db6:	1891      	adds	r1, r2, r2
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	415b      	adcs	r3, r3
 8005dbc:	60fb      	str	r3, [r7, #12]
 8005dbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005dc2:	4641      	mov	r1, r8
 8005dc4:	1851      	adds	r1, r2, r1
 8005dc6:	6039      	str	r1, [r7, #0]
 8005dc8:	4649      	mov	r1, r9
 8005dca:	414b      	adcs	r3, r1
 8005dcc:	607b      	str	r3, [r7, #4]
 8005dce:	f04f 0200 	mov.w	r2, #0
 8005dd2:	f04f 0300 	mov.w	r3, #0
 8005dd6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005dda:	4659      	mov	r1, fp
 8005ddc:	00cb      	lsls	r3, r1, #3
 8005dde:	4651      	mov	r1, sl
 8005de0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005de4:	4651      	mov	r1, sl
 8005de6:	00ca      	lsls	r2, r1, #3
 8005de8:	4610      	mov	r0, r2
 8005dea:	4619      	mov	r1, r3
 8005dec:	4603      	mov	r3, r0
 8005dee:	4642      	mov	r2, r8
 8005df0:	189b      	adds	r3, r3, r2
 8005df2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005df4:	464b      	mov	r3, r9
 8005df6:	460a      	mov	r2, r1
 8005df8:	eb42 0303 	adc.w	r3, r2, r3
 8005dfc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	663b      	str	r3, [r7, #96]	; 0x60
 8005e08:	667a      	str	r2, [r7, #100]	; 0x64
 8005e0a:	f04f 0200 	mov.w	r2, #0
 8005e0e:	f04f 0300 	mov.w	r3, #0
 8005e12:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005e16:	4649      	mov	r1, r9
 8005e18:	008b      	lsls	r3, r1, #2
 8005e1a:	4641      	mov	r1, r8
 8005e1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e20:	4641      	mov	r1, r8
 8005e22:	008a      	lsls	r2, r1, #2
 8005e24:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005e28:	f7fa fa22 	bl	8000270 <__aeabi_uldivmod>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	460b      	mov	r3, r1
 8005e30:	4b0d      	ldr	r3, [pc, #52]	; (8005e68 <UART_SetConfig+0x4e4>)
 8005e32:	fba3 1302 	umull	r1, r3, r3, r2
 8005e36:	095b      	lsrs	r3, r3, #5
 8005e38:	2164      	movs	r1, #100	; 0x64
 8005e3a:	fb01 f303 	mul.w	r3, r1, r3
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	011b      	lsls	r3, r3, #4
 8005e42:	3332      	adds	r3, #50	; 0x32
 8005e44:	4a08      	ldr	r2, [pc, #32]	; (8005e68 <UART_SetConfig+0x4e4>)
 8005e46:	fba2 2303 	umull	r2, r3, r2, r3
 8005e4a:	095b      	lsrs	r3, r3, #5
 8005e4c:	f003 020f 	and.w	r2, r3, #15
 8005e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4422      	add	r2, r4
 8005e58:	609a      	str	r2, [r3, #8]
}
 8005e5a:	bf00      	nop
 8005e5c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005e60:	46bd      	mov	sp, r7
 8005e62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e66:	bf00      	nop
 8005e68:	51eb851f 	.word	0x51eb851f

08005e6c <__errno>:
 8005e6c:	4b01      	ldr	r3, [pc, #4]	; (8005e74 <__errno+0x8>)
 8005e6e:	6818      	ldr	r0, [r3, #0]
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	20000014 	.word	0x20000014

08005e78 <__libc_init_array>:
 8005e78:	b570      	push	{r4, r5, r6, lr}
 8005e7a:	4d0d      	ldr	r5, [pc, #52]	; (8005eb0 <__libc_init_array+0x38>)
 8005e7c:	4c0d      	ldr	r4, [pc, #52]	; (8005eb4 <__libc_init_array+0x3c>)
 8005e7e:	1b64      	subs	r4, r4, r5
 8005e80:	10a4      	asrs	r4, r4, #2
 8005e82:	2600      	movs	r6, #0
 8005e84:	42a6      	cmp	r6, r4
 8005e86:	d109      	bne.n	8005e9c <__libc_init_array+0x24>
 8005e88:	4d0b      	ldr	r5, [pc, #44]	; (8005eb8 <__libc_init_array+0x40>)
 8005e8a:	4c0c      	ldr	r4, [pc, #48]	; (8005ebc <__libc_init_array+0x44>)
 8005e8c:	f000 fc8e 	bl	80067ac <_init>
 8005e90:	1b64      	subs	r4, r4, r5
 8005e92:	10a4      	asrs	r4, r4, #2
 8005e94:	2600      	movs	r6, #0
 8005e96:	42a6      	cmp	r6, r4
 8005e98:	d105      	bne.n	8005ea6 <__libc_init_array+0x2e>
 8005e9a:	bd70      	pop	{r4, r5, r6, pc}
 8005e9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ea0:	4798      	blx	r3
 8005ea2:	3601      	adds	r6, #1
 8005ea4:	e7ee      	b.n	8005e84 <__libc_init_array+0xc>
 8005ea6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eaa:	4798      	blx	r3
 8005eac:	3601      	adds	r6, #1
 8005eae:	e7f2      	b.n	8005e96 <__libc_init_array+0x1e>
 8005eb0:	0800766c 	.word	0x0800766c
 8005eb4:	0800766c 	.word	0x0800766c
 8005eb8:	0800766c 	.word	0x0800766c
 8005ebc:	08007670 	.word	0x08007670

08005ec0 <memset>:
 8005ec0:	4402      	add	r2, r0
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d100      	bne.n	8005eca <memset+0xa>
 8005ec8:	4770      	bx	lr
 8005eca:	f803 1b01 	strb.w	r1, [r3], #1
 8005ece:	e7f9      	b.n	8005ec4 <memset+0x4>

08005ed0 <siprintf>:
 8005ed0:	b40e      	push	{r1, r2, r3}
 8005ed2:	b500      	push	{lr}
 8005ed4:	b09c      	sub	sp, #112	; 0x70
 8005ed6:	ab1d      	add	r3, sp, #116	; 0x74
 8005ed8:	9002      	str	r0, [sp, #8]
 8005eda:	9006      	str	r0, [sp, #24]
 8005edc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ee0:	4809      	ldr	r0, [pc, #36]	; (8005f08 <siprintf+0x38>)
 8005ee2:	9107      	str	r1, [sp, #28]
 8005ee4:	9104      	str	r1, [sp, #16]
 8005ee6:	4909      	ldr	r1, [pc, #36]	; (8005f0c <siprintf+0x3c>)
 8005ee8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005eec:	9105      	str	r1, [sp, #20]
 8005eee:	6800      	ldr	r0, [r0, #0]
 8005ef0:	9301      	str	r3, [sp, #4]
 8005ef2:	a902      	add	r1, sp, #8
 8005ef4:	f000 f868 	bl	8005fc8 <_svfiprintf_r>
 8005ef8:	9b02      	ldr	r3, [sp, #8]
 8005efa:	2200      	movs	r2, #0
 8005efc:	701a      	strb	r2, [r3, #0]
 8005efe:	b01c      	add	sp, #112	; 0x70
 8005f00:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f04:	b003      	add	sp, #12
 8005f06:	4770      	bx	lr
 8005f08:	20000014 	.word	0x20000014
 8005f0c:	ffff0208 	.word	0xffff0208

08005f10 <__ssputs_r>:
 8005f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f14:	688e      	ldr	r6, [r1, #8]
 8005f16:	429e      	cmp	r6, r3
 8005f18:	4682      	mov	sl, r0
 8005f1a:	460c      	mov	r4, r1
 8005f1c:	4690      	mov	r8, r2
 8005f1e:	461f      	mov	r7, r3
 8005f20:	d838      	bhi.n	8005f94 <__ssputs_r+0x84>
 8005f22:	898a      	ldrh	r2, [r1, #12]
 8005f24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005f28:	d032      	beq.n	8005f90 <__ssputs_r+0x80>
 8005f2a:	6825      	ldr	r5, [r4, #0]
 8005f2c:	6909      	ldr	r1, [r1, #16]
 8005f2e:	eba5 0901 	sub.w	r9, r5, r1
 8005f32:	6965      	ldr	r5, [r4, #20]
 8005f34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	444b      	add	r3, r9
 8005f40:	106d      	asrs	r5, r5, #1
 8005f42:	429d      	cmp	r5, r3
 8005f44:	bf38      	it	cc
 8005f46:	461d      	movcc	r5, r3
 8005f48:	0553      	lsls	r3, r2, #21
 8005f4a:	d531      	bpl.n	8005fb0 <__ssputs_r+0xa0>
 8005f4c:	4629      	mov	r1, r5
 8005f4e:	f000 fb63 	bl	8006618 <_malloc_r>
 8005f52:	4606      	mov	r6, r0
 8005f54:	b950      	cbnz	r0, 8005f6c <__ssputs_r+0x5c>
 8005f56:	230c      	movs	r3, #12
 8005f58:	f8ca 3000 	str.w	r3, [sl]
 8005f5c:	89a3      	ldrh	r3, [r4, #12]
 8005f5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f62:	81a3      	strh	r3, [r4, #12]
 8005f64:	f04f 30ff 	mov.w	r0, #4294967295
 8005f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f6c:	6921      	ldr	r1, [r4, #16]
 8005f6e:	464a      	mov	r2, r9
 8005f70:	f000 fabe 	bl	80064f0 <memcpy>
 8005f74:	89a3      	ldrh	r3, [r4, #12]
 8005f76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f7e:	81a3      	strh	r3, [r4, #12]
 8005f80:	6126      	str	r6, [r4, #16]
 8005f82:	6165      	str	r5, [r4, #20]
 8005f84:	444e      	add	r6, r9
 8005f86:	eba5 0509 	sub.w	r5, r5, r9
 8005f8a:	6026      	str	r6, [r4, #0]
 8005f8c:	60a5      	str	r5, [r4, #8]
 8005f8e:	463e      	mov	r6, r7
 8005f90:	42be      	cmp	r6, r7
 8005f92:	d900      	bls.n	8005f96 <__ssputs_r+0x86>
 8005f94:	463e      	mov	r6, r7
 8005f96:	6820      	ldr	r0, [r4, #0]
 8005f98:	4632      	mov	r2, r6
 8005f9a:	4641      	mov	r1, r8
 8005f9c:	f000 fab6 	bl	800650c <memmove>
 8005fa0:	68a3      	ldr	r3, [r4, #8]
 8005fa2:	1b9b      	subs	r3, r3, r6
 8005fa4:	60a3      	str	r3, [r4, #8]
 8005fa6:	6823      	ldr	r3, [r4, #0]
 8005fa8:	4433      	add	r3, r6
 8005faa:	6023      	str	r3, [r4, #0]
 8005fac:	2000      	movs	r0, #0
 8005fae:	e7db      	b.n	8005f68 <__ssputs_r+0x58>
 8005fb0:	462a      	mov	r2, r5
 8005fb2:	f000 fba5 	bl	8006700 <_realloc_r>
 8005fb6:	4606      	mov	r6, r0
 8005fb8:	2800      	cmp	r0, #0
 8005fba:	d1e1      	bne.n	8005f80 <__ssputs_r+0x70>
 8005fbc:	6921      	ldr	r1, [r4, #16]
 8005fbe:	4650      	mov	r0, sl
 8005fc0:	f000 fabe 	bl	8006540 <_free_r>
 8005fc4:	e7c7      	b.n	8005f56 <__ssputs_r+0x46>
	...

08005fc8 <_svfiprintf_r>:
 8005fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fcc:	4698      	mov	r8, r3
 8005fce:	898b      	ldrh	r3, [r1, #12]
 8005fd0:	061b      	lsls	r3, r3, #24
 8005fd2:	b09d      	sub	sp, #116	; 0x74
 8005fd4:	4607      	mov	r7, r0
 8005fd6:	460d      	mov	r5, r1
 8005fd8:	4614      	mov	r4, r2
 8005fda:	d50e      	bpl.n	8005ffa <_svfiprintf_r+0x32>
 8005fdc:	690b      	ldr	r3, [r1, #16]
 8005fde:	b963      	cbnz	r3, 8005ffa <_svfiprintf_r+0x32>
 8005fe0:	2140      	movs	r1, #64	; 0x40
 8005fe2:	f000 fb19 	bl	8006618 <_malloc_r>
 8005fe6:	6028      	str	r0, [r5, #0]
 8005fe8:	6128      	str	r0, [r5, #16]
 8005fea:	b920      	cbnz	r0, 8005ff6 <_svfiprintf_r+0x2e>
 8005fec:	230c      	movs	r3, #12
 8005fee:	603b      	str	r3, [r7, #0]
 8005ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ff4:	e0d1      	b.n	800619a <_svfiprintf_r+0x1d2>
 8005ff6:	2340      	movs	r3, #64	; 0x40
 8005ff8:	616b      	str	r3, [r5, #20]
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	9309      	str	r3, [sp, #36]	; 0x24
 8005ffe:	2320      	movs	r3, #32
 8006000:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006004:	f8cd 800c 	str.w	r8, [sp, #12]
 8006008:	2330      	movs	r3, #48	; 0x30
 800600a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80061b4 <_svfiprintf_r+0x1ec>
 800600e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006012:	f04f 0901 	mov.w	r9, #1
 8006016:	4623      	mov	r3, r4
 8006018:	469a      	mov	sl, r3
 800601a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800601e:	b10a      	cbz	r2, 8006024 <_svfiprintf_r+0x5c>
 8006020:	2a25      	cmp	r2, #37	; 0x25
 8006022:	d1f9      	bne.n	8006018 <_svfiprintf_r+0x50>
 8006024:	ebba 0b04 	subs.w	fp, sl, r4
 8006028:	d00b      	beq.n	8006042 <_svfiprintf_r+0x7a>
 800602a:	465b      	mov	r3, fp
 800602c:	4622      	mov	r2, r4
 800602e:	4629      	mov	r1, r5
 8006030:	4638      	mov	r0, r7
 8006032:	f7ff ff6d 	bl	8005f10 <__ssputs_r>
 8006036:	3001      	adds	r0, #1
 8006038:	f000 80aa 	beq.w	8006190 <_svfiprintf_r+0x1c8>
 800603c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800603e:	445a      	add	r2, fp
 8006040:	9209      	str	r2, [sp, #36]	; 0x24
 8006042:	f89a 3000 	ldrb.w	r3, [sl]
 8006046:	2b00      	cmp	r3, #0
 8006048:	f000 80a2 	beq.w	8006190 <_svfiprintf_r+0x1c8>
 800604c:	2300      	movs	r3, #0
 800604e:	f04f 32ff 	mov.w	r2, #4294967295
 8006052:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006056:	f10a 0a01 	add.w	sl, sl, #1
 800605a:	9304      	str	r3, [sp, #16]
 800605c:	9307      	str	r3, [sp, #28]
 800605e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006062:	931a      	str	r3, [sp, #104]	; 0x68
 8006064:	4654      	mov	r4, sl
 8006066:	2205      	movs	r2, #5
 8006068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800606c:	4851      	ldr	r0, [pc, #324]	; (80061b4 <_svfiprintf_r+0x1ec>)
 800606e:	f7fa f8af 	bl	80001d0 <memchr>
 8006072:	9a04      	ldr	r2, [sp, #16]
 8006074:	b9d8      	cbnz	r0, 80060ae <_svfiprintf_r+0xe6>
 8006076:	06d0      	lsls	r0, r2, #27
 8006078:	bf44      	itt	mi
 800607a:	2320      	movmi	r3, #32
 800607c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006080:	0711      	lsls	r1, r2, #28
 8006082:	bf44      	itt	mi
 8006084:	232b      	movmi	r3, #43	; 0x2b
 8006086:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800608a:	f89a 3000 	ldrb.w	r3, [sl]
 800608e:	2b2a      	cmp	r3, #42	; 0x2a
 8006090:	d015      	beq.n	80060be <_svfiprintf_r+0xf6>
 8006092:	9a07      	ldr	r2, [sp, #28]
 8006094:	4654      	mov	r4, sl
 8006096:	2000      	movs	r0, #0
 8006098:	f04f 0c0a 	mov.w	ip, #10
 800609c:	4621      	mov	r1, r4
 800609e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060a2:	3b30      	subs	r3, #48	; 0x30
 80060a4:	2b09      	cmp	r3, #9
 80060a6:	d94e      	bls.n	8006146 <_svfiprintf_r+0x17e>
 80060a8:	b1b0      	cbz	r0, 80060d8 <_svfiprintf_r+0x110>
 80060aa:	9207      	str	r2, [sp, #28]
 80060ac:	e014      	b.n	80060d8 <_svfiprintf_r+0x110>
 80060ae:	eba0 0308 	sub.w	r3, r0, r8
 80060b2:	fa09 f303 	lsl.w	r3, r9, r3
 80060b6:	4313      	orrs	r3, r2
 80060b8:	9304      	str	r3, [sp, #16]
 80060ba:	46a2      	mov	sl, r4
 80060bc:	e7d2      	b.n	8006064 <_svfiprintf_r+0x9c>
 80060be:	9b03      	ldr	r3, [sp, #12]
 80060c0:	1d19      	adds	r1, r3, #4
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	9103      	str	r1, [sp, #12]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	bfbb      	ittet	lt
 80060ca:	425b      	neglt	r3, r3
 80060cc:	f042 0202 	orrlt.w	r2, r2, #2
 80060d0:	9307      	strge	r3, [sp, #28]
 80060d2:	9307      	strlt	r3, [sp, #28]
 80060d4:	bfb8      	it	lt
 80060d6:	9204      	strlt	r2, [sp, #16]
 80060d8:	7823      	ldrb	r3, [r4, #0]
 80060da:	2b2e      	cmp	r3, #46	; 0x2e
 80060dc:	d10c      	bne.n	80060f8 <_svfiprintf_r+0x130>
 80060de:	7863      	ldrb	r3, [r4, #1]
 80060e0:	2b2a      	cmp	r3, #42	; 0x2a
 80060e2:	d135      	bne.n	8006150 <_svfiprintf_r+0x188>
 80060e4:	9b03      	ldr	r3, [sp, #12]
 80060e6:	1d1a      	adds	r2, r3, #4
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	9203      	str	r2, [sp, #12]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	bfb8      	it	lt
 80060f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80060f4:	3402      	adds	r4, #2
 80060f6:	9305      	str	r3, [sp, #20]
 80060f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80061c4 <_svfiprintf_r+0x1fc>
 80060fc:	7821      	ldrb	r1, [r4, #0]
 80060fe:	2203      	movs	r2, #3
 8006100:	4650      	mov	r0, sl
 8006102:	f7fa f865 	bl	80001d0 <memchr>
 8006106:	b140      	cbz	r0, 800611a <_svfiprintf_r+0x152>
 8006108:	2340      	movs	r3, #64	; 0x40
 800610a:	eba0 000a 	sub.w	r0, r0, sl
 800610e:	fa03 f000 	lsl.w	r0, r3, r0
 8006112:	9b04      	ldr	r3, [sp, #16]
 8006114:	4303      	orrs	r3, r0
 8006116:	3401      	adds	r4, #1
 8006118:	9304      	str	r3, [sp, #16]
 800611a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800611e:	4826      	ldr	r0, [pc, #152]	; (80061b8 <_svfiprintf_r+0x1f0>)
 8006120:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006124:	2206      	movs	r2, #6
 8006126:	f7fa f853 	bl	80001d0 <memchr>
 800612a:	2800      	cmp	r0, #0
 800612c:	d038      	beq.n	80061a0 <_svfiprintf_r+0x1d8>
 800612e:	4b23      	ldr	r3, [pc, #140]	; (80061bc <_svfiprintf_r+0x1f4>)
 8006130:	bb1b      	cbnz	r3, 800617a <_svfiprintf_r+0x1b2>
 8006132:	9b03      	ldr	r3, [sp, #12]
 8006134:	3307      	adds	r3, #7
 8006136:	f023 0307 	bic.w	r3, r3, #7
 800613a:	3308      	adds	r3, #8
 800613c:	9303      	str	r3, [sp, #12]
 800613e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006140:	4433      	add	r3, r6
 8006142:	9309      	str	r3, [sp, #36]	; 0x24
 8006144:	e767      	b.n	8006016 <_svfiprintf_r+0x4e>
 8006146:	fb0c 3202 	mla	r2, ip, r2, r3
 800614a:	460c      	mov	r4, r1
 800614c:	2001      	movs	r0, #1
 800614e:	e7a5      	b.n	800609c <_svfiprintf_r+0xd4>
 8006150:	2300      	movs	r3, #0
 8006152:	3401      	adds	r4, #1
 8006154:	9305      	str	r3, [sp, #20]
 8006156:	4619      	mov	r1, r3
 8006158:	f04f 0c0a 	mov.w	ip, #10
 800615c:	4620      	mov	r0, r4
 800615e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006162:	3a30      	subs	r2, #48	; 0x30
 8006164:	2a09      	cmp	r2, #9
 8006166:	d903      	bls.n	8006170 <_svfiprintf_r+0x1a8>
 8006168:	2b00      	cmp	r3, #0
 800616a:	d0c5      	beq.n	80060f8 <_svfiprintf_r+0x130>
 800616c:	9105      	str	r1, [sp, #20]
 800616e:	e7c3      	b.n	80060f8 <_svfiprintf_r+0x130>
 8006170:	fb0c 2101 	mla	r1, ip, r1, r2
 8006174:	4604      	mov	r4, r0
 8006176:	2301      	movs	r3, #1
 8006178:	e7f0      	b.n	800615c <_svfiprintf_r+0x194>
 800617a:	ab03      	add	r3, sp, #12
 800617c:	9300      	str	r3, [sp, #0]
 800617e:	462a      	mov	r2, r5
 8006180:	4b0f      	ldr	r3, [pc, #60]	; (80061c0 <_svfiprintf_r+0x1f8>)
 8006182:	a904      	add	r1, sp, #16
 8006184:	4638      	mov	r0, r7
 8006186:	f3af 8000 	nop.w
 800618a:	1c42      	adds	r2, r0, #1
 800618c:	4606      	mov	r6, r0
 800618e:	d1d6      	bne.n	800613e <_svfiprintf_r+0x176>
 8006190:	89ab      	ldrh	r3, [r5, #12]
 8006192:	065b      	lsls	r3, r3, #25
 8006194:	f53f af2c 	bmi.w	8005ff0 <_svfiprintf_r+0x28>
 8006198:	9809      	ldr	r0, [sp, #36]	; 0x24
 800619a:	b01d      	add	sp, #116	; 0x74
 800619c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061a0:	ab03      	add	r3, sp, #12
 80061a2:	9300      	str	r3, [sp, #0]
 80061a4:	462a      	mov	r2, r5
 80061a6:	4b06      	ldr	r3, [pc, #24]	; (80061c0 <_svfiprintf_r+0x1f8>)
 80061a8:	a904      	add	r1, sp, #16
 80061aa:	4638      	mov	r0, r7
 80061ac:	f000 f87a 	bl	80062a4 <_printf_i>
 80061b0:	e7eb      	b.n	800618a <_svfiprintf_r+0x1c2>
 80061b2:	bf00      	nop
 80061b4:	08007630 	.word	0x08007630
 80061b8:	0800763a 	.word	0x0800763a
 80061bc:	00000000 	.word	0x00000000
 80061c0:	08005f11 	.word	0x08005f11
 80061c4:	08007636 	.word	0x08007636

080061c8 <_printf_common>:
 80061c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061cc:	4616      	mov	r6, r2
 80061ce:	4699      	mov	r9, r3
 80061d0:	688a      	ldr	r2, [r1, #8]
 80061d2:	690b      	ldr	r3, [r1, #16]
 80061d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061d8:	4293      	cmp	r3, r2
 80061da:	bfb8      	it	lt
 80061dc:	4613      	movlt	r3, r2
 80061de:	6033      	str	r3, [r6, #0]
 80061e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061e4:	4607      	mov	r7, r0
 80061e6:	460c      	mov	r4, r1
 80061e8:	b10a      	cbz	r2, 80061ee <_printf_common+0x26>
 80061ea:	3301      	adds	r3, #1
 80061ec:	6033      	str	r3, [r6, #0]
 80061ee:	6823      	ldr	r3, [r4, #0]
 80061f0:	0699      	lsls	r1, r3, #26
 80061f2:	bf42      	ittt	mi
 80061f4:	6833      	ldrmi	r3, [r6, #0]
 80061f6:	3302      	addmi	r3, #2
 80061f8:	6033      	strmi	r3, [r6, #0]
 80061fa:	6825      	ldr	r5, [r4, #0]
 80061fc:	f015 0506 	ands.w	r5, r5, #6
 8006200:	d106      	bne.n	8006210 <_printf_common+0x48>
 8006202:	f104 0a19 	add.w	sl, r4, #25
 8006206:	68e3      	ldr	r3, [r4, #12]
 8006208:	6832      	ldr	r2, [r6, #0]
 800620a:	1a9b      	subs	r3, r3, r2
 800620c:	42ab      	cmp	r3, r5
 800620e:	dc26      	bgt.n	800625e <_printf_common+0x96>
 8006210:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006214:	1e13      	subs	r3, r2, #0
 8006216:	6822      	ldr	r2, [r4, #0]
 8006218:	bf18      	it	ne
 800621a:	2301      	movne	r3, #1
 800621c:	0692      	lsls	r2, r2, #26
 800621e:	d42b      	bmi.n	8006278 <_printf_common+0xb0>
 8006220:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006224:	4649      	mov	r1, r9
 8006226:	4638      	mov	r0, r7
 8006228:	47c0      	blx	r8
 800622a:	3001      	adds	r0, #1
 800622c:	d01e      	beq.n	800626c <_printf_common+0xa4>
 800622e:	6823      	ldr	r3, [r4, #0]
 8006230:	68e5      	ldr	r5, [r4, #12]
 8006232:	6832      	ldr	r2, [r6, #0]
 8006234:	f003 0306 	and.w	r3, r3, #6
 8006238:	2b04      	cmp	r3, #4
 800623a:	bf08      	it	eq
 800623c:	1aad      	subeq	r5, r5, r2
 800623e:	68a3      	ldr	r3, [r4, #8]
 8006240:	6922      	ldr	r2, [r4, #16]
 8006242:	bf0c      	ite	eq
 8006244:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006248:	2500      	movne	r5, #0
 800624a:	4293      	cmp	r3, r2
 800624c:	bfc4      	itt	gt
 800624e:	1a9b      	subgt	r3, r3, r2
 8006250:	18ed      	addgt	r5, r5, r3
 8006252:	2600      	movs	r6, #0
 8006254:	341a      	adds	r4, #26
 8006256:	42b5      	cmp	r5, r6
 8006258:	d11a      	bne.n	8006290 <_printf_common+0xc8>
 800625a:	2000      	movs	r0, #0
 800625c:	e008      	b.n	8006270 <_printf_common+0xa8>
 800625e:	2301      	movs	r3, #1
 8006260:	4652      	mov	r2, sl
 8006262:	4649      	mov	r1, r9
 8006264:	4638      	mov	r0, r7
 8006266:	47c0      	blx	r8
 8006268:	3001      	adds	r0, #1
 800626a:	d103      	bne.n	8006274 <_printf_common+0xac>
 800626c:	f04f 30ff 	mov.w	r0, #4294967295
 8006270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006274:	3501      	adds	r5, #1
 8006276:	e7c6      	b.n	8006206 <_printf_common+0x3e>
 8006278:	18e1      	adds	r1, r4, r3
 800627a:	1c5a      	adds	r2, r3, #1
 800627c:	2030      	movs	r0, #48	; 0x30
 800627e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006282:	4422      	add	r2, r4
 8006284:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006288:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800628c:	3302      	adds	r3, #2
 800628e:	e7c7      	b.n	8006220 <_printf_common+0x58>
 8006290:	2301      	movs	r3, #1
 8006292:	4622      	mov	r2, r4
 8006294:	4649      	mov	r1, r9
 8006296:	4638      	mov	r0, r7
 8006298:	47c0      	blx	r8
 800629a:	3001      	adds	r0, #1
 800629c:	d0e6      	beq.n	800626c <_printf_common+0xa4>
 800629e:	3601      	adds	r6, #1
 80062a0:	e7d9      	b.n	8006256 <_printf_common+0x8e>
	...

080062a4 <_printf_i>:
 80062a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062a8:	7e0f      	ldrb	r7, [r1, #24]
 80062aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80062ac:	2f78      	cmp	r7, #120	; 0x78
 80062ae:	4691      	mov	r9, r2
 80062b0:	4680      	mov	r8, r0
 80062b2:	460c      	mov	r4, r1
 80062b4:	469a      	mov	sl, r3
 80062b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80062ba:	d807      	bhi.n	80062cc <_printf_i+0x28>
 80062bc:	2f62      	cmp	r7, #98	; 0x62
 80062be:	d80a      	bhi.n	80062d6 <_printf_i+0x32>
 80062c0:	2f00      	cmp	r7, #0
 80062c2:	f000 80d8 	beq.w	8006476 <_printf_i+0x1d2>
 80062c6:	2f58      	cmp	r7, #88	; 0x58
 80062c8:	f000 80a3 	beq.w	8006412 <_printf_i+0x16e>
 80062cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80062d4:	e03a      	b.n	800634c <_printf_i+0xa8>
 80062d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80062da:	2b15      	cmp	r3, #21
 80062dc:	d8f6      	bhi.n	80062cc <_printf_i+0x28>
 80062de:	a101      	add	r1, pc, #4	; (adr r1, 80062e4 <_printf_i+0x40>)
 80062e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062e4:	0800633d 	.word	0x0800633d
 80062e8:	08006351 	.word	0x08006351
 80062ec:	080062cd 	.word	0x080062cd
 80062f0:	080062cd 	.word	0x080062cd
 80062f4:	080062cd 	.word	0x080062cd
 80062f8:	080062cd 	.word	0x080062cd
 80062fc:	08006351 	.word	0x08006351
 8006300:	080062cd 	.word	0x080062cd
 8006304:	080062cd 	.word	0x080062cd
 8006308:	080062cd 	.word	0x080062cd
 800630c:	080062cd 	.word	0x080062cd
 8006310:	0800645d 	.word	0x0800645d
 8006314:	08006381 	.word	0x08006381
 8006318:	0800643f 	.word	0x0800643f
 800631c:	080062cd 	.word	0x080062cd
 8006320:	080062cd 	.word	0x080062cd
 8006324:	0800647f 	.word	0x0800647f
 8006328:	080062cd 	.word	0x080062cd
 800632c:	08006381 	.word	0x08006381
 8006330:	080062cd 	.word	0x080062cd
 8006334:	080062cd 	.word	0x080062cd
 8006338:	08006447 	.word	0x08006447
 800633c:	682b      	ldr	r3, [r5, #0]
 800633e:	1d1a      	adds	r2, r3, #4
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	602a      	str	r2, [r5, #0]
 8006344:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006348:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800634c:	2301      	movs	r3, #1
 800634e:	e0a3      	b.n	8006498 <_printf_i+0x1f4>
 8006350:	6820      	ldr	r0, [r4, #0]
 8006352:	6829      	ldr	r1, [r5, #0]
 8006354:	0606      	lsls	r6, r0, #24
 8006356:	f101 0304 	add.w	r3, r1, #4
 800635a:	d50a      	bpl.n	8006372 <_printf_i+0xce>
 800635c:	680e      	ldr	r6, [r1, #0]
 800635e:	602b      	str	r3, [r5, #0]
 8006360:	2e00      	cmp	r6, #0
 8006362:	da03      	bge.n	800636c <_printf_i+0xc8>
 8006364:	232d      	movs	r3, #45	; 0x2d
 8006366:	4276      	negs	r6, r6
 8006368:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800636c:	485e      	ldr	r0, [pc, #376]	; (80064e8 <_printf_i+0x244>)
 800636e:	230a      	movs	r3, #10
 8006370:	e019      	b.n	80063a6 <_printf_i+0x102>
 8006372:	680e      	ldr	r6, [r1, #0]
 8006374:	602b      	str	r3, [r5, #0]
 8006376:	f010 0f40 	tst.w	r0, #64	; 0x40
 800637a:	bf18      	it	ne
 800637c:	b236      	sxthne	r6, r6
 800637e:	e7ef      	b.n	8006360 <_printf_i+0xbc>
 8006380:	682b      	ldr	r3, [r5, #0]
 8006382:	6820      	ldr	r0, [r4, #0]
 8006384:	1d19      	adds	r1, r3, #4
 8006386:	6029      	str	r1, [r5, #0]
 8006388:	0601      	lsls	r1, r0, #24
 800638a:	d501      	bpl.n	8006390 <_printf_i+0xec>
 800638c:	681e      	ldr	r6, [r3, #0]
 800638e:	e002      	b.n	8006396 <_printf_i+0xf2>
 8006390:	0646      	lsls	r6, r0, #25
 8006392:	d5fb      	bpl.n	800638c <_printf_i+0xe8>
 8006394:	881e      	ldrh	r6, [r3, #0]
 8006396:	4854      	ldr	r0, [pc, #336]	; (80064e8 <_printf_i+0x244>)
 8006398:	2f6f      	cmp	r7, #111	; 0x6f
 800639a:	bf0c      	ite	eq
 800639c:	2308      	moveq	r3, #8
 800639e:	230a      	movne	r3, #10
 80063a0:	2100      	movs	r1, #0
 80063a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80063a6:	6865      	ldr	r5, [r4, #4]
 80063a8:	60a5      	str	r5, [r4, #8]
 80063aa:	2d00      	cmp	r5, #0
 80063ac:	bfa2      	ittt	ge
 80063ae:	6821      	ldrge	r1, [r4, #0]
 80063b0:	f021 0104 	bicge.w	r1, r1, #4
 80063b4:	6021      	strge	r1, [r4, #0]
 80063b6:	b90e      	cbnz	r6, 80063bc <_printf_i+0x118>
 80063b8:	2d00      	cmp	r5, #0
 80063ba:	d04d      	beq.n	8006458 <_printf_i+0x1b4>
 80063bc:	4615      	mov	r5, r2
 80063be:	fbb6 f1f3 	udiv	r1, r6, r3
 80063c2:	fb03 6711 	mls	r7, r3, r1, r6
 80063c6:	5dc7      	ldrb	r7, [r0, r7]
 80063c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80063cc:	4637      	mov	r7, r6
 80063ce:	42bb      	cmp	r3, r7
 80063d0:	460e      	mov	r6, r1
 80063d2:	d9f4      	bls.n	80063be <_printf_i+0x11a>
 80063d4:	2b08      	cmp	r3, #8
 80063d6:	d10b      	bne.n	80063f0 <_printf_i+0x14c>
 80063d8:	6823      	ldr	r3, [r4, #0]
 80063da:	07de      	lsls	r6, r3, #31
 80063dc:	d508      	bpl.n	80063f0 <_printf_i+0x14c>
 80063de:	6923      	ldr	r3, [r4, #16]
 80063e0:	6861      	ldr	r1, [r4, #4]
 80063e2:	4299      	cmp	r1, r3
 80063e4:	bfde      	ittt	le
 80063e6:	2330      	movle	r3, #48	; 0x30
 80063e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80063ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80063f0:	1b52      	subs	r2, r2, r5
 80063f2:	6122      	str	r2, [r4, #16]
 80063f4:	f8cd a000 	str.w	sl, [sp]
 80063f8:	464b      	mov	r3, r9
 80063fa:	aa03      	add	r2, sp, #12
 80063fc:	4621      	mov	r1, r4
 80063fe:	4640      	mov	r0, r8
 8006400:	f7ff fee2 	bl	80061c8 <_printf_common>
 8006404:	3001      	adds	r0, #1
 8006406:	d14c      	bne.n	80064a2 <_printf_i+0x1fe>
 8006408:	f04f 30ff 	mov.w	r0, #4294967295
 800640c:	b004      	add	sp, #16
 800640e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006412:	4835      	ldr	r0, [pc, #212]	; (80064e8 <_printf_i+0x244>)
 8006414:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006418:	6829      	ldr	r1, [r5, #0]
 800641a:	6823      	ldr	r3, [r4, #0]
 800641c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006420:	6029      	str	r1, [r5, #0]
 8006422:	061d      	lsls	r5, r3, #24
 8006424:	d514      	bpl.n	8006450 <_printf_i+0x1ac>
 8006426:	07df      	lsls	r7, r3, #31
 8006428:	bf44      	itt	mi
 800642a:	f043 0320 	orrmi.w	r3, r3, #32
 800642e:	6023      	strmi	r3, [r4, #0]
 8006430:	b91e      	cbnz	r6, 800643a <_printf_i+0x196>
 8006432:	6823      	ldr	r3, [r4, #0]
 8006434:	f023 0320 	bic.w	r3, r3, #32
 8006438:	6023      	str	r3, [r4, #0]
 800643a:	2310      	movs	r3, #16
 800643c:	e7b0      	b.n	80063a0 <_printf_i+0xfc>
 800643e:	6823      	ldr	r3, [r4, #0]
 8006440:	f043 0320 	orr.w	r3, r3, #32
 8006444:	6023      	str	r3, [r4, #0]
 8006446:	2378      	movs	r3, #120	; 0x78
 8006448:	4828      	ldr	r0, [pc, #160]	; (80064ec <_printf_i+0x248>)
 800644a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800644e:	e7e3      	b.n	8006418 <_printf_i+0x174>
 8006450:	0659      	lsls	r1, r3, #25
 8006452:	bf48      	it	mi
 8006454:	b2b6      	uxthmi	r6, r6
 8006456:	e7e6      	b.n	8006426 <_printf_i+0x182>
 8006458:	4615      	mov	r5, r2
 800645a:	e7bb      	b.n	80063d4 <_printf_i+0x130>
 800645c:	682b      	ldr	r3, [r5, #0]
 800645e:	6826      	ldr	r6, [r4, #0]
 8006460:	6961      	ldr	r1, [r4, #20]
 8006462:	1d18      	adds	r0, r3, #4
 8006464:	6028      	str	r0, [r5, #0]
 8006466:	0635      	lsls	r5, r6, #24
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	d501      	bpl.n	8006470 <_printf_i+0x1cc>
 800646c:	6019      	str	r1, [r3, #0]
 800646e:	e002      	b.n	8006476 <_printf_i+0x1d2>
 8006470:	0670      	lsls	r0, r6, #25
 8006472:	d5fb      	bpl.n	800646c <_printf_i+0x1c8>
 8006474:	8019      	strh	r1, [r3, #0]
 8006476:	2300      	movs	r3, #0
 8006478:	6123      	str	r3, [r4, #16]
 800647a:	4615      	mov	r5, r2
 800647c:	e7ba      	b.n	80063f4 <_printf_i+0x150>
 800647e:	682b      	ldr	r3, [r5, #0]
 8006480:	1d1a      	adds	r2, r3, #4
 8006482:	602a      	str	r2, [r5, #0]
 8006484:	681d      	ldr	r5, [r3, #0]
 8006486:	6862      	ldr	r2, [r4, #4]
 8006488:	2100      	movs	r1, #0
 800648a:	4628      	mov	r0, r5
 800648c:	f7f9 fea0 	bl	80001d0 <memchr>
 8006490:	b108      	cbz	r0, 8006496 <_printf_i+0x1f2>
 8006492:	1b40      	subs	r0, r0, r5
 8006494:	6060      	str	r0, [r4, #4]
 8006496:	6863      	ldr	r3, [r4, #4]
 8006498:	6123      	str	r3, [r4, #16]
 800649a:	2300      	movs	r3, #0
 800649c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064a0:	e7a8      	b.n	80063f4 <_printf_i+0x150>
 80064a2:	6923      	ldr	r3, [r4, #16]
 80064a4:	462a      	mov	r2, r5
 80064a6:	4649      	mov	r1, r9
 80064a8:	4640      	mov	r0, r8
 80064aa:	47d0      	blx	sl
 80064ac:	3001      	adds	r0, #1
 80064ae:	d0ab      	beq.n	8006408 <_printf_i+0x164>
 80064b0:	6823      	ldr	r3, [r4, #0]
 80064b2:	079b      	lsls	r3, r3, #30
 80064b4:	d413      	bmi.n	80064de <_printf_i+0x23a>
 80064b6:	68e0      	ldr	r0, [r4, #12]
 80064b8:	9b03      	ldr	r3, [sp, #12]
 80064ba:	4298      	cmp	r0, r3
 80064bc:	bfb8      	it	lt
 80064be:	4618      	movlt	r0, r3
 80064c0:	e7a4      	b.n	800640c <_printf_i+0x168>
 80064c2:	2301      	movs	r3, #1
 80064c4:	4632      	mov	r2, r6
 80064c6:	4649      	mov	r1, r9
 80064c8:	4640      	mov	r0, r8
 80064ca:	47d0      	blx	sl
 80064cc:	3001      	adds	r0, #1
 80064ce:	d09b      	beq.n	8006408 <_printf_i+0x164>
 80064d0:	3501      	adds	r5, #1
 80064d2:	68e3      	ldr	r3, [r4, #12]
 80064d4:	9903      	ldr	r1, [sp, #12]
 80064d6:	1a5b      	subs	r3, r3, r1
 80064d8:	42ab      	cmp	r3, r5
 80064da:	dcf2      	bgt.n	80064c2 <_printf_i+0x21e>
 80064dc:	e7eb      	b.n	80064b6 <_printf_i+0x212>
 80064de:	2500      	movs	r5, #0
 80064e0:	f104 0619 	add.w	r6, r4, #25
 80064e4:	e7f5      	b.n	80064d2 <_printf_i+0x22e>
 80064e6:	bf00      	nop
 80064e8:	08007641 	.word	0x08007641
 80064ec:	08007652 	.word	0x08007652

080064f0 <memcpy>:
 80064f0:	440a      	add	r2, r1
 80064f2:	4291      	cmp	r1, r2
 80064f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80064f8:	d100      	bne.n	80064fc <memcpy+0xc>
 80064fa:	4770      	bx	lr
 80064fc:	b510      	push	{r4, lr}
 80064fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006502:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006506:	4291      	cmp	r1, r2
 8006508:	d1f9      	bne.n	80064fe <memcpy+0xe>
 800650a:	bd10      	pop	{r4, pc}

0800650c <memmove>:
 800650c:	4288      	cmp	r0, r1
 800650e:	b510      	push	{r4, lr}
 8006510:	eb01 0402 	add.w	r4, r1, r2
 8006514:	d902      	bls.n	800651c <memmove+0x10>
 8006516:	4284      	cmp	r4, r0
 8006518:	4623      	mov	r3, r4
 800651a:	d807      	bhi.n	800652c <memmove+0x20>
 800651c:	1e43      	subs	r3, r0, #1
 800651e:	42a1      	cmp	r1, r4
 8006520:	d008      	beq.n	8006534 <memmove+0x28>
 8006522:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006526:	f803 2f01 	strb.w	r2, [r3, #1]!
 800652a:	e7f8      	b.n	800651e <memmove+0x12>
 800652c:	4402      	add	r2, r0
 800652e:	4601      	mov	r1, r0
 8006530:	428a      	cmp	r2, r1
 8006532:	d100      	bne.n	8006536 <memmove+0x2a>
 8006534:	bd10      	pop	{r4, pc}
 8006536:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800653a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800653e:	e7f7      	b.n	8006530 <memmove+0x24>

08006540 <_free_r>:
 8006540:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006542:	2900      	cmp	r1, #0
 8006544:	d044      	beq.n	80065d0 <_free_r+0x90>
 8006546:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800654a:	9001      	str	r0, [sp, #4]
 800654c:	2b00      	cmp	r3, #0
 800654e:	f1a1 0404 	sub.w	r4, r1, #4
 8006552:	bfb8      	it	lt
 8006554:	18e4      	addlt	r4, r4, r3
 8006556:	f000 f913 	bl	8006780 <__malloc_lock>
 800655a:	4a1e      	ldr	r2, [pc, #120]	; (80065d4 <_free_r+0x94>)
 800655c:	9801      	ldr	r0, [sp, #4]
 800655e:	6813      	ldr	r3, [r2, #0]
 8006560:	b933      	cbnz	r3, 8006570 <_free_r+0x30>
 8006562:	6063      	str	r3, [r4, #4]
 8006564:	6014      	str	r4, [r2, #0]
 8006566:	b003      	add	sp, #12
 8006568:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800656c:	f000 b90e 	b.w	800678c <__malloc_unlock>
 8006570:	42a3      	cmp	r3, r4
 8006572:	d908      	bls.n	8006586 <_free_r+0x46>
 8006574:	6825      	ldr	r5, [r4, #0]
 8006576:	1961      	adds	r1, r4, r5
 8006578:	428b      	cmp	r3, r1
 800657a:	bf01      	itttt	eq
 800657c:	6819      	ldreq	r1, [r3, #0]
 800657e:	685b      	ldreq	r3, [r3, #4]
 8006580:	1949      	addeq	r1, r1, r5
 8006582:	6021      	streq	r1, [r4, #0]
 8006584:	e7ed      	b.n	8006562 <_free_r+0x22>
 8006586:	461a      	mov	r2, r3
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	b10b      	cbz	r3, 8006590 <_free_r+0x50>
 800658c:	42a3      	cmp	r3, r4
 800658e:	d9fa      	bls.n	8006586 <_free_r+0x46>
 8006590:	6811      	ldr	r1, [r2, #0]
 8006592:	1855      	adds	r5, r2, r1
 8006594:	42a5      	cmp	r5, r4
 8006596:	d10b      	bne.n	80065b0 <_free_r+0x70>
 8006598:	6824      	ldr	r4, [r4, #0]
 800659a:	4421      	add	r1, r4
 800659c:	1854      	adds	r4, r2, r1
 800659e:	42a3      	cmp	r3, r4
 80065a0:	6011      	str	r1, [r2, #0]
 80065a2:	d1e0      	bne.n	8006566 <_free_r+0x26>
 80065a4:	681c      	ldr	r4, [r3, #0]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	6053      	str	r3, [r2, #4]
 80065aa:	4421      	add	r1, r4
 80065ac:	6011      	str	r1, [r2, #0]
 80065ae:	e7da      	b.n	8006566 <_free_r+0x26>
 80065b0:	d902      	bls.n	80065b8 <_free_r+0x78>
 80065b2:	230c      	movs	r3, #12
 80065b4:	6003      	str	r3, [r0, #0]
 80065b6:	e7d6      	b.n	8006566 <_free_r+0x26>
 80065b8:	6825      	ldr	r5, [r4, #0]
 80065ba:	1961      	adds	r1, r4, r5
 80065bc:	428b      	cmp	r3, r1
 80065be:	bf04      	itt	eq
 80065c0:	6819      	ldreq	r1, [r3, #0]
 80065c2:	685b      	ldreq	r3, [r3, #4]
 80065c4:	6063      	str	r3, [r4, #4]
 80065c6:	bf04      	itt	eq
 80065c8:	1949      	addeq	r1, r1, r5
 80065ca:	6021      	streq	r1, [r4, #0]
 80065cc:	6054      	str	r4, [r2, #4]
 80065ce:	e7ca      	b.n	8006566 <_free_r+0x26>
 80065d0:	b003      	add	sp, #12
 80065d2:	bd30      	pop	{r4, r5, pc}
 80065d4:	2000039c 	.word	0x2000039c

080065d8 <sbrk_aligned>:
 80065d8:	b570      	push	{r4, r5, r6, lr}
 80065da:	4e0e      	ldr	r6, [pc, #56]	; (8006614 <sbrk_aligned+0x3c>)
 80065dc:	460c      	mov	r4, r1
 80065de:	6831      	ldr	r1, [r6, #0]
 80065e0:	4605      	mov	r5, r0
 80065e2:	b911      	cbnz	r1, 80065ea <sbrk_aligned+0x12>
 80065e4:	f000 f8bc 	bl	8006760 <_sbrk_r>
 80065e8:	6030      	str	r0, [r6, #0]
 80065ea:	4621      	mov	r1, r4
 80065ec:	4628      	mov	r0, r5
 80065ee:	f000 f8b7 	bl	8006760 <_sbrk_r>
 80065f2:	1c43      	adds	r3, r0, #1
 80065f4:	d00a      	beq.n	800660c <sbrk_aligned+0x34>
 80065f6:	1cc4      	adds	r4, r0, #3
 80065f8:	f024 0403 	bic.w	r4, r4, #3
 80065fc:	42a0      	cmp	r0, r4
 80065fe:	d007      	beq.n	8006610 <sbrk_aligned+0x38>
 8006600:	1a21      	subs	r1, r4, r0
 8006602:	4628      	mov	r0, r5
 8006604:	f000 f8ac 	bl	8006760 <_sbrk_r>
 8006608:	3001      	adds	r0, #1
 800660a:	d101      	bne.n	8006610 <sbrk_aligned+0x38>
 800660c:	f04f 34ff 	mov.w	r4, #4294967295
 8006610:	4620      	mov	r0, r4
 8006612:	bd70      	pop	{r4, r5, r6, pc}
 8006614:	200003a0 	.word	0x200003a0

08006618 <_malloc_r>:
 8006618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800661c:	1ccd      	adds	r5, r1, #3
 800661e:	f025 0503 	bic.w	r5, r5, #3
 8006622:	3508      	adds	r5, #8
 8006624:	2d0c      	cmp	r5, #12
 8006626:	bf38      	it	cc
 8006628:	250c      	movcc	r5, #12
 800662a:	2d00      	cmp	r5, #0
 800662c:	4607      	mov	r7, r0
 800662e:	db01      	blt.n	8006634 <_malloc_r+0x1c>
 8006630:	42a9      	cmp	r1, r5
 8006632:	d905      	bls.n	8006640 <_malloc_r+0x28>
 8006634:	230c      	movs	r3, #12
 8006636:	603b      	str	r3, [r7, #0]
 8006638:	2600      	movs	r6, #0
 800663a:	4630      	mov	r0, r6
 800663c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006640:	4e2e      	ldr	r6, [pc, #184]	; (80066fc <_malloc_r+0xe4>)
 8006642:	f000 f89d 	bl	8006780 <__malloc_lock>
 8006646:	6833      	ldr	r3, [r6, #0]
 8006648:	461c      	mov	r4, r3
 800664a:	bb34      	cbnz	r4, 800669a <_malloc_r+0x82>
 800664c:	4629      	mov	r1, r5
 800664e:	4638      	mov	r0, r7
 8006650:	f7ff ffc2 	bl	80065d8 <sbrk_aligned>
 8006654:	1c43      	adds	r3, r0, #1
 8006656:	4604      	mov	r4, r0
 8006658:	d14d      	bne.n	80066f6 <_malloc_r+0xde>
 800665a:	6834      	ldr	r4, [r6, #0]
 800665c:	4626      	mov	r6, r4
 800665e:	2e00      	cmp	r6, #0
 8006660:	d140      	bne.n	80066e4 <_malloc_r+0xcc>
 8006662:	6823      	ldr	r3, [r4, #0]
 8006664:	4631      	mov	r1, r6
 8006666:	4638      	mov	r0, r7
 8006668:	eb04 0803 	add.w	r8, r4, r3
 800666c:	f000 f878 	bl	8006760 <_sbrk_r>
 8006670:	4580      	cmp	r8, r0
 8006672:	d13a      	bne.n	80066ea <_malloc_r+0xd2>
 8006674:	6821      	ldr	r1, [r4, #0]
 8006676:	3503      	adds	r5, #3
 8006678:	1a6d      	subs	r5, r5, r1
 800667a:	f025 0503 	bic.w	r5, r5, #3
 800667e:	3508      	adds	r5, #8
 8006680:	2d0c      	cmp	r5, #12
 8006682:	bf38      	it	cc
 8006684:	250c      	movcc	r5, #12
 8006686:	4629      	mov	r1, r5
 8006688:	4638      	mov	r0, r7
 800668a:	f7ff ffa5 	bl	80065d8 <sbrk_aligned>
 800668e:	3001      	adds	r0, #1
 8006690:	d02b      	beq.n	80066ea <_malloc_r+0xd2>
 8006692:	6823      	ldr	r3, [r4, #0]
 8006694:	442b      	add	r3, r5
 8006696:	6023      	str	r3, [r4, #0]
 8006698:	e00e      	b.n	80066b8 <_malloc_r+0xa0>
 800669a:	6822      	ldr	r2, [r4, #0]
 800669c:	1b52      	subs	r2, r2, r5
 800669e:	d41e      	bmi.n	80066de <_malloc_r+0xc6>
 80066a0:	2a0b      	cmp	r2, #11
 80066a2:	d916      	bls.n	80066d2 <_malloc_r+0xba>
 80066a4:	1961      	adds	r1, r4, r5
 80066a6:	42a3      	cmp	r3, r4
 80066a8:	6025      	str	r5, [r4, #0]
 80066aa:	bf18      	it	ne
 80066ac:	6059      	strne	r1, [r3, #4]
 80066ae:	6863      	ldr	r3, [r4, #4]
 80066b0:	bf08      	it	eq
 80066b2:	6031      	streq	r1, [r6, #0]
 80066b4:	5162      	str	r2, [r4, r5]
 80066b6:	604b      	str	r3, [r1, #4]
 80066b8:	4638      	mov	r0, r7
 80066ba:	f104 060b 	add.w	r6, r4, #11
 80066be:	f000 f865 	bl	800678c <__malloc_unlock>
 80066c2:	f026 0607 	bic.w	r6, r6, #7
 80066c6:	1d23      	adds	r3, r4, #4
 80066c8:	1af2      	subs	r2, r6, r3
 80066ca:	d0b6      	beq.n	800663a <_malloc_r+0x22>
 80066cc:	1b9b      	subs	r3, r3, r6
 80066ce:	50a3      	str	r3, [r4, r2]
 80066d0:	e7b3      	b.n	800663a <_malloc_r+0x22>
 80066d2:	6862      	ldr	r2, [r4, #4]
 80066d4:	42a3      	cmp	r3, r4
 80066d6:	bf0c      	ite	eq
 80066d8:	6032      	streq	r2, [r6, #0]
 80066da:	605a      	strne	r2, [r3, #4]
 80066dc:	e7ec      	b.n	80066b8 <_malloc_r+0xa0>
 80066de:	4623      	mov	r3, r4
 80066e0:	6864      	ldr	r4, [r4, #4]
 80066e2:	e7b2      	b.n	800664a <_malloc_r+0x32>
 80066e4:	4634      	mov	r4, r6
 80066e6:	6876      	ldr	r6, [r6, #4]
 80066e8:	e7b9      	b.n	800665e <_malloc_r+0x46>
 80066ea:	230c      	movs	r3, #12
 80066ec:	603b      	str	r3, [r7, #0]
 80066ee:	4638      	mov	r0, r7
 80066f0:	f000 f84c 	bl	800678c <__malloc_unlock>
 80066f4:	e7a1      	b.n	800663a <_malloc_r+0x22>
 80066f6:	6025      	str	r5, [r4, #0]
 80066f8:	e7de      	b.n	80066b8 <_malloc_r+0xa0>
 80066fa:	bf00      	nop
 80066fc:	2000039c 	.word	0x2000039c

08006700 <_realloc_r>:
 8006700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006704:	4680      	mov	r8, r0
 8006706:	4614      	mov	r4, r2
 8006708:	460e      	mov	r6, r1
 800670a:	b921      	cbnz	r1, 8006716 <_realloc_r+0x16>
 800670c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006710:	4611      	mov	r1, r2
 8006712:	f7ff bf81 	b.w	8006618 <_malloc_r>
 8006716:	b92a      	cbnz	r2, 8006724 <_realloc_r+0x24>
 8006718:	f7ff ff12 	bl	8006540 <_free_r>
 800671c:	4625      	mov	r5, r4
 800671e:	4628      	mov	r0, r5
 8006720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006724:	f000 f838 	bl	8006798 <_malloc_usable_size_r>
 8006728:	4284      	cmp	r4, r0
 800672a:	4607      	mov	r7, r0
 800672c:	d802      	bhi.n	8006734 <_realloc_r+0x34>
 800672e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006732:	d812      	bhi.n	800675a <_realloc_r+0x5a>
 8006734:	4621      	mov	r1, r4
 8006736:	4640      	mov	r0, r8
 8006738:	f7ff ff6e 	bl	8006618 <_malloc_r>
 800673c:	4605      	mov	r5, r0
 800673e:	2800      	cmp	r0, #0
 8006740:	d0ed      	beq.n	800671e <_realloc_r+0x1e>
 8006742:	42bc      	cmp	r4, r7
 8006744:	4622      	mov	r2, r4
 8006746:	4631      	mov	r1, r6
 8006748:	bf28      	it	cs
 800674a:	463a      	movcs	r2, r7
 800674c:	f7ff fed0 	bl	80064f0 <memcpy>
 8006750:	4631      	mov	r1, r6
 8006752:	4640      	mov	r0, r8
 8006754:	f7ff fef4 	bl	8006540 <_free_r>
 8006758:	e7e1      	b.n	800671e <_realloc_r+0x1e>
 800675a:	4635      	mov	r5, r6
 800675c:	e7df      	b.n	800671e <_realloc_r+0x1e>
	...

08006760 <_sbrk_r>:
 8006760:	b538      	push	{r3, r4, r5, lr}
 8006762:	4d06      	ldr	r5, [pc, #24]	; (800677c <_sbrk_r+0x1c>)
 8006764:	2300      	movs	r3, #0
 8006766:	4604      	mov	r4, r0
 8006768:	4608      	mov	r0, r1
 800676a:	602b      	str	r3, [r5, #0]
 800676c:	f7fb fa50 	bl	8001c10 <_sbrk>
 8006770:	1c43      	adds	r3, r0, #1
 8006772:	d102      	bne.n	800677a <_sbrk_r+0x1a>
 8006774:	682b      	ldr	r3, [r5, #0]
 8006776:	b103      	cbz	r3, 800677a <_sbrk_r+0x1a>
 8006778:	6023      	str	r3, [r4, #0]
 800677a:	bd38      	pop	{r3, r4, r5, pc}
 800677c:	200003a4 	.word	0x200003a4

08006780 <__malloc_lock>:
 8006780:	4801      	ldr	r0, [pc, #4]	; (8006788 <__malloc_lock+0x8>)
 8006782:	f000 b811 	b.w	80067a8 <__retarget_lock_acquire_recursive>
 8006786:	bf00      	nop
 8006788:	200003a8 	.word	0x200003a8

0800678c <__malloc_unlock>:
 800678c:	4801      	ldr	r0, [pc, #4]	; (8006794 <__malloc_unlock+0x8>)
 800678e:	f000 b80c 	b.w	80067aa <__retarget_lock_release_recursive>
 8006792:	bf00      	nop
 8006794:	200003a8 	.word	0x200003a8

08006798 <_malloc_usable_size_r>:
 8006798:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800679c:	1f18      	subs	r0, r3, #4
 800679e:	2b00      	cmp	r3, #0
 80067a0:	bfbc      	itt	lt
 80067a2:	580b      	ldrlt	r3, [r1, r0]
 80067a4:	18c0      	addlt	r0, r0, r3
 80067a6:	4770      	bx	lr

080067a8 <__retarget_lock_acquire_recursive>:
 80067a8:	4770      	bx	lr

080067aa <__retarget_lock_release_recursive>:
 80067aa:	4770      	bx	lr

080067ac <_init>:
 80067ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ae:	bf00      	nop
 80067b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067b2:	bc08      	pop	{r3}
 80067b4:	469e      	mov	lr, r3
 80067b6:	4770      	bx	lr

080067b8 <_fini>:
 80067b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ba:	bf00      	nop
 80067bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067be:	bc08      	pop	{r3}
 80067c0:	469e      	mov	lr, r3
 80067c2:	4770      	bx	lr
